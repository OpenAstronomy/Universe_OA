<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about gsoc2022)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/cat_gsoc2022.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 24 Jun 2025 02:04:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC@Stingray: Final dash! blog#4</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1708_mihirtripathi97/</link><dc:creator>Mihirtripathi</dc:creator><description>&lt;p&gt;Hey everyone,&lt;/p&gt;
&lt;p&gt;It is the end of the coding period of GSoC”22. This is going to be my last blog about my project.&lt;/p&gt;
&lt;p&gt;After successfully implementing the bexvar method in Stingray (this &lt;a href="https://github.com/StingraySoftware/stingray/pull/664"&gt;PR&lt;/a&gt;). I and my mentors decided that we can now work to add bexvar as a method to Stingra’s Lightcurve class. This was not a part of my original proposal. The bexvar() method takes lightcurve data in input parameters, so it made sense to provide this facility to users. Stingray’s Lightcurve class facilitates users to create Lightcurve objects and perform several operations useful for time series analysis on them.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The Lightcurve object is created by providing two arrays ( time and counts) as input parameters. Along with these it also has several other optional parameters specifying relevant lightcurve data. Most of these parameters are also attributes of the Lightcurve class. We knew that the Lightcurve class does not have parameters like frac_exp (fractional exposer in each bin),bg_counts (background counts in each bin) and bg_ratio (background ratio in each bin) which are optional parameters of bexvar(). So to add bexvar() a method to theLightcurve class, we also included these parameters in theLightcurve class and declared them as its attributes. I started the work with this &lt;a href="https://github.com/StingraySoftware/stingray/pull/669"&gt;PR&lt;/a&gt;. However, just adding these parameters was not enough. The Lightcurve class provides some important filtering and sorting methods for Lightcurve objects. These methods did not support these optional parameters as they weren't there initially. It wouldn’t be so great if users create a Lightcurve object with all these parameters, then they may want to truncate the lightcurve or sort it or apply GTIs (Good time intervals) before calling bexvar() and the returned Lightcurve does not have these attributes. We worked on providing support for these new parameters in some of these methods.&lt;/p&gt;
&lt;p&gt;In addition to that, the bexvar() method works on the light curves with uneven sampling. Which led us to also investigate if Stingray supports the creation of such lightcurve objects. We found that the support was not very great for such data. While there was no restriction for creating a Lightcurve class with the time resolution parameter dt being an array, many methods of the Lightcurve class did not extend support for such data. We started working on providing this support after that. This led to some serious bug fixing and restless nights but finally, we were able to reach at a point where all of the existing tests are passing.&lt;/p&gt;
&lt;p&gt;Apart from this, I also created a jupiter notebook for a tutorial on the bexvar()method (see this &lt;a href="https://github.com/StingraySoftware/notebooks/pull/58"&gt;PR&lt;/a&gt;). This contains examples showcasing how to use the implemented method and also a section on the theoretical explanation of bexvar. This notebook will also be upgraded with examples of how to call bexvar() method implemented in the Lightcurve class once that work is completed.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*YFXjL3Wc5EqBE9vaXPHNBQ.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;With this final blog, my journey through &lt;a href="https://summerofcode.withgoogle.com/"&gt;GSoC”22&lt;/a&gt; comes to a happy end. You can check out my final report for this project containing rigorous details at this &lt;a href="https://mihirtripathi97.github.io/GSoC-22/"&gt;webpage&lt;/a&gt;. I will continue working with Stingray, I will continue contributing to OpenAstrnomy and other open source projects as well. I must say that GSoC has been really great it provided me the best opportunity for the beginning of my journey in the open source community. I would like to thank the &lt;a href="https://openastronomy.org/"&gt;OpenAstronomy&lt;/a&gt; organization for giving me this wonderful opportunity to contribute to open source projects for the Astrophysics community. This means a lot to me as I am one of the users of several projects of the member organizations.&lt;/p&gt;
&lt;p&gt;I would like to thank both my mentors &lt;a href="https://github.com/matteobachetti"&gt;Matteo Bachetti&lt;/a&gt; and &lt;a href="https://github.com/dhuppenkothen"&gt;Daniela Huppenkothen&lt;/a&gt; for being extremely generous, supportive, and motivating mentors. I am truly grateful to have you both as my mentors.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=1279d3b337e7" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1708_mihirtripathi97/</guid><pubDate>Mon, 12 Sep 2022 16:08:26 GMT</pubDate></item><item><title>GSoC Blog#4 (Final Submission)</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1225_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;It’s the end of GSoC 2022; man, it was a great experience! Starting with aimless contributions brought me to a project which united my two passions: programming and astrophysics. The three-month journey and the community bonding period were excellent learning experiences.&lt;/p&gt;
&lt;p&gt;From learning a new and robust language like Julia to using Unit Testing for real-world data, I learned a lot about programming. This period also tested my git skills (as open source is one of the best ways to get your hands dirty in it) as I resolved merge conflicts, changed branch heads whenever required, and always kept an eye on the log history. My whole project is presented here in terms of git commits and some explanation of what these are doing. In the end, I will point out what’s next from here, and I hope Stingray will grow up to become a beloved package like many others in the Julia Community.&lt;/p&gt;
&lt;p&gt;I did the project in 5PRs (three merged and two open to review), which are listed below:&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/1"&gt;&lt;em&gt;Implement Workflow&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/2"&gt;&lt;em&gt;Add Fourier methods and tests&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/3"&gt;&lt;em&gt;Implement GTI Reading and Handling&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/7"&gt;&lt;em&gt;Implement EventList&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Open)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/9"&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Open)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also documented this journey in four other blogs: &lt;a href="https://medium.com/@aman_p/gsoc-blog-0-8f65bf844cd8"&gt;Blog0&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-1-cc0c0995d56e"&gt;Blog1&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-2-63d283e1a60b"&gt;Blog2&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-3-350c7b7dad61"&gt;and Blog3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting a package from scratch can look like a behemoth task; you can confuse which methods to begin with, what the architecture will be, and how I will ensure continuous testing. Fortunately, my mentors were very helpful, and in the community bonding period itself, I initialized a basic package with the help of PkgTemplate.jl with integrated CIs.&lt;/p&gt;
&lt;p&gt;My mentor &lt;a href="https://github.com/matteobachetti"&gt;&lt;strong&gt;Matteo&lt;/strong&gt;&lt;/a&gt; suggested I go on to implement Fourier methods first as they are the primary thing required to create power and cross-spectra from an array. I started on with it, and the PR was a great lesson both in terms of how much code I needed to port with passing tests and how idiomatic I had to keep it to discover the full power of Julia. My initial code was pretty pythonic, and my other mentor, &lt;a href="https://github.com/giordano"&gt;&lt;strong&gt;Mosè&lt;/strong&gt;&lt;/a&gt;, gave much good advice on how to fix them and keep the code readable. Still, due to the sheer amount of code and tests I needed to write, the code is currently non-idiomatic for a few functions, and I hope to make them efficient in the future.&lt;/p&gt;
&lt;p&gt;After this, I needed a working tool to handle GTIs; trust me; this was the best part of the project. I was having fun with different interval operations I needed to implement, looking at them from different angles and maintaining the code’s sanctity. The tests passed, and I had pretty idiomatic code written there with handling file reading (HDF5 and FITS) for some tests, which helped me in the future.&lt;/p&gt;
&lt;p&gt;After the mid-evals, I got somewhat busy due to tests and college courses. After the first week, I started contributing again by considering different ways to represent photon arrival and count data. Using structs and methods for them (including extending Base functions when required) was the way to go, and after half of the second phase, I managed to get a PR on these things though the code is still in review. One can now plot the LightCurves, read data from a FITS file and use the Fourier methods to get the power and cross-spectra and perform operations on the related GTIs. But how?&lt;/p&gt;
&lt;p&gt;In the final week, my focus was to provide documentation on the functions mentioned, taking help from the Python package and changing it as required, especially as the markdowns are different for both languages’ docstrings. I followed it with writing a user guide, although it is still incomplete in the current PR, and I hope to get it done well by the end of this month (working outside of GSoC :).&lt;/p&gt;
&lt;p&gt;As a whole, this project was exciting to me. I can safely say that I lacked experience in many parts, but my mentors were fantastic, and I had some great discussions with them. The essential power of Julia is how it handles memory and compiles the code as required (JIT), and with this in focus, the project can still grow to various extents.&lt;/p&gt;
&lt;p&gt;For example, good use of type systems in the Fourier methods, a clearer way to use generators (the resumable functions), and user APIs for Cross and Power Spectra would be the first thing this package needs working on. After this, we can implement other features like Bi-Spectra and Var-Energy Spectra. In the end, one can see how powerful Julia can be if programmed correctly. Below is the runtime for reading the same files in Python and Julia (Julia is doing almost 40 times faster). This order of speed boost is still an excellent achievement for Julia while keeping all the important arrays and metadata from the file in a struct.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/925/1*p-F3ErLlJtjTA4fSQSqeJw.png"&gt;&lt;figcaption&gt;Python Code&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/633/1*hyOqX2j2UxQ59IxKwxej4w.png"&gt;&lt;figcaption&gt;Julia Code&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;With this, I end this blog and this awesome GSoC program, with a hope to keep contributing to this and other open source projects and learning new things. Great thanks to my mentors, Open Astronomy and Google for providing this opportunity.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/736/0*eGlGa84zNsGaMHL0.jpg"&gt;&lt;figcaption&gt;Source: Pinterest&lt;/figcaption&gt;&lt;/figure&gt;&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=1c27a20f13a2" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1225_aman-pandey-afk/</guid><pubDate>Mon, 12 Sep 2022 11:25:22 GMT</pubDate></item><item><title>Final Evaluation - A time to look back.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/236320199c2c7323f80233362c6a584c/71b12/logoOA.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="logo_OpenAstronomy" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/236320199c2c7323f80233362c6a584c/f058b/logoOA.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="logo_OpenAstronomy"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;1. What I have done in OpenAstronomy and in RADIS&lt;/h4&gt;
&lt;p&gt;Throughout 3 months with RADIS, I have successfully developed a new fitting module for spectrum fitting purposes. RADIS has its own fitting feature, as shown in &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html#sphx-glr-auto-examples-plot-1t-fit-py"&gt;1-temperature fit example&lt;/a&gt;, where you have to manually create the spectrum model, input the experimental spectrum and other ground-truths into numerous RADIS native functions, as well as adjust the fitting pipeline yourself.&lt;/p&gt;
&lt;p&gt;Now with the new fitting module released, all you have to do is to prepare a &lt;code class="language-text"&gt;.spec&lt;/code&gt; file containing your experimental spectrum, fill some JSON forms describing the ground-truth conditions just like how you fill your medical checkup paper, call the function &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.tools.new_fitting.html#radis.tools.new_fitting.fit_spectrum"&gt;&lt;code class="language-text"&gt;fit_spectrum()&lt;/code&gt;&lt;/a&gt; and let it do all the work! If you are not satisfied with the result, you can simply adjust the parameters in your JSON, such as &lt;code class="language-text"&gt;slit&lt;/code&gt; and &lt;code class="language-text"&gt;path_length&lt;/code&gt;, then recall the function again, until the results are satisfied.&lt;/p&gt;
&lt;p&gt;This is way easier and more convenient than dwelling into RADIS documentation to find out and learn how to use the current example, especially for new RADIS users. Various &lt;a href="https://github.com/radis/radis/pull/522#issue-1365475821"&gt;benchmarking efforts&lt;/a&gt; have shown that this new fitting module has performance advantages over the old version. This new fitting module aims to provide an end-to-end fitting experience, with minimum amount of RADIS knowledge needed.&lt;/p&gt;
&lt;p&gt;You can see an overview of my project here: &lt;a href="https://github.com/radis/radis/projects/6"&gt;https://github.com/radis/radis/projects/6&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;2. GSoC, RADIS and a learning curve that has been fulfilled&lt;/h4&gt;
&lt;p&gt;Throughout my GSoC journey with RADIS and working as a contributor, I really enjoyed all the experience of developing and contributing a meaningful improvement to a grand community-based project. Furthermore, I used to be a Computer Science majored student back in Vietnam, but after coming to Japan, I have been learning engineering for more than 2 years, enough for me to miss the old time coding projects and grinding hackathons, the days when I was truly a “CS student”. GSoC truly granted me a precious chance to rekindle the interest I have long lost, with wonderous opportunities to learn from prestigious mentors, and a huge boost for my background to get back to the run.&lt;/p&gt;
&lt;p&gt;In addition, one of the most satisfying moments in this GSoC, is when I finally nailed a bug or issue after days (or even weeks, trust me) of debugging, using the last brain cell to figure out what is the reason. The longer the suffering, the greater the hype that comes afterward. I guess we as developers all share this kind of experience often, but for a guy who starts coding again after a long time like, the ecstasy is at least three-fold.&lt;/p&gt;
&lt;p&gt;Furthermore, I don’t know what other open-source projects are, but RADIS is an extremely well-developed one. They have code coverage, pre-commit check, automatic documentation, and an extensive library of well-structured classes and methods for multiple purposes. This is a level of professional development I have never seen before, and I am extremely eager to learn all of this, not only within the GSoC, but also for a much longer time. This project also helped me to gain significant knowledge and experience&lt;/p&gt;
&lt;p&gt;So, to sum up, I really enjoyed this GSoC, especially with RADIS mentors and community. Thank you so much, GSoC and RADIS, for all of these wonderous experiences.&lt;/p&gt;
&lt;h4&gt;3. Of course, there were hard times, but hey, “Hard times come again no more”&lt;/h4&gt;
&lt;p&gt;I believe the most challenging part of my GSoC 2022 experience, is during the development of my project itself. My project is “Spectrum Fitting Improvement”, in which I will implement a brand-new fitting method that uses a different module than the original method’s, and there are several challenges that I only discovered after joining the project.&lt;/p&gt;
&lt;p&gt;Firstly, the fitting process itself is totally a black box, where I implemented a spectrum, along with its ground-truth parameters, and hopefully the result comes as I expect. In the early days, there were weeks when I could not understand why the result went bad. The reasons could be faulty ground-truth data (original ground-truth parameters are incorrect), or the spectrum itself (mistakes during spectral variable extraction), a code bug, or even from the RADIS limitation itself (currently RADIS only uses air broadening coefficients, which is not suitable for experiments in other gases). All of these costed me huge time and efforts just trying to figure out the culprit, and those were the most anxious times.&lt;/p&gt;
&lt;p&gt;Secondly, there are several problems and bugs, or required implementations that can only be discovered during the last weeks of this GSoC, which makes these time tough and sour for me.&lt;/p&gt;
&lt;p&gt;Finally, my laptop was abruptly broken beyond repair during the middle of second phase, in which I had to wait for one week before the new laptop arrived and I could continue my work. Truly the darkest, most desperate days back then.&lt;/p&gt;
&lt;p&gt;Gradually the learning curve is flattened, but still, there were tough times. Thanks to GSoC, I could experience what would happen in a real project, where you have to anticipate and be ready to deal with all possible accidents and troubles, while keeping on a tight schedule. These will be precious experience for me and my career ahead.&lt;/p&gt;
&lt;h4&gt;4. A little tribute to my mentors&lt;/h4&gt;
&lt;p&gt;Firstly, I would like to say, thank you so much, my mentors - Mr. Erwan, Mr. Minou, Anand, Gagan, as well as other unofficial mentors such as Mr. Corentin - for all the time and efforts you have put through to guide us – some random annoying students always trying to bother you with questions throughout 4 months.&lt;/p&gt;
&lt;p&gt;You helped us a lot in understanding the RADIS codebase and overall structure, as well as various skills in developing a grand-scaled project like RADIS. Throughout this GSoC, I had opportunity to familiarize with code coverage, pre-commit check and linting, automatic documentation such as readthedocs, a bunch of GitHub tips, and most important, a sheer confidence of open-source project contributing, by jumping into the source code itself, understanding it slow and steady, then finally pushing commits. Before this April, all of these were very scary for me. But now, as I look back, they are just breezes to me. Now I can truly understand and feel the scope of GSoC – to encourage students to contribute to open-source projects. Thanks to you, this is a huge success to me.&lt;/p&gt;
&lt;p&gt;All of these could not be done without you entrusting us from the very beginning of selection process. From the very moment of you accepting us, we are here today, wrapping up what we have learned, finishing our projects, and carving our names into the list of RADIS contributors. These will be precious experience for me and my career ahead.&lt;/p&gt;
&lt;h4&gt;5. And finally, to someone reading this&lt;/h4&gt;
&lt;p&gt;Ayyo, to whoever reading this,&lt;/p&gt;
&lt;p&gt;I believe that you must be some next year’s GSoC applicants sneaking around and patiently preparing for the upcoming turn. If you are reading this, then firstly I would like to say thank you for reading all the way here.&lt;/p&gt;
&lt;p&gt;I have so many things to share you about all the experiences I had during this GSoC, about every moment in all aspects during these 3 months. But I’m afraid I might accidentally spoil your fun in near future, so I will only give some necessary advice, hope they might help you enjoy better in the next GSoC.&lt;/p&gt;
&lt;p&gt;Firstly, the actual time required to complete the project always LONGER than the initially planned time, so try your best to finish everything as soon as possible.&lt;/p&gt;
&lt;p&gt;Secondly, there might be times when you confront an extremely hard issue which takes you A LOT of time and you still cannot deal with it. When that time comes, explain to your mentors, and find a way, instead of gazing on the screen trying to solve it singlehandedly while wasting 1-2 weeks for that, like I did.&lt;/p&gt;
&lt;p&gt;This is also relevant to the above advice but, if you find yourself scared to tell your mentors about a challenge you are facing, please do not be afraid and just tell them. I used to be extremely afraid of asking my mentors because sometimes they were deadly serious (in a professional way), and thus I forced myself to solve an impossible task for 2 weeks before finally reaching out to them. Please do not be afraid and share with them anything, if you want to find a solution, if you want to change the current objectives, or whatever. Just ask!&lt;/p&gt;
&lt;p&gt;And finally, try to enjoy GSoC, I meant, every moment of it. It worths. Really.&lt;/p&gt;
&lt;p&gt;Good luck to become a GSoC member and successfully carve your name among contributors!&lt;/p&gt;
&lt;p&gt;September 12, 2022
Tran Huu Nhat Huy&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/4d7ee6f3d3a81c95e441a7cc5dcadb98/ac99c/me.jpg" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Me, among the peaks of Shizuoka, Japan." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/4d7ee6f3d3a81c95e441a7cc5dcadb98/828fb/me.jpg" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Me, among the peaks of Shizuoka, Japan."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_0000_tranhuunhathuy/</guid><pubDate>Sun, 11 Sep 2022 23:00:00 GMT</pubDate></item><item><title>Google Summer of Code 2022 —  Building, Testing, and Wrapping Helioviewer API in a Python package</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;Google Summer of Code 2022 — Building, Testing, and Wrapping Helioviewer API in a Python package&lt;/h4&gt;&lt;p&gt;Hello everyone! This summer my project proposal to &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt; got accepted. I recently posted a series of blogs sharing my GSoC experience and the work I have done. This blog post details my experience of participating in the program and the contributions that I made to the Project-Helioviewer. If you haven’t read my previous blog posts, no worries, I will try to sum up all of them in this blog.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jwdds34BjOqlPnJUYjKWdw.gif"&gt;&lt;/figure&gt;&lt;h4&gt;Starting Point&lt;/h4&gt;&lt;p&gt;I started contributing to open-source projects in September 2021, my friend &lt;a href="https://medium.com/u/831b54c52c2"&gt;Vivek Agrawal&lt;/a&gt; told me about the Google Summer of Code program, and since then I had an eye for GSoC 2022. I did all the research and through the timeline, I knew that on the 7th of March Google will release the list of accepted organizations participating as mentors in 2022, I continued building my developer skills.&lt;/p&gt;
&lt;p&gt;On March 7th, I searched for organizations that matched my interest, i.e, science. When I saw &lt;a href="https://summerofcode.withgoogle.com/programs/2022/organizations/openastronomy"&gt;&lt;strong&gt;openAstronomy&lt;/strong&gt;&lt;/a&gt; at that moment I was like: &lt;em&gt;what the heck&lt;/em&gt;? &lt;em&gt;astronomy and open source together? &lt;/em&gt;👾👾👾&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I set my goal, focused only on one project and started to understand the project idea. I joined the mailing list and connected with the project mentors and talked to them about my implementation ideas. While I prepared the proposal, I also made the following contributions to &lt;a href="http://sunpy.org"&gt;SunPy&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5980"&gt;#&lt;strong&gt;5980&lt;/strong&gt;&lt;/a&gt; (code) and &lt;a href="https://github.com/sunpy/sunpy/pull/6024"&gt;#&lt;strong&gt;6024&lt;/strong&gt;&lt;/a&gt; (updating docs), I wrote a test case for &lt;a href="https://docs.sunpy.org/en/stable/code_ref/timeseries.html"&gt;SunPy.timeseries&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5961"&gt;#&lt;strong&gt;5961&lt;/strong&gt;&lt;/a&gt; adds an example to show “how to reproject a map to a map projection with a custom origin”.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the one month before the results, to learn more about software testing and get familiar with &lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;, I searched for issues labeled “Tests” in SunPy and &lt;a href="https://github.com/sunpy/sunpy/pull/6110"&gt;submitted this pull request&lt;/a&gt;🚀.&lt;/p&gt;
&lt;h5&gt;The Community Bonding Period&lt;/h5&gt;&lt;p&gt;After getting selected for the program, I continued my contribution to SunPy. I worked on a python script that updates vendor code automatically in this &lt;a href="https://github.com/sunpy/sunpy/pull/6127"&gt;pull request&lt;/a&gt;. In a meeting, I met my mentor &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;and we discussed the project plan.&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;&lt;p&gt;In this program, I wrapped the Helioviewer API in a Python package. The development of this project is supported by the &lt;a href="https://summerofcode.withgoogle.com/"&gt;2022 Google Summer of Code&lt;/a&gt;, the umbrella &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://sunpy.org/"&gt;&lt;strong&gt;SunPy&lt;/strong&gt; &lt;strong&gt;Project&lt;/strong&gt;&lt;/a&gt;, and the &lt;a href="https://github.com/Helioviewer-Project/"&gt;&lt;strong&gt;Helioviewer Project&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;HvPy&lt;/h5&gt;&lt;p&gt;&lt;a href="http://helioviewer.org/"&gt;&lt;em&gt;Helioviewer.org&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is part of the &lt;/em&gt;&lt;a href="https://github.com/helioviewer-project"&gt;&lt;em&gt;Helioviewer Project&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, an open-source project for the visualization of solar and heliospheric data. The Helioviewer Project is funded by &lt;/em&gt;&lt;a href="https://www.esa.int/"&gt;&lt;em&gt;ESA&lt;/em&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href="https://www.nasa.gov/"&gt;&lt;em&gt;NASA&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HvPy is a python interface for interacting with Helioviewer’s Web API. This means all API calls are done by sending an HTTP request and parsing the response. Since this action is common for all API requests, it is encapsulated by the API core in HvPy. Certain parameters are provided to the core via an instance of HvpyParameters. This instance contains all information necessary to perform the API request. It contains the target URL, the input parameters, and the expected output type. Using this information, the HTTP Requester will be able to perform the request and coerce the result into the desired type.&lt;/p&gt;
&lt;h5&gt;Request Workflow&lt;/h5&gt;&lt;p&gt;Each request takes a set of Input Parameters. The metadata defined in the HvpyParameters class is needed for an API request. It contains the InputParameters , expected OutputType and the API URL for the request. Using this information, the module core performs the HTTP request and parses the result into the expected type.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/257/1*4Np77RI0N9F3_kj21zCfxg.png"&gt;&lt;figcaption&gt;Request workflow diagram&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5&gt;Front-end&lt;/h5&gt;&lt;p&gt;Much of the design mentioned above is for internal use when adding new API endpoints or modifying the internal behavior of this module. The internal design allows for ease of adding new APIs, validating input parameters, and keeping the code DRY.&lt;/p&gt;
&lt;p&gt;The actual front end that users will interface with lives in facade.py as it is the façade that hides this internal design. This module contains the API interface in its simplest form. It is responsible for taking user input, constructing the HvpyParameters instance, and passing it along to the core to perform the request.&lt;/p&gt;
&lt;h5&gt;Utils&lt;/h5&gt;&lt;p&gt;We got clean and simple front-end functions for every endpoint. For some endpoint to make a query you need to design a string called LayerString and EventString which looks like: —&lt;/p&gt;
&lt;pre&gt;layers = "[9,1,100],[19,1,50]"&lt;br&gt;events = "[AR,all,1],[CD,all,1]"&lt;/pre&gt;&lt;p&gt;Right, it is difficult to write this string for a beginner. So to save users from this difficult process we have these utility functions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Creating the layer string&lt;br&gt; — This function takes a list of tuples of the form (Source id, Opacity). We defined an Enum for the users to get the source id of the required data source. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.datasource.DataSource.html#hvpy.datasource.DataSource"&gt;Visit here to see all the possible Data Sources supported by Helioviewer.&lt;/a&gt; Let's see how we create a layer string for &lt;a href="https://www.nasa.gov/content/goddard/sdo-aia-131-angstrom/#:~:text=AIA%20131%20%C3%85%20%2D%20Solar%20Region,are%20typically%20colorized%20in%20teal."&gt;AIA_131&lt;/a&gt; with 100% opacity along with an &lt;a href="https://www.nasa.gov/content/goddard/sdo-hmi-magnetogram/"&gt;HMI Magnetogram&lt;/a&gt; with 50% opacity.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import DataSource, create_layers&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_layers([(DataSource.AIA_131, 100), (DataSource.HMI_MAG, 50)])&lt;br&gt;‘[9,1,100],[19,1,50]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Creating the events string&lt;br&gt; — This function takes a list of tuples of the form (event type, recognition methods). We defined an Enum for the users to get event types. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.EventType.html#hvpy.EventType"&gt;Here is a list of all the supported Event Types by Helioviewer.&lt;/a&gt; To generate an event string for Active Region and Coronal Dimming we do: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import EventType, create_events&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_events([EventType.ACTIVE_REGION,&lt;br&gt;EventType.CORONAL_DIMMING])&lt;br&gt;‘[AR,all,1],[CD,all,1]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Saving the file&lt;br&gt; — Some endpoint in response returns binary data. It may be JPEG, JPEG2000, mp4, PNG, etc. To write these binary data in your harddisk we have a helper function called save_file. This function takes in the following arguments: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;save_file(data: bytearray, filename: Union[Path, str], overwrite: bool = False)&lt;/pre&gt;&lt;p&gt;The overwrite flag will overwrite the existing file with the same name and Path.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Helpers&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;To create a movie (mp4, WebM, Flv) we need to query the queueMovie endpoint and then use source id of the response to download the movie using the downloadMovie endpoint. To automate this process we have a helper function called createMovie.&lt;/p&gt;
&lt;p&gt;Here is the function in use: —&lt;/p&gt;
&lt;a href="https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href"&gt;https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href&lt;/a&gt;&lt;p&gt;And this is the result 👇&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1bTtoBnWSlxK_RS06ZReE1G6tBfGdanLu/view?usp=sharing"&gt;2022-9-1_2022-9-5.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Week 10&lt;/h5&gt;&lt;p&gt;In week 9 we decided to use the beta URL for query and by the end of the week, it is ready for testing (for more details &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;read my week 7–9 blog post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So the next task was to implement the remaining endpoint backends and bring them to the façade. I opened the following PRs for the remaining endpoints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/57"&gt;&lt;strong&gt;#57 &lt;/strong&gt;&lt;/a&gt;— downloadMovie (this takes in a movie IDand returns binary data).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/58"&gt;&lt;strong&gt;#58&lt;/strong&gt;&lt;/a&gt; — shortenURL (shorten a Helioviewer.org URL with the bit.ly URL shortening web service) and getNewsFeed (get the XML RSS feed of the official Helioviewer Project Blog).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/59"&gt;&lt;strong&gt;#59&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;— getTile (requests a single image tile to be used in the Helioviewer.org Viewport. Tiles are 512x512 pixel PNG images, generated for a given image scale from the intermediary JPEG2000 image files).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Yay!! the last endpoint got merged.&lt;/p&gt;
&lt;p&gt;There is a huge &lt;a href="https://api.helioviewer.org/docs/v2/appendix/data_sources.html"&gt;list of &lt;strong&gt;data sources&lt;/strong&gt;&lt;/a&gt; to capture the sun image, for example, SDO, SOHO, Hinode, etc. We use these data source IDs to query the server. So to keep the process user-friendly we decided to store all the IDs in a Enum. This way one needs to remember the data source ID.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/61"&gt;&lt;strong&gt;#61&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for the DataSource.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 11&lt;/h5&gt;&lt;p&gt;After we have the DataSource Enum, I implemented the create_layers function that we talked about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/65"&gt;&lt;strong&gt;#65&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to generate the layer string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also have a list of &lt;a href="https://www.lmsal.com/hek/api.html"&gt;feature/event types&lt;/a&gt;, for example, Active region, Bright point, Flare, etc. Each event types have a Feature code. We did the same with Event Types as we did with the data sources. We decided to store all the feature code in a Enum.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/70"&gt;&lt;strong&gt;#70&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for EventTypes.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 12&lt;/h5&gt;&lt;p&gt;Now we got the Enum for EventType, I implemented the create_event function to automate the creation of an event string for the query.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/71"&gt;&lt;strong&gt;#71&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;create_event function to create event string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After this, I implemented the save_file function which we talk about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/72"&gt;&lt;strong&gt;#72&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to save the binary response.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 13&lt;/h5&gt;&lt;p&gt;Everything is done, now I implemented the createMovie function for the users to automate the &lt;a href="https://github.com/Helioviewer-Project/python-api/issues/63"&gt;lengthy process&lt;/a&gt; of creating a movie.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/73"&gt;&lt;strong&gt;#73&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;The&lt;strong&gt; &lt;/strong&gt;createMovie function.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After PR #73 got merged, we had the first release on &lt;a href="https://pypi.org/project/hvpy/"&gt;PyPI&lt;/a&gt;. 🎉&lt;/p&gt;
&lt;p&gt;Now, you can install it and make a movie yourself 😉&lt;/p&gt;
&lt;blockquote&gt;~ pip install hvpy&lt;/blockquote&gt;&lt;p&gt;I hope this project will help researchers within the field of solar physics and helioviewer.org users to carry out their tasks easily and effectively.&lt;/p&gt;
&lt;h5&gt;Reference to the previous blog posts and other resources&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Blog post 1,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/starting-my-summer-with-sunpy-76728e3e0b66"&gt;&lt;strong&gt;Starting my summer with SunP&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;y — &lt;/strong&gt;&lt;br&gt;How I got selected in GSoC and my work experience of week 1 and week 2.&lt;/li&gt;&lt;li&gt;Blog post 2, &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-facade-for-the-api-wrapper-69689b163879"&gt;&lt;strong&gt;Facade for the API wrapper&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 3 to week 6.&lt;/li&gt;&lt;li&gt;Blog post 3,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;&lt;strong&gt;Moving close to the First Release&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 7 to week 9.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api"&gt;Contribute to hvpy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://hvpy.readthedocs.io/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Closing Thoughts&lt;/h4&gt;&lt;p&gt;First of all, I would like to thank with all my heart &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt; for their amazing guidance throughout the program. Without their guidance and ideas, I would have not been able to implement this project.&lt;/p&gt;
&lt;p&gt;These three months of work with Project-Helioviewer have made me a very confident backend developer. I learned a lot of new things about programming and learned about my mistakes. I learned how we design a project and execute the project plan.&lt;/p&gt;
&lt;p&gt;I enjoyed every moment of this program.&lt;/p&gt;
&lt;p&gt;Thank you SunPy and The Helioviewer Project ❤&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f51ba6566f71" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</guid><pubDate>Thu, 08 Sep 2022 04:20:16 GMT</pubDate></item><item><title>Week 12 - Final implementation into RADIS, along with a plethora of illustrative examples.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220905_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;h4&gt;1. Implementation of modules into RADIS&lt;/h4&gt;
&lt;p&gt;Finally, after being approved by Mr. Erwan, I can implement all of my modules, developed separately in my repo &lt;a href="https://github.com/TranHuuNhatHuy/RADIS-Spectrum-Fitting-Benchmark"&gt;RADIS-Spectrum-Fitting-Benchmark&lt;/a&gt;, into RADIS codebase. The implementation features &lt;a href="https://github.com/radis/radis/blob/develop/radis/tools/new_fitting.py"&gt;&lt;code class="language-text"&gt;new_fitting.py&lt;/code&gt;&lt;/a&gt;, the new fitting module that stores all the fitting functions and associated models, whose performance confirmed after a bunch of user-testing cases.&lt;/p&gt;
&lt;h4&gt;2. Accompanied illustrative examples&lt;/h4&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;They are gallery examples that are added into &lt;code class="language-text"&gt;radis/examples&lt;/code&gt;, serving as illustrative scripts for my new fitting module:&lt;/p&gt;
&lt;h5&gt;(i) &lt;code class="language-text"&gt;plot_newfitting_Tgas.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The most basic example of how to use new fitting module, including the formats and so on.&lt;/p&gt;
&lt;h5&gt;(ii) &lt;code class="language-text"&gt;plot_newfitting_Trot-Tvib-molfrac.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The real-life fitting case provided by Mr. Corentin, featuring non-LTE CO spectrum in which we will fit &lt;code class="language-text"&gt;Trot&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib&lt;/code&gt; and &lt;code class="language-text"&gt;mole_fraction&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;(iii) &lt;code class="language-text"&gt;plot_newfitting_Tgas-molfrac.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Mr. Minou’s user-testing case of CO absorbance spectrum near 2011 cm-1. This case features spectrum extraction from a &lt;code class="language-text"&gt;.mat&lt;/code&gt; MATLAB file. Originally, this file was 1.2 MB, quite large to be added to RADIS. Thus, I removed all fields unnecessary for spectrum generation, and now it only has around 400 kB left.&lt;/p&gt;
&lt;h5&gt;(iv) &lt;code class="language-text"&gt;plot_newfitting_comparison_oldnew.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Performance comparison example between &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html#sphx-glr-auto-examples-plot-1t-fit-py"&gt;current 1-temperature fitting&lt;/a&gt; and my new fitting module, under exactly the same ground-truths and settings. The benchmark result shows that, under exactly the same conditions, the new best fitted value differ 0.45% from the old one (1464.1 K from the old 1457.5 K). New fitting module requires half as many iterations as the old one and hence faster, with much smaller residual. In detail:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-text"&gt;&lt;code class="language-text"&gt;====================  PERFORMANCE COMPARISON BETWEEN 2 FITTING METHODS  ====================

1. LAST RESIDUAL

- Old 1T fitting example:       0.002730027027336094
- New fitting module:           0.0005174179496843629

2. NUMBER OF FITTING LOOPS

- Old 1T fitting example:       32 loops
- New fitting module:           16 loops

3. TOTAL TIME TAKEN (s)

- Old 1T fitting example:       4.881942987442017 s
- New fitting module:           2.7344970703125 s

==========================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’m not sure this superiority will persist in all cases, but even so, I believe the value of my module still lies in its practical and easy to use/apply.&lt;/p&gt;
&lt;h5&gt;(v) &lt;code class="language-text"&gt;plot_newfitting_comparison_methods.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;A benchmarking example which compares performance between different &lt;a href="https://lmfit.github.io/lmfit-py/fitting.html#choosing-different-fitting-methods"&gt;LMFIT fitting algorithms&lt;/a&gt;. It measures their last residual (for accuracy evaluation) and number of iterations (for robustness evaluation). The benchmark result shows that, under exactly the same conditions, &lt;code class="language-text"&gt;leastsq&lt;/code&gt; and &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; work best, with &lt;code class="language-text"&gt;leastsq&lt;/code&gt; good at accuracy, while &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; good at speed (and theoretically, memory requirement). Thus, I set &lt;code class="language-text"&gt;leastsq&lt;/code&gt; as default method for the module, but also encourage users to switch to &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; in case things turn sour.&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-text"&gt;&lt;code class="language-text"&gt;======================== BENCHMARKING RESULT ========================

||           METHOD          ||          RESIDUAL         || LOOPS ||
||---------------------------||---------------------------||-------||
|| leastsq                   || 1.4739494411950239e-07    || 24    ||
|| least_squares             || 1.2170348021620847e-05    || 1     ||
|| differential_evolution    || 1.4739855740762716e-07    || 151   ||
|| brute                     || 1.2287258962300115e-06    || 20    ||
|| basinhopping              || 7.930954059631543e-06     || 151   ||
|| ampgo                     || 4.105104127826488e-07     || 151   ||
|| nelder                    || 1.4739942144030064e-07    || 30    ||
|| lbfgsb                    || 1.4739494411955646e-07    || 28    ||
|| powell                    || 1.473949441200994e-07     || 43    ||
|| cg                        || 1.4776331905574135e-07    || 30    ||
|| cobyla                    || 1.1524288718226295e-05    || 21    ||
|| bfgs                      || 1.4776331905574135e-07    || 30    ||
|| tnc                       || 1.4740393115424221e-07    || 28    ||
|| trust-constr              || 1.4739494411948182e-07    || 26    ||
|| slsqp                     || 1.2170348021620847e-05    || 2     ||
|| shgo                      || 1.0507694502308952e-05    || 5     ||
|| dual_annealing            || 1.5455930218501237e-05    || 151   ||
||---------------------------||---------------------------||-------||&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/dc95cb63a4457b8bb0d3d58fca7b8bbe/2bf90/method_compare_result.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Method benchmarking result." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/dc95cb63a4457b8bb0d3d58fca7b8bbe/f058b/method_compare_result.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Method benchmarking result."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220905_0000_tranhuunhathuy/</guid><pubDate>Sun, 04 Sep 2022 23:00:00 GMT</pubDate></item><item><title>Final Blog</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220903_0000_arunavabasu-03/</link><dc:creator>arunavabasu-03</dc:creator><description>&lt;p&gt;Final Evaluation In this phase , i am preety much focusing to add the test files for frontend and backend and also setup the pipeline to run…&lt;/p&gt;
&lt;div style="margin-top: 50px; font-style: italic;"&gt;&lt;strong&gt;&lt;a href="https://gsoc.arunavabasu.com/12/"&gt;Keep reading&lt;/a&gt;.&lt;/strong&gt;&lt;/div&gt;&lt;br&gt; &lt;br&gt;
&lt;!-- TEASER_END --&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220903_0000_arunavabasu-03/</guid><pubDate>Fri, 02 Sep 2022 23:00:00 GMT</pubDate></item><item><title>week 11 and week 12</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220903_0000_supriya1702/</link><dc:creator>Supriya1702</dc:creator><description>&lt;p&gt;Now since fetching of extra columns which includes broadening coeffcients was completed I had to pull the the fetch_hitran_update changes…&lt;/p&gt;
&lt;div style="margin-top: 50px; font-style: italic;"&gt;&lt;strong&gt;&lt;a href="https://minimal-blog.lekoarts.de/week-11-and-week-12"&gt;Keep reading&lt;/a&gt;.&lt;/strong&gt;&lt;/div&gt;&lt;br&gt; &lt;br&gt;
&lt;!-- TEASER_END --&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220903_0000_supriya1702/</guid><pubDate>Fri, 02 Sep 2022 23:00:00 GMT</pubDate></item><item><title>Moving On</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1322_sagarchotalia/</link><dc:creator>sagarchotalia</dc:creator><description>&lt;p&gt;Chapter 4: Weeks 5 and 6 I had scratched my head in every way possible. However, I was no closer to actually debugging the error, which perplexed me. I searched every relevant function, every relevant block of code, understood how each and every parameter was being calculated, and made a mental map of how functions were being accessed and in which order. I was still stuck. And so, I decided to just scrap my current implementation, and started over.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1322_sagarchotalia/</guid><pubDate>Thu, 01 Sep 2022 12:22:10 GMT</pubDate></item><item><title>Making headway.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1321_sagarchotalia/</link><dc:creator>sagarchotalia</dc:creator><description>&lt;p&gt;In week 3, I began testing my implementation of the chunksize feature. I found that there was an error being raised in the plotting of graphs, due to a library called publib being used. Upon searching for this library, I was amazed to see that it was built by Dr. Erwan! You can have a look at it here
I initially thought nothing of the error, and was convinced that my implementation was correct.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1321_sagarchotalia/</guid><pubDate>Thu, 01 Sep 2022 12:21:34 GMT</pubDate></item><item><title>Officially Started. Unofficially...not so much.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1320_sagarchotalia/</link><dc:creator>sagarchotalia</dc:creator><description>&lt;p&gt;Let the Coding Begin! Chapter 2: Weeks 1 and 2 Dr. Erwan let us know about the community’s plan to conduct our projects in teams of two, based on our projects’ similarities.
Thus a team between Arunava Basu and I, and a team between Tran Huu Nhat Huy and Supriya Kumari was formed.
Unfortunately, I fell sick midway through week 1. I tried to tackle smaller issues, but couldn’t focus at all.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220901_1320_sagarchotalia/</guid><pubDate>Thu, 01 Sep 2022 12:20:49 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about gsoc2021)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/cat_gsoc2021.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 26 Jun 2025 02:03:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Chapter 5: Birds of a Feather</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_1424_anandxkumar/</link><dc:creator>anandxkumar</dc:creator><description>&lt;p align="center"&gt;
&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://anandkumar-blog.netlify.app/static/91ec1b99c3601cea5ada6089b36f443e/63868/Radis.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;!-- TEASER_END --&gt;
&lt;span class="gatsby-resp-image-background-image" style="padding-bottom: 100%; display: block;"&gt;&lt;/span&gt;
&lt;img alt="Radis.png" class="gatsby-resp-image-image" src="https://anandkumar-blog.netlify.app/static/91ec1b99c3601cea5ada6089b36f443e/63868/Radis.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Radis.png"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;So &lt;code class="language-text"&gt;GSoC 2021&lt;/code&gt; has officially ended and I can say without a doubt that what a journey it was. I recently concluded with my GSoC project, the final PR got merged and I’m quite satisfied with the outcome. &lt;/p&gt;
&lt;p&gt;Earlier we were able to find the time complexity of &lt;strong&gt;LBL&amp;gt;Voigt&lt;/strong&gt;, &lt;strong&gt;DIT&amp;gt;Voigt&lt;/strong&gt; and &lt;strong&gt;DIT&amp;gt;FFT&lt;/strong&gt; (Formely known as LDM&amp;gt;FFT). On a small test replacing &lt;code class="language-text"&gt;np.convolve&lt;/code&gt; with &lt;code class="language-text"&gt;scipy.signal.oaconvolve&lt;/code&gt;, we were able to achieve 2 to 30 times performance boost. So we re-ran the benchmarks and were able to confirm this fact.
You can see the result at &lt;a href="https://anandxkumar.github.io/Benchmark_Visualization_GSoC_2021/"&gt;Benchmark Visualization GSoC 2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above results proved that &lt;code class="language-text"&gt;DIT&amp;gt;Voigt&lt;/code&gt; performs better than &lt;code class="language-text"&gt;DIT&amp;gt;FFT&lt;/code&gt; in almost every case. So we decided to use &lt;code class="language-text"&gt;DIT&amp;gt;Voigt&lt;/code&gt; as the default setting in &lt;code class="language-text"&gt;Radis&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;predict_time()&lt;/strong&gt; function was added, which computes the predicted time for &lt;strong&gt;LBL&amp;gt;Voigt&lt;/strong&gt;, &lt;strong&gt;DIT&amp;gt;Voigt&lt;/strong&gt; and &lt;strong&gt;DIT&amp;gt;FFT&lt;/strong&gt; using the derived time complexity, and on &lt;code class="language-text"&gt;verbose&amp;gt;=2&lt;/code&gt; shows the user the predicted time.&lt;/p&gt;
&lt;p&gt;Also we Bifurcated &lt;code class="language-text"&gt;broadening_max_width&lt;/code&gt; into 2 parameters:&lt;br&gt;
•  &lt;strong&gt;Truncation:&lt;/strong&gt; Used in truncation of Voigt method.&lt;br&gt;
•  &lt;strong&gt;neighbour_lines:&lt;/strong&gt; Increases Spectral range&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So now users have a lot of flexibility. Based on Physics, the default value of &lt;strong&gt;truncation&lt;/strong&gt; is set to &lt;strong&gt;50cm-1&lt;/strong&gt; and the default value of &lt;strong&gt;neighbour_lines&lt;/strong&gt; is set to &lt;strong&gt;0 cm-1&lt;/strong&gt;. Apart from this, some minor improvements were done in the &lt;code class="language-text"&gt;Profiler class&lt;/code&gt; such as an improved algorithm is used to store data and now calculation time gets appended to the same key rather than overwriting it, which useful when we use &lt;code class="language-text"&gt;chunksize&lt;/code&gt; or DIT optimization for &lt;code class="language-text"&gt;Non_equilibrium&lt;/code&gt; conditions. &lt;/p&gt;
&lt;p&gt;So overall the code has been optimized and a user can expect a performance boost upto &lt;strong&gt;40x&lt;/strong&gt; in worst scenarios. &lt;/p&gt;
&lt;p&gt;You can find all my work during the GSoC period &lt;a href="https://github.com/radis/radis/projects/5"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was a great experience contributing to &lt;strong&gt;Radis&lt;/strong&gt; and I definitely have learned alot along the way. And a big thanks to the great mentors at Radis especially &lt;a href="https://github.com/erwanp"&gt;Erwan Pannier&lt;/a&gt; who guided me at every stage of the program. The road doesn’t end here as I will stick around the organisation and will always find ways to contribute to Radis. One last thanks to &lt;strong&gt;GSoC&lt;/strong&gt; for providing such a wonderful opportunity.&lt;/p&gt;
&lt;p align="center"&gt;
Till we meet again, keep &lt;b&gt;Swinging for the fences.&lt;/b&gt;
&lt;br&gt;
&lt;img alt="/08e70d471ee717d1624f04f21c586cd4/spidermanMM_traversal.gif" src="https://anandkumar-blog.netlify.app/08e70d471ee717d1624f04f21c586cd4/spidermanMM_traversal.gif" width="500"&gt;&lt;br&gt;
&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_1424_anandxkumar/</guid><pubDate>Mon, 23 Aug 2021 13:24:32 GMT</pubDate></item><item><title>Google Summer of Code- Final Evaluation</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_1027_rashmiraj137/</link><dc:creator>Raj Rashmi</dc:creator><description>&lt;h4&gt;&lt;strong&gt;Topic: Implement JAX based automatic differentiation to Stingray&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;The project involved the study of modern statistical modelling to augment the accuracy, speed, and robustness of the likelihood function, into a software package called Stingray. This report demonstrates the experiment done for a combination of different optimizers to fit the scipy.optimize function. Another emphasis is to investigate the gradient calculation using JAX and compare it with scipy.optimize.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Introduction:&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;The proposed milestone was to investigate the room for improvement to enhance the overall performance of modelling to Stingray, using JAX. However, the current stage of the model is still a sandbox model. Stingray is astrophysical spectral timing software, a library in python built to perform time series analysis and related tasks on astronomical light curves. JAX is a python library designed for high-performance numerical computing. Its API for numerical functions is based on NumPy, a collection of functions used in scientific computing. Both Python and NumPy are widely used and familiar, making JAX simple, flexible, and easy to adopt. It can differentiate through a large subset of python’s features, including loops, ifs, recursion, and closures, and it can even take derivatives of derivatives. Such modern differentiation packages deploy a broad range of computational techniques to improve applicability, run time, and memory management.&lt;/p&gt;
&lt;p&gt;JAX utilizes the grad function transformation to convert a function into a function that returns the original function’s gradient, just like Autograd. Beyond that, JAX offers a function transformation jit for just-in-time compilation of existing functions and vmap and pmap for vectorization and parallelization, respectively.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4&gt;Experiment:&lt;/h4&gt;&lt;p&gt;The powerlaw and lorentzian function are the most used to describe periodograms in astronomy. In practice, we use the sum of these components to design a realistic model. For the analysis here we consider a quasi-periodic oscillation and a constant and try to fail the algorithm by, (i) reduce the amplitude, (ii) start the optimization process with parameters very far away from the true parameters, (iii) try different optimizers to experiment on different sensitive aspect of the current likelihood calculation. The current ongoing milestone is to try alternatives of scipy.optimize but this requires series of tests for the same.&lt;/p&gt;
&lt;p&gt;The above tests can be visualized in the notebook added on Github: &lt;a href="https://github.com/rashmiraj137/GSoC-Project"&gt;https://github.com/rashmiraj137/GSoC-Project&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Results:&lt;/h4&gt;&lt;p&gt;During the experiment, it was observed that the algorithm is sensitive to input parameters i.e., it fails for couple of combinations like when the amplitude is set far away from true value, precisely blow absolute value of 1. In general, if we set the parameters very far away from the true value, it fails to approximate the likelihood function. In the notebook (&lt;a href="https://github.com/rashmiraj137/GSoC-Project/blob/main/GSoC_Evaluation%20Notebook.ipynb"&gt;link&lt;/a&gt;), we demonstrate the room for improvement in the current algorithm by choosing a different set of parameters. The current data fit for the evaluation of likelihood happens using scipy.optimize.minimize function. However, there exists numerous ways to do this. SciPy optimize provides functions for minimizing (or maximizing) objective functions, possibly subject to constraints. It includes solvers for nonlinear problems (with support for both local and global optimization algorithms), linear programming, constrained and nonlinear least-squares, root finding, and curve fitting. The problem with the current minimization algorithm is that it converges at local minimum instead of global, i.e. it is not very robust. Recently, Machine Learning has evident development in such optimization tools. The strategy was to find alternatives that potentially accelerate the code, makes it robust.&lt;/p&gt;
&lt;p&gt;For this experiment case, we choose a couple of optimizers and compare the robustness to Powell (the current optimizer used). So we visualize the fit for couple of optimizers like :&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-neldermead.html"&gt;minimize(method=’Nelder-Mead’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-powell.html"&gt;minimize(method=’Powell’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-cg.html"&gt;minimize(method=’CG’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-bfgs.html"&gt;minimize(method=’BFGS’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-newtoncg.html"&gt;minimize(method=’Newton-CG’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html"&gt;minimize(method=’L-BFGS-B’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-tnc.html"&gt;minimize(method=’TNC’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-cobyla.html"&gt;minimize(method=’COBYLA’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.minimize-slsqp.html"&gt;minimize(method=’SLSQP’)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;minimize(method = “trust-constr”)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This notebook (&lt;a href="https://github.com/rashmiraj137/GSoC-Project/blob/main/GSoC_Evaluation%20Notebook.ipynb"&gt;link&lt;/a&gt;) has results using each method and it was observed that Nelder-Mead is more robust as compared to other optimizers. Another optimizer like dogleg, trust-ncg, might be good as well, but the jacobian and hess need to be calculated for them.&lt;/p&gt;
&lt;h4&gt;Future Work:&lt;/h4&gt;&lt;p&gt;JAX has now its own version of scipy.optimize.minimize but it has couple of bugs and is not as robust as scipy.optimize.minimize. Finding an alternative for scipy.optimize.minimize such that it doesn’t fails even if the start parameters are far away from the true parameters was a goal for this project but unfortunately JAX did not assist that well enough. But there might be a superior algorithm to scipy.optimize.minimize that can be useful.&lt;/p&gt;
&lt;h4&gt;Repositories:&lt;/h4&gt;&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/stingray"&gt;https://github.com/StingraySoftware/stingray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/notebooks"&gt;GitHub - StingraySoftware/notebooks: Tutorial notebooks for Stingray&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Blog Post:&lt;/h4&gt;&lt;p&gt;1. &lt;a href="https://raj-rashmi741.medium.com/jax-based-automatic-differentiation-introduction-of-modern-statistical-modeling-to-stingray-1bc26da7571f"&gt;JAX-based automatic differentiation: Introduction of modern statistical modeling to Stingray.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. Insight of Implementation of JAX to stingray- GSoC coding period!&lt;/p&gt;
&lt;p&gt;3. &lt;a href="https://raj-rashmi741.medium.com/gsoc-update-2d16a70cc267?source=your_stories_page-------------------------------------"&gt;GSoC update!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://raj-rashmi741.medium.com/time-to-review-my-gsoc-project-c34297f2dc81"&gt;4. Time to review my GSoC Project.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Profiles:&lt;/h4&gt;&lt;p&gt;GitHub: &lt;a href="https://github.com/rashmiraj137"&gt;https://github.com/rashmiraj137&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LinkedIn: &lt;a href="https://www.linkedin.com/in/rashmi-raj-4b8a2b106/"&gt;https://www.linkedin.com/in/rashmi-raj-4b8a2b106/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Medium: &lt;a href="https://raj-rashmi741.medium.com/"&gt;https://raj-rashmi741.medium.com/&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=578c0088bcbd" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_1027_rashmiraj137/</guid><pubDate>Mon, 23 Aug 2021 09:27:57 GMT</pubDate></item><item><title>GSoC - 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_0300_gagan-aryan/</link><dc:creator>Gagan Aryan</dc:creator><description>&lt;p&gt;&lt;img alt="Radis" src="https://gagan-aryan.netlify.app/images/gsoc-4/Radis.png"&gt;&lt;/p&gt;
&lt;p&gt;Today is the last day of GSoC-21. The entire journey was a rollercoaster ride and I learnt a lot of new things along the way. I started out with hardly knowing any of the shortcomings of pandas and as we dug in, I was surprised to see so many loopholes it contains. This will be the final blogpost of my gsoc journey and I hope you like it.&lt;/p&gt;
&lt;h3 id="pandas-and-vaex"&gt;Pandas and Vaex&lt;/h3&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4 id="why-do-people-use-pandas-"&gt;Why do people use Pandas ?&lt;/h4&gt;
&lt;p&gt;Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays.&lt;/p&gt;
&lt;p&gt;Pandas makes it simple to do many of the time consuming, repetitive tasks associated with working with data, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data visualization&lt;/li&gt;
&lt;li&gt;Statistical analysis&lt;/li&gt;
&lt;li&gt;Data inspection&lt;/li&gt;
&lt;li&gt;Loading and saving data&lt;/li&gt;
&lt;li&gt;Data cleansing&lt;/li&gt;
&lt;li&gt;Data fill&lt;/li&gt;
&lt;li&gt;Data normalization&lt;/li&gt;
&lt;li&gt;Merges and joins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of the time I this blog was written pandas is arguably the most popular dataframe library that data scientists use. While pandas works smoothly while dealing with smaller data, it becomes very slow and inefficient when there are huge datasets.&lt;/p&gt;
&lt;h4 id="why-use-vaex-"&gt;Why use Vaex ?&lt;/h4&gt;
&lt;p&gt;Vaex is a python library that is closely similar to Pandas. Vaex is a library especially for lazy Out-of-Core DataFrames, helps to visualize and explore big tabular datasets. It is a high performance library and can solve many of the shortcomings of pandas. As the API is similar to pandas, users do not face difficulty in shifting.&lt;/p&gt;
&lt;p&gt;Vaex is capable to calculate statistics such as mean, standard deviation etc, on an N-dimensional grid up to a billion (109109) objects/rows per second.&lt;/p&gt;
&lt;h3 id="pandas-or-vaex-"&gt;Pandas or Vaex ?&lt;/h3&gt;
&lt;p&gt;Here at Radis the underlying algorithm was not able to perform to its maximum capacity due to usage of pandas which consumes way too much of memory. So we tried to see how vaex can help improve the performance.&lt;/p&gt;
&lt;p&gt;Below we are using &lt;a href="https://hitran.org/hitemp/"&gt;HITEMP-N2O Database&lt;/a&gt; for all checking the performance. It is to be noted that there is a difference between the pytables that pandas use and vaex friendly HDF5. The former is row-based whereas vaex friendly HDF5 files are column based.&lt;/p&gt;
&lt;h4 id="loading-time"&gt;Loading time&lt;/h4&gt;
&lt;p&gt;In the code below we -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;load the the vaex HFD5 file and then convert it to pandas dataframe&lt;/li&gt;
&lt;li&gt;directly load the pandas hdf5 file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code class="language-python"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vaex&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vaex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.hdf5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_pandas_df&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;7.833287477493286&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_hdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.h5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;28.142656087875366&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Clearly the first appraoch is almost 4 times faster than the second one.&lt;/p&gt;
&lt;h4 id="load-specific-columns"&gt;Load specific columns&lt;/h4&gt;
&lt;p&gt;As already stated, vaex hdf5 files are column based so loading only specific columns from vaex hdf5 file should be able give much better results than loading only specific columns in pandas. Lets check this and see the time taken to do both of these -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code class="language-python"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vaex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.hdf5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_pandas_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"iso"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"El"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.1795198917388916&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_hdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.h5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"iso"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"El"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;22.85481858253479&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In comparison, loading 4 out of 19 columns is about 70% as slow with Pandas.&lt;/p&gt;
&lt;h4 id="load-specific-rows"&gt;Load specific rows&lt;/h4&gt;
&lt;p&gt;To be fair to the pytables let’s try to load specific rows and check if pandas can now provide better performance with its row indexed HDF5s.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre class="chroma"&gt;&lt;code class="language-python"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_hdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.h5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"iso==1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;30.680099725723267&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vaex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~/.radisdb/N2O-04_HITEMP2019.hdf5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iso&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df_pandas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_pandas_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;7.043155670166016&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Even in this case vaex provides better performance. So the idea was to harness this memory efficiency of vaex for all the I/O operations on the dataset in Radis. In order to do this I have written down a HDF5 writer that fetches &lt;code&gt;bz2&lt;/code&gt; file and parses it into a column-major HDF5. The complete code to the HDF5 writer can be found &lt;a href="https://gist.github.com/gagan-aryan/8ed5ba1f69074bbc72d081c31d43fcbd"&gt;in this gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is it for GSoC21 from my side. Even though the second phase of my project got affected due to schools, I had an exciting summer as a whole. I am looking forward to be in touch with Radis and will try to contribute to it whenever I get a chance.&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210823_0300_gagan-aryan/</guid><pubDate>Mon, 23 Aug 2021 02:00:06 GMT</pubDate></item><item><title>Google Summer of Code Work Product Submission</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;This blog post is a consolidated report of my &lt;a href="https://summerofcode.withgoogle.com/projects/#5357890195423232"&gt;GSoC ’21 project&lt;/a&gt;. I’ve been contributing to &lt;a href="https://github.com/sunpy/ndcube"&gt;ndcube&lt;/a&gt; - a &lt;a href="https://sunpy.org/"&gt;sunpy&lt;/a&gt; affiliated package, which is itself a part of the umbrella organization called &lt;a href="https://openastronomy.org/"&gt;openastronomy&lt;/a&gt;. Phew, that’s quite some hierarchy.&lt;/p&gt;
&lt;p&gt;Here’s a list of pull requests that I’ve opened during the coding period:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/433"&gt;Initial implementation for validating two WCS&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Implements a function to check if two given WCS objects are compatible with each other for reprojecting the NDCube.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/434"&gt;Reproject implementation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Adds a method to reproject an NDCube using the astropy package called reproject.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/439"&gt;Reproject NDCube Documentation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Documentation for the above PR.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/436"&gt;Combine cubes from NDCubeSequence using reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Stacks the data of all cubes in an NDCubeSequence together into one cube. This PR is ready to merge but awaits testing from the community.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/441"&gt;Reproject NDCubeSequence Documentation&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Documentation for the above PR. This will be merged after the code.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/448"&gt;Support adaptive and exact algorithms for reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is completed and is ready to merge.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/459"&gt;Make reproject more efficient by identifying invariant axes&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is a work in progress and might need some time until it’s ready. The last commit on this PR as of writing this post can be found &lt;a href="https://github.com/sunpy/ndcube/pull/459/commits/0c4c5a369c55f3f3e53837dd3db2b5f589b750ae"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I’ve also been writing blog posts throughout the coding period. Here are links to the 4 parts I’ve written so far: &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-1-b56e7277046e"&gt;Part 1&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/so-here-i-am-a-month-into-the-coding-period-and-at-the-onset-of-the-first-evaluation-2e6f76a45653"&gt;Part 2&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-3-f6354389b27f"&gt;Part 3&lt;/a&gt;, and &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-4-8c7c62861783"&gt;Part 4&lt;/a&gt;. They contain a more technical description of the work along with some obstacles that we faced.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=b35a6c6cba33" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</guid><pubDate>Fri, 20 Aug 2021 10:05:17 GMT</pubDate></item><item><title>GSoC 2021 — Final Report</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210819_0250_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;h4&gt;GSoC 2021 — Final Report&lt;/h4&gt;&lt;p&gt;Summer of 2021 held quite a few surprises for me. I’d have never imagined working with SunPy as a GSoC student and here I am concluding it with the final report. Before I summarize all the 30+ pull requests I’ve made to Sunkit-Pyvista, I just want to take a moment to than the brilliant mentors I’ve gotten to work with. The were not only patient and understanding but also extremely helpful with making me understand how everything works.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/300/1*SExFSpEK386SN8OQ_fOtEQ.png"&gt;&lt;/figure&gt;&lt;p&gt;Coming to Sunpy, or should I say Sunkit-Pyvista.&lt;/p&gt;
&lt;p&gt;Sunkit-Pyvista was created with the intention of extending Sunpy’s extensive plotting capabilities to 3D with the help of a VTK wrapper for Python — Pyvista.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;My experience with either of these libraries were extremely short-lived, but over the summer I got my hands dirty with them and loved every bit of it. I would’ve never imagined me doing a project regarding astronomy or 3D plotting, but here we are today.&lt;/p&gt;
&lt;p&gt;The original idea was proposed by one of the mentors a while and after an entire summer of working on it, I’m proud to say that I was a part of this library’s initial setup.&lt;/p&gt;
&lt;p&gt;The entire project was planned out over the 10 weeks of the GSoC period and I’m pretty proud to say that we had gotten done with everything slightly ahead of time which left us a few buffer weeks for us to review code and catch some bugs. For now, majority of the plotting/visualization functionality from Sunpy has been added to Sunkit-Pyvista, and we do have plans for some pretty cool stuff later on! I’m excited to see how this project would be used.&lt;/p&gt;
&lt;p&gt;Now, here’s a list of all the significant PRs I’ve made to the library which were carefully reviewed by both my mentors before any merges happened. The entire list of all my PRs can be found &lt;a href="https://github.com/sunpy/sunkit-pyvista/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt;. Every PR came with it’s own change-log and was carefully documented throughout.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/4"&gt;Initial setup of the code written by one of the mentors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/10"&gt;Ability to set camera coordinates functionality&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/12"&gt;Addition of Pfsspy field lines visualization&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/17"&gt;Drawing_Quadrangle on a 3D map&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/23"&gt;Unit test time!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/24"&gt;Efficient Plotting with MultiBlocks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/26"&gt;Clip Interval for clipping of data&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/29"&gt;Functionality to Plot tiny sphere at a given coordinate&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/30"&gt;Adding in some examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://jeffrey-paul2000.medium.com/feed#34"&gt;Ah, bug-fixes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/37"&gt;Saving and loading plots&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/38"&gt;Figure tests are now a thing!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/52"&gt;Performance enhancements to draw_quadrangle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/55"&gt;Plot_limb from Sunpy, but in 3D&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/73"&gt;Color enhancements&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Aside from these PRs, a lot more smaller ones were made which were related these significant ones in terms of enhancements or bug-fixes, but for the most part, everything is covered here. I think we’re set to have our 0.1 release right after the mentors take care of how the documentation works.&lt;/p&gt;
&lt;p&gt;We also planned to work on some cool &lt;a href="https://github.com/sunpy/sunkit-pyvista/pull/57"&gt;animations&lt;/a&gt; using the Pyvistaqt module but this was out of the scope of the original GSoC project so we’ve put a pin in it for now.&lt;/p&gt;
&lt;p&gt;Of course, my work doesn’t stop here. Being one of the main developers of this project, I’d love to continue working and building on it. Here’s to the amazing folks at SunPy and GSoC for this opportunity. 🍻&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=87f74dd364df" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210819_0250_jeffreypaul15/</guid><pubDate>Thu, 19 Aug 2021 01:50:29 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;The last few days haven’t been as productive as earlier. We fixed some issues with the NDCubeSequence’s stacking PR and it looks like it’s ready to merge now. With some feedback from the community, I think it will happen soon. There have also been some minor updates to the PR that brings reproject’s other algorithms to NDCube.&lt;/p&gt;
&lt;p&gt;A new task that I’ve taken up now is identifying invariant axes in a cube. Let’s say there’s a 3D data cube where one of the axes corresponds to a quantity like time, which you don’t want to reproject onto another grid. Identifying this axis would let us reproject at only one point along this axis and then apply it throughout. This will speed up the execution significantly and require a lesser amount of memory. It’s a tricky path though and the first implementation might not be very efficient. What we’re trying to do is convert pixel coordinates to world coordinates using the source WCS, and convert it back from world to pixel using the target WCS. If the original and final pixel coordinates match, we can conclude that the axis is invariant.&lt;/p&gt;
&lt;p&gt;I shall update its progress soon, but this is all for now. GSoC is officially coming to an end, but as I said in the previous post, it doesn’t matter much for continuing my contributions to this community. I’ve been fascinated by this open-source environment and culture and learned so much along the way. I guess GSoC did serve its purpose for me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There’s some work at sunraster, specifically updating it to work with ndcube 2.0 (whose RC1 was released recently). That sounds like a fun project given that I’m now familiar with ndcube. In fact, that was a project I had considered applying for as part of GSoC but hadn’t. I’ll let you all know how that goes. Cheers for now, I’ll talk to you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8c7c62861783" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</guid><pubDate>Tue, 17 Aug 2021 08:56:14 GMT</pubDate></item><item><title>Time to review my GSoC Project</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_1603_rashmiraj137/</link><dc:creator>Raj Rashmi</dc:creator><description>&lt;p&gt;With the end of the GSoC project, I will give this blog to summarise the JAX based optimization to analyze its applicability to enhance the loglikelihood calculation. The goal is to analyze, (i) the performance of different optimizers to evaluate the loglikelihood function, (ii) demonstrated the robustness of JAX to calculate gradients. And talk about the current code and corresponding improvement due to JAX.&lt;/p&gt;
&lt;p&gt;The application of loglikelihood fitting to periodograms is discussed in [1]. Let us start with analyzing best-fit power spectrum (i) with different sets of optimizers namely: &lt;em&gt;minimize(method=’Nelder-Mead’, ’Powell’, ’CG’, ’BFGS’, ’Newton-CG’, ’L-BFGS-B’, ’TNC’, ’COBYLA’, ’SLSQP’, ’trust-constr’, ’dogleg’, ’trust-ncg’, ’trust-krylov’, ’trust-exact’). &lt;/em&gt;The problem setting shifts the start and test parameters to study the graph of best fit optimizer using different “methods” listed above. First, we will stick with the Powell optimizer and try to check what is the current sensitivity of the implementation.&lt;/p&gt;
&lt;p&gt;Currently, we seek to find a solution to the problem when the optimization algorithm often gets stuck in local minima, terminate without meeting its formal success criteria, or fails due to any contributing factor. Possible ways are: (1) add more Lorentzian components, (2) reduce the amplitude, (3) start the optimization process with parameters very far away from the true parameters, (4) experiment with the different optimizers/ “methods” to investigate if there is more superior algorithm compared to Powell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*oEfdtoL2Fa0XAbjmugMvnA.png"&gt;&lt;figcaption&gt;Reference: blog.gitguardian.com&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;So far the &lt;em&gt;Powell&lt;/em&gt; and &lt;em&gt;Nelder-Mead &lt;/em&gt;gives almost the same best-fit curve compared to other optimizers, surprisingly even better than &lt;em&gt;BFGS(which is a well-known &lt;/em&gt;numerical optimizer for an iterative method for solving unconstrained nonlinear optimization problems. This directs to more investigation with (1) and (2) and (3). Both (2) and (3) makes the algorithm fail with the current &lt;em&gt;scipy.optimize.minimize, &lt;/em&gt;and we can see the&lt;em&gt; &lt;/em&gt;graph as given below.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1SA0BwGc48I8qRozxuK6CQ.png"&gt;&lt;/figure&gt;&lt;p&gt;I am still holding on to try &lt;a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.optimize.minimize.html"&gt;jax.scipy.optimize.minimize&lt;/a&gt; instead of &lt;a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.optimize.minimize.html"&gt;scipy.optimize.minimize&lt;/a&gt; and analyze the increment in robustness. Another way to enhance the current algorithm alongside experimenting with different optimisers is:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use a different gradient finding method.&lt;/li&gt;&lt;li&gt;Speed up objective function.&lt;/li&gt;&lt;li&gt;Reduce the number of design variables.&lt;/li&gt;&lt;li&gt;Choose a better initial guess.&lt;/li&gt;&lt;li&gt;Use parallel processing.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In my next blog, I will provide a more detailed explanation of current events. In this blog, I highlighted the emphasis of analysis.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] Maximum likelihood fitting of X-ray power density spectra: Application to high-frequency quasi-periodic oscillations from the neutron star X-ray binary 4U1608-522. Didier Barret, Simon Vaughan. &lt;a href="https://arxiv.org/abs/1112.0535"&gt;https://arxiv.org/abs/1112.0535&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c34297f2dc81" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_1603_rashmiraj137/</guid><pubDate>Mon, 16 Aug 2021 15:03:25 GMT</pubDate></item><item><title>Ah, the end?</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;p&gt;From when I’ve started writing these blog posts, I’ve taken quite a liking to writing these blog posts (except for the one fortnight I missed). OpenAstronomy has helped me improve the way I express myself in a satirical manner. I’ve spent quite a bit of time trying to figure out what’s the plan for my future but let’s save that story for another day.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Y0Rim-lsXAAtQbRuk6-37A.jpeg"&gt;&lt;figcaption&gt;Here’s picture of sun and its field lines to show that I’m working on astronomy related, but actually have no proper knowledge of how any of this works, cheers! 🍻&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Here’s a bit of how my last week of “officially” working on Sunkit-Pyvista went :-&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We put a pin on the animator as it didn’t make sense for us to work on something that isn’t of more value for the first release.&lt;/li&gt;&lt;li&gt;Pfsspy field lines now allow for a custom color function to be passed while plotting.&lt;/li&gt;&lt;li&gt;All main functionality is big-free (as far as I know) and can be used efficiently without having to worry about something failing.&lt;/li&gt;&lt;li&gt;The final boss with our little project is trying to get the documentation to render 3D plots correctly and this is being handled by the mentors which is a huge load off my head.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That’s pretty much it I guess, these last few PRs mark the end of the so called “GSoC” period. What more have I left out? I’ve spoken about everything there is to be said, we’re nearing the end of this pretty interesting journey that I had embarked on. Other than a small bit of sadness, I’ve got nothing else to say. I’ve decided to continue working on Sunkit-Pyvista as being an open-sourced contributor is all about the community and I’m doing my part in working towards that (It’s not like I was planning on leaving either way though, this is almost a part of my daily routine).&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here’s to Sunpy and the best mentors I’ve interacted with. 🍻&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=e9ce2f5de6dc" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</guid><pubDate>Mon, 16 Aug 2021 02:20:04 GMT</pubDate></item><item><title>GSoC Post 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210815_1402_ndanzanello/</link><dc:creator>ndanzanello</dc:creator><description>&lt;p&gt;Hi! In the last weeks we have finished the Astrometry linear part programming. &lt;img alt="🙂" class="wp-smiley" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" style="height: 1em;"&gt;&lt;/p&gt;


&lt;!-- TEASER_END --&gt;

&lt;p&gt;We added an option to solve for more pixel catalogs, which are a part of a field image. This is an important case in real world scenarios. The image below is a good illustration of this: we have a field and a lot of exposures that are used to build the final image.&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="https://archive.stsci.edu/prepds/xdf/images/xdf_buildup.png" src="https://archive.stsci.edu/prepds/xdf/images/xdf_buildup.png"&gt;&lt;figcaption&gt;Source: &lt;a href="https://archive.stsci.edu/prepds/xdf/" rel="noreferrer noopener" target="_blank"&gt;https://archive.stsci.edu/prepds/xdf/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;Also, we are moving our code to Gnuastro, so it can be a Gnuastro program. To do this, we have to follow Gnuastro conventions, so everything can be organized. Luckily, it’s very well documented how to do it, as you can see &lt;a href="https://www.gnu.org/software/gnuastro/manual/html_node/The-TEMPLATE-program.html#The-TEMPLATE-program" rel="noreferrer noopener" target="_blank"&gt;here&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/gnuastro/manual/html_node/Mandatory-source-code-files.html" rel="noreferrer noopener" target="_blank"&gt;also here&lt;/a&gt;.&lt;/p&gt;</description><category>gnuastro</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210815_1402_ndanzanello/</guid><pubDate>Sun, 15 Aug 2021 13:02:15 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #6.5 - Week 10, Final Evaluations</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt; You know, 7's my lucky number.&lt;/p&gt;
&lt;p&gt;And Happy Independence Day!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</guid><pubDate>Sat, 14 Aug 2021 21:36:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts by TranHuuNhatHuy)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/authors/tranhuunhathuy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 16 May 2025 02:00:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Final Evaluation - A time to look back.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/236320199c2c7323f80233362c6a584c/71b12/logoOA.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="logo_OpenAstronomy" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/236320199c2c7323f80233362c6a584c/f058b/logoOA.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="logo_OpenAstronomy"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;1. What I have done in OpenAstronomy and in RADIS&lt;/h4&gt;
&lt;p&gt;Throughout 3 months with RADIS, I have successfully developed a new fitting module for spectrum fitting purposes. RADIS has its own fitting feature, as shown in &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html#sphx-glr-auto-examples-plot-1t-fit-py"&gt;1-temperature fit example&lt;/a&gt;, where you have to manually create the spectrum model, input the experimental spectrum and other ground-truths into numerous RADIS native functions, as well as adjust the fitting pipeline yourself.&lt;/p&gt;
&lt;p&gt;Now with the new fitting module released, all you have to do is to prepare a &lt;code class="language-text"&gt;.spec&lt;/code&gt; file containing your experimental spectrum, fill some JSON forms describing the ground-truth conditions just like how you fill your medical checkup paper, call the function &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.tools.new_fitting.html#radis.tools.new_fitting.fit_spectrum"&gt;&lt;code class="language-text"&gt;fit_spectrum()&lt;/code&gt;&lt;/a&gt; and let it do all the work! If you are not satisfied with the result, you can simply adjust the parameters in your JSON, such as &lt;code class="language-text"&gt;slit&lt;/code&gt; and &lt;code class="language-text"&gt;path_length&lt;/code&gt;, then recall the function again, until the results are satisfied.&lt;/p&gt;
&lt;p&gt;This is way easier and more convenient than dwelling into RADIS documentation to find out and learn how to use the current example, especially for new RADIS users. Various &lt;a href="https://github.com/radis/radis/pull/522#issue-1365475821"&gt;benchmarking efforts&lt;/a&gt; have shown that this new fitting module has performance advantages over the old version. This new fitting module aims to provide an end-to-end fitting experience, with minimum amount of RADIS knowledge needed.&lt;/p&gt;
&lt;p&gt;You can see an overview of my project here: &lt;a href="https://github.com/radis/radis/projects/6"&gt;https://github.com/radis/radis/projects/6&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;2. GSoC, RADIS and a learning curve that has been fulfilled&lt;/h4&gt;
&lt;p&gt;Throughout my GSoC journey with RADIS and working as a contributor, I really enjoyed all the experience of developing and contributing a meaningful improvement to a grand community-based project. Furthermore, I used to be a Computer Science majored student back in Vietnam, but after coming to Japan, I have been learning engineering for more than 2 years, enough for me to miss the old time coding projects and grinding hackathons, the days when I was truly a “CS student”. GSoC truly granted me a precious chance to rekindle the interest I have long lost, with wonderous opportunities to learn from prestigious mentors, and a huge boost for my background to get back to the run.&lt;/p&gt;
&lt;p&gt;In addition, one of the most satisfying moments in this GSoC, is when I finally nailed a bug or issue after days (or even weeks, trust me) of debugging, using the last brain cell to figure out what is the reason. The longer the suffering, the greater the hype that comes afterward. I guess we as developers all share this kind of experience often, but for a guy who starts coding again after a long time like, the ecstasy is at least three-fold.&lt;/p&gt;
&lt;p&gt;Furthermore, I don’t know what other open-source projects are, but RADIS is an extremely well-developed one. They have code coverage, pre-commit check, automatic documentation, and an extensive library of well-structured classes and methods for multiple purposes. This is a level of professional development I have never seen before, and I am extremely eager to learn all of this, not only within the GSoC, but also for a much longer time. This project also helped me to gain significant knowledge and experience&lt;/p&gt;
&lt;p&gt;So, to sum up, I really enjoyed this GSoC, especially with RADIS mentors and community. Thank you so much, GSoC and RADIS, for all of these wonderous experiences.&lt;/p&gt;
&lt;h4&gt;3. Of course, there were hard times, but hey, “Hard times come again no more”&lt;/h4&gt;
&lt;p&gt;I believe the most challenging part of my GSoC 2022 experience, is during the development of my project itself. My project is “Spectrum Fitting Improvement”, in which I will implement a brand-new fitting method that uses a different module than the original method’s, and there are several challenges that I only discovered after joining the project.&lt;/p&gt;
&lt;p&gt;Firstly, the fitting process itself is totally a black box, where I implemented a spectrum, along with its ground-truth parameters, and hopefully the result comes as I expect. In the early days, there were weeks when I could not understand why the result went bad. The reasons could be faulty ground-truth data (original ground-truth parameters are incorrect), or the spectrum itself (mistakes during spectral variable extraction), a code bug, or even from the RADIS limitation itself (currently RADIS only uses air broadening coefficients, which is not suitable for experiments in other gases). All of these costed me huge time and efforts just trying to figure out the culprit, and those were the most anxious times.&lt;/p&gt;
&lt;p&gt;Secondly, there are several problems and bugs, or required implementations that can only be discovered during the last weeks of this GSoC, which makes these time tough and sour for me.&lt;/p&gt;
&lt;p&gt;Finally, my laptop was abruptly broken beyond repair during the middle of second phase, in which I had to wait for one week before the new laptop arrived and I could continue my work. Truly the darkest, most desperate days back then.&lt;/p&gt;
&lt;p&gt;Gradually the learning curve is flattened, but still, there were tough times. Thanks to GSoC, I could experience what would happen in a real project, where you have to anticipate and be ready to deal with all possible accidents and troubles, while keeping on a tight schedule. These will be precious experience for me and my career ahead.&lt;/p&gt;
&lt;h4&gt;4. A little tribute to my mentors&lt;/h4&gt;
&lt;p&gt;Firstly, I would like to say, thank you so much, my mentors - Mr. Erwan, Mr. Minou, Anand, Gagan, as well as other unofficial mentors such as Mr. Corentin - for all the time and efforts you have put through to guide us – some random annoying students always trying to bother you with questions throughout 4 months.&lt;/p&gt;
&lt;p&gt;You helped us a lot in understanding the RADIS codebase and overall structure, as well as various skills in developing a grand-scaled project like RADIS. Throughout this GSoC, I had opportunity to familiarize with code coverage, pre-commit check and linting, automatic documentation such as readthedocs, a bunch of GitHub tips, and most important, a sheer confidence of open-source project contributing, by jumping into the source code itself, understanding it slow and steady, then finally pushing commits. Before this April, all of these were very scary for me. But now, as I look back, they are just breezes to me. Now I can truly understand and feel the scope of GSoC – to encourage students to contribute to open-source projects. Thanks to you, this is a huge success to me.&lt;/p&gt;
&lt;p&gt;All of these could not be done without you entrusting us from the very beginning of selection process. From the very moment of you accepting us, we are here today, wrapping up what we have learned, finishing our projects, and carving our names into the list of RADIS contributors. These will be precious experience for me and my career ahead.&lt;/p&gt;
&lt;h4&gt;5. And finally, to someone reading this&lt;/h4&gt;
&lt;p&gt;Ayyo, to whoever reading this,&lt;/p&gt;
&lt;p&gt;I believe that you must be some next year’s GSoC applicants sneaking around and patiently preparing for the upcoming turn. If you are reading this, then firstly I would like to say thank you for reading all the way here.&lt;/p&gt;
&lt;p&gt;I have so many things to share you about all the experiences I had during this GSoC, about every moment in all aspects during these 3 months. But I’m afraid I might accidentally spoil your fun in near future, so I will only give some necessary advice, hope they might help you enjoy better in the next GSoC.&lt;/p&gt;
&lt;p&gt;Firstly, the actual time required to complete the project always LONGER than the initially planned time, so try your best to finish everything as soon as possible.&lt;/p&gt;
&lt;p&gt;Secondly, there might be times when you confront an extremely hard issue which takes you A LOT of time and you still cannot deal with it. When that time comes, explain to your mentors, and find a way, instead of gazing on the screen trying to solve it singlehandedly while wasting 1-2 weeks for that, like I did.&lt;/p&gt;
&lt;p&gt;This is also relevant to the above advice but, if you find yourself scared to tell your mentors about a challenge you are facing, please do not be afraid and just tell them. I used to be extremely afraid of asking my mentors because sometimes they were deadly serious (in a professional way), and thus I forced myself to solve an impossible task for 2 weeks before finally reaching out to them. Please do not be afraid and share with them anything, if you want to find a solution, if you want to change the current objectives, or whatever. Just ask!&lt;/p&gt;
&lt;p&gt;And finally, try to enjoy GSoC, I meant, every moment of it. It worths. Really.&lt;/p&gt;
&lt;p&gt;Good luck to become a GSoC member and successfully carve your name among contributors!&lt;/p&gt;
&lt;p&gt;September 12, 2022
Tran Huu Nhat Huy&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/4d7ee6f3d3a81c95e441a7cc5dcadb98/ac99c/me.jpg" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Me, among the peaks of Shizuoka, Japan." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/4d7ee6f3d3a81c95e441a7cc5dcadb98/828fb/me.jpg" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Me, among the peaks of Shizuoka, Japan."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_0000_tranhuunhathuy/</guid><pubDate>Sun, 11 Sep 2022 23:00:00 GMT</pubDate></item><item><title>Week 12 - Final implementation into RADIS, along with a plethora of illustrative examples.</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220905_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;h4&gt;1. Implementation of modules into RADIS&lt;/h4&gt;
&lt;p&gt;Finally, after being approved by Mr. Erwan, I can implement all of my modules, developed separately in my repo &lt;a href="https://github.com/TranHuuNhatHuy/RADIS-Spectrum-Fitting-Benchmark"&gt;RADIS-Spectrum-Fitting-Benchmark&lt;/a&gt;, into RADIS codebase. The implementation features &lt;a href="https://github.com/radis/radis/blob/develop/radis/tools/new_fitting.py"&gt;&lt;code class="language-text"&gt;new_fitting.py&lt;/code&gt;&lt;/a&gt;, the new fitting module that stores all the fitting functions and associated models, whose performance confirmed after a bunch of user-testing cases.&lt;/p&gt;
&lt;h4&gt;2. Accompanied illustrative examples&lt;/h4&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;They are gallery examples that are added into &lt;code class="language-text"&gt;radis/examples&lt;/code&gt;, serving as illustrative scripts for my new fitting module:&lt;/p&gt;
&lt;h5&gt;(i) &lt;code class="language-text"&gt;plot_newfitting_Tgas.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The most basic example of how to use new fitting module, including the formats and so on.&lt;/p&gt;
&lt;h5&gt;(ii) &lt;code class="language-text"&gt;plot_newfitting_Trot-Tvib-molfrac.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The real-life fitting case provided by Mr. Corentin, featuring non-LTE CO spectrum in which we will fit &lt;code class="language-text"&gt;Trot&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib&lt;/code&gt; and &lt;code class="language-text"&gt;mole_fraction&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;(iii) &lt;code class="language-text"&gt;plot_newfitting_Tgas-molfrac.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Mr. Minou’s user-testing case of CO absorbance spectrum near 2011 cm-1. This case features spectrum extraction from a &lt;code class="language-text"&gt;.mat&lt;/code&gt; MATLAB file. Originally, this file was 1.2 MB, quite large to be added to RADIS. Thus, I removed all fields unnecessary for spectrum generation, and now it only has around 400 kB left.&lt;/p&gt;
&lt;h5&gt;(iv) &lt;code class="language-text"&gt;plot_newfitting_comparison_oldnew.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Performance comparison example between &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html#sphx-glr-auto-examples-plot-1t-fit-py"&gt;current 1-temperature fitting&lt;/a&gt; and my new fitting module, under exactly the same ground-truths and settings. The benchmark result shows that, under exactly the same conditions, the new best fitted value differ 0.45% from the old one (1464.1 K from the old 1457.5 K). New fitting module requires half as many iterations as the old one and hence faster, with much smaller residual. In detail:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-text"&gt;&lt;code class="language-text"&gt;====================  PERFORMANCE COMPARISON BETWEEN 2 FITTING METHODS  ====================

1. LAST RESIDUAL

- Old 1T fitting example:       0.002730027027336094
- New fitting module:           0.0005174179496843629

2. NUMBER OF FITTING LOOPS

- Old 1T fitting example:       32 loops
- New fitting module:           16 loops

3. TOTAL TIME TAKEN (s)

- Old 1T fitting example:       4.881942987442017 s
- New fitting module:           2.7344970703125 s

==========================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’m not sure this superiority will persist in all cases, but even so, I believe the value of my module still lies in its practical and easy to use/apply.&lt;/p&gt;
&lt;h5&gt;(v) &lt;code class="language-text"&gt;plot_newfitting_comparison_methods.py&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;A benchmarking example which compares performance between different &lt;a href="https://lmfit.github.io/lmfit-py/fitting.html#choosing-different-fitting-methods"&gt;LMFIT fitting algorithms&lt;/a&gt;. It measures their last residual (for accuracy evaluation) and number of iterations (for robustness evaluation). The benchmark result shows that, under exactly the same conditions, &lt;code class="language-text"&gt;leastsq&lt;/code&gt; and &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; work best, with &lt;code class="language-text"&gt;leastsq&lt;/code&gt; good at accuracy, while &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; good at speed (and theoretically, memory requirement). Thus, I set &lt;code class="language-text"&gt;leastsq&lt;/code&gt; as default method for the module, but also encourage users to switch to &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; in case things turn sour.&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-text"&gt;&lt;code class="language-text"&gt;======================== BENCHMARKING RESULT ========================

||           METHOD          ||          RESIDUAL         || LOOPS ||
||---------------------------||---------------------------||-------||
|| leastsq                   || 1.4739494411950239e-07    || 24    ||
|| least_squares             || 1.2170348021620847e-05    || 1     ||
|| differential_evolution    || 1.4739855740762716e-07    || 151   ||
|| brute                     || 1.2287258962300115e-06    || 20    ||
|| basinhopping              || 7.930954059631543e-06     || 151   ||
|| ampgo                     || 4.105104127826488e-07     || 151   ||
|| nelder                    || 1.4739942144030064e-07    || 30    ||
|| lbfgsb                    || 1.4739494411955646e-07    || 28    ||
|| powell                    || 1.473949441200994e-07     || 43    ||
|| cg                        || 1.4776331905574135e-07    || 30    ||
|| cobyla                    || 1.1524288718226295e-05    || 21    ||
|| bfgs                      || 1.4776331905574135e-07    || 30    ||
|| tnc                       || 1.4740393115424221e-07    || 28    ||
|| trust-constr              || 1.4739494411948182e-07    || 26    ||
|| slsqp                     || 1.2170348021620847e-05    || 2     ||
|| shgo                      || 1.0507694502308952e-05    || 5     ||
|| dual_annealing            || 1.5455930218501237e-05    || 151   ||
||---------------------------||---------------------------||-------||&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/dc95cb63a4457b8bb0d3d58fca7b8bbe/2bf90/method_compare_result.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Method benchmarking result." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/dc95cb63a4457b8bb0d3d58fca7b8bbe/f058b/method_compare_result.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Method benchmarking result."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220905_0000_tranhuunhathuy/</guid><pubDate>Sun, 04 Sep 2022 23:00:00 GMT</pubDate></item><item><title>Week 9, 10 and 11 - The challenge, the calamity, the hope, and the salvation.</title><link>http://openastronomy.org/Universe_OA/posts/2022/08/20220828_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;h4&gt;1. The challenge&lt;/h4&gt;
&lt;p&gt;After successfully dealing with Mr. Minou’s case, I got a message from another RADIS spectroscopic scientist - Mr. Corentin Grimaldi, a Ph.D. candidate of CentraleSupélec, Paris. He had several experimental spectra containing CO and CO2 at different temperatures and possibly in non-equillibrium. There were 3 spectra in total, and he also provided 3 Python scripts he used to fit them:&lt;/p&gt;
&lt;ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;li&gt;&lt;code class="language-text"&gt;Fit_init_V2.py&lt;/code&gt; : the script for fitting initialization, which conducts all the basic functions such as normalization, crop, slit convolution &amp;amp; dispersion, residual calculation, etc.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;Optimize_find_min_2D_V2.py&lt;/code&gt; : the program that looks for optimum parameters such as &lt;code class="language-text"&gt;Trot&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib&lt;/code&gt;, &lt;code class="language-text"&gt;molfrac&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;fit_CO_1T_CO2_2T_cv_V2.py&lt;/code&gt; :  the master program that conducts main fitting job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there is one thing that I need to mention first: these spectra are quite challenging to fit. Not hard, but challenging. Both CO2 and CO overlap in this spectral region, and a lot of parameters are unknown: &lt;code class="language-text"&gt;Trot&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib&lt;/code&gt;, &lt;code class="language-text"&gt;x_CO&lt;/code&gt; for CO and &lt;code class="language-text"&gt;Trot&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib1&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib2&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib3&lt;/code&gt;, &lt;code class="language-text"&gt;x_CO2&lt;/code&gt; for CO2. Furthermore, unfortunately some cold CO2 and H2O absorb the incomming radiance and the mole fraction is also unknown, too. So basically, there are a lot of fit parameters we need to find, and they don’t really follow the normal spectrum calculation that RADIS offers.&lt;/p&gt;
&lt;p&gt;Although Mr. Corentin provided a fitting pipeline for these cases, I still kinda doubt whether should I implement his very specific and exotic approach to my unified modules. After experiencing a lot of fitting scripts from various users in the community, I feel like although I can implement a common interface to support most of fitting cases, but definitely not all of them, since each experimental spectrum is suitable for a unique workflow. Mr. Corentin’s case and approach is just somewhat way too unique and completely different from mine. So basically, his approach is quite difficult to be generalized and implemented into a module aimed to serve general fitting cases.&lt;/p&gt;
&lt;h4&gt;2. The calamity&lt;/h4&gt;
&lt;p&gt;After spending the whole week 9 finding a solution for Mr. Corentin’s cases, at the beginning of week 10, all of sudden my MSI laptop - the 6-year buddy always accompanies me to all the coding contests and evreything - stopped working. The next day, the iPhone 11 I bought this February had its screen flickered intensively and thus unable to use. Within less than 48 hours, I, one of GSoC contributor, was cut off from the modern life! All the following days were desperate efforts trying to get my stuffs fixed but nothing worked, trying to communicate with the mentors, trying not to miss any important emails and news. Amidst the challenging second phase of GSoC, I was rendered useless for one week straight! I shudder recalling it, those dark and desperate days sitting in Japanese internet cafes to access the Internet, while extremely anxious about a future of failing GSoC.&lt;/p&gt;
&lt;h4&gt;3. The hope&lt;/h4&gt;
&lt;p&gt;After one week of despair, my new Macbook Air M1 finally arrived!&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/235c694787085f9f7595ef9772eb4744/0f98f/new_Mac.jpg" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="My new buddy!" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/235c694787085f9f7595ef9772eb4744/828fb/new_Mac.jpg" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="My new buddy!"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Finally days and nights in extreme anxious of being unable to do anything while seeing my friends committing and pushing onto GitHub, have finally gone! Now I have my new Mac (with an exorbitant cost as Japanese Yen is dropping like my mental condition recently), and within the remaining days until the final evaluation, I will rush my best with all I have to deliver my module!&lt;/p&gt;
&lt;h4&gt;4. The salvation&lt;/h4&gt;
&lt;p&gt;After a long time of struggling, I finally received new experimental spectra from Mr. Corentin. He finally realized that those old cases were just too complicated, and now we have 4 simpler tests case with only CO, in the spectral range of 2000 nm to 2600 nm, non-equillibrium, not really absorbed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/0_100cm%20Down%20Sampled%20-%2010cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec"&gt;0_100cm%20Down%20Sampled%20-%2010cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/0_100cm%20Down%20Sampled%20-%2020cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec"&gt;0_100cm%20Down%20Sampled%20-%2020cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/0_200cm%20Down%20Sampled%20-%2035cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec"&gt;0_200cm%20Down%20Sampled%20-%2035cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/0_300cm%20Down%20Sampled%20-%2010cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec"&gt;0_300cm%20Down%20Sampled%20-%2010cm_10pctCO2_1-wc-gw450-gr300-sl1500-acc5000-.spec&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, in these cases Mr. Corentin introduced a complex slit settings like this:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;&lt;span class="token keyword"&gt;def&lt;/span&gt; &lt;span class="token function"&gt;slit_dispersion&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;w&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;
phi &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;6.33&lt;/span&gt;
f &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;750&lt;/span&gt;
gr &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;300&lt;/span&gt;
m &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;
phi &lt;span class="token operator"&gt;*=&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt; &lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;np&lt;span class="token punctuation"&gt;.&lt;/span&gt;pi&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;360&lt;/span&gt;
d &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1e-3&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;gr
disp &lt;span class="token operator"&gt;=&lt;/span&gt; w&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;f&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;np&lt;span class="token punctuation"&gt;.&lt;/span&gt;tan&lt;span class="token punctuation"&gt;(&lt;/span&gt;phi&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;+&lt;/span&gt;np&lt;span class="token punctuation"&gt;.&lt;/span&gt;sqrt&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;d&lt;span class="token operator"&gt;/&lt;/span&gt;m&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;w&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token number"&gt;1e-9&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;np&lt;span class="token punctuation"&gt;.&lt;/span&gt;cos&lt;span class="token punctuation"&gt;(&lt;/span&gt;phi&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;**&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
&lt;span class="token keyword"&gt;return&lt;/span&gt; disp  &lt;span class="token comment"&gt;# nm/mm&lt;/span&gt;

&lt;span class="token keyword"&gt;def&lt;/span&gt; &lt;span class="token function"&gt;apply_my_slit&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;spectrum&lt;span class="token punctuation"&gt;,&lt;/span&gt; inplace&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token boolean"&gt;False&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;
slit &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1500&lt;/span&gt;  &lt;span class="token comment"&gt;# µm&lt;/span&gt;
pitch &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;20&lt;/span&gt;   &lt;span class="token comment"&gt;# µm&lt;/span&gt;
top_slit_um &lt;span class="token operator"&gt;=&lt;/span&gt; slit &lt;span class="token operator"&gt;-&lt;/span&gt; pitch   &lt;span class="token comment"&gt;# µm&lt;/span&gt;
base_slit_um &lt;span class="token operator"&gt;=&lt;/span&gt; slit &lt;span class="token operator"&gt;+&lt;/span&gt; pitch  &lt;span class="token comment"&gt;# µm&lt;/span&gt;
center_slit &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;5090&lt;/span&gt;
dispersion &lt;span class="token operator"&gt;=&lt;/span&gt; slit_dispersion&lt;span class="token punctuation"&gt;(&lt;/span&gt;center_slit&lt;span class="token punctuation"&gt;)&lt;/span&gt;
top_slit_nm &lt;span class="token operator"&gt;=&lt;/span&gt; top_slit_um&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token number"&gt;1e-3&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;dispersion
base_slit_nm &lt;span class="token operator"&gt;=&lt;/span&gt; base_slit_um&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token number"&gt;1e-3&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;dispersion&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token number"&gt;1.33&lt;/span&gt;
&lt;span class="token keyword"&gt;return&lt;/span&gt; spectrum&lt;span class="token punctuation"&gt;.&lt;/span&gt;apply_slit&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;top_slit_nm&lt;span class="token punctuation"&gt;,&lt;/span&gt; base_slit_nm&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; center_wavespace&lt;span class="token operator"&gt;=&lt;/span&gt;center_slit&lt;span class="token punctuation"&gt;,&lt;/span&gt; unit&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;'nm'&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; shape&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;'trapezoidal'&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; slit_dispersion&lt;span class="token operator"&gt;=&lt;/span&gt;slit_dispersion&lt;span class="token punctuation"&gt;,&lt;/span&gt; inplace&lt;span class="token operator"&gt;=&lt;/span&gt;inplace&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initially, my fitting module only allows &lt;code class="language-text"&gt;slit&lt;/code&gt; to be enter with the format of a slit value accompanied by slit unit. For example:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;experimental_conditions &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;
&lt;span class="token string"&gt;"slit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"-0.2 nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To support Mr. Corentin’s input, from now I implement input of complex slit settings in compliance with &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.spectrum.spectrum.html#radis.spectrum.spectrum.Spectrum.apply_slit"&gt;apply_slit()&lt;/a&gt; function of RADIS. Advanced settings such like this can be inputted:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;experimental_conditions &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;
&lt;span class="token string"&gt;"slit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"slit_function"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;top_slit_nm&lt;span class="token punctuation"&gt;,&lt;/span&gt; base_slit_nm&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"unit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"shape"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;'trapezoidal'&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"center_wavespace"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; center_slit&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"slit_dispersion"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; slit_dispersion&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"inplace"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token boolean"&gt;False&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so, I have acquired very good results:&lt;/p&gt;
&lt;h5&gt;Spectrum 1:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Tvib:             5975.28759 (init = 6000)&lt;/li&gt;
&lt;li&gt;Trot:             5751.19260 (init = 4000)&lt;/li&gt;
&lt;li&gt;mole_fraction:    0.05501671 (init = 0.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/2385b33c685a75c2a93493ceed61841d/cca35/s1.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Fit result of spectrum 1" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/2385b33c685a75c2a93493ceed61841d/f058b/s1.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Fit result of spectrum 1"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;Spectrum 2:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Tvib:             4547.43903 (init = 6000)&lt;/li&gt;
&lt;li&gt;Trot:             4073.50694 (init = 4000)&lt;/li&gt;
&lt;li&gt;mole_fraction:    0.05939918 (init = 0.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/345f41ef9109afb638a3aa9eedb6e4f4/cca35/s2.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Fit result of spectrum 2" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/345f41ef9109afb638a3aa9eedb6e4f4/f058b/s2.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Fit result of spectrum 2"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;Spectrum 3:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Tvib:             2811.98218 (init = 6000)&lt;/li&gt;
&lt;li&gt;Trot:             2915.36318 (init = 4000)&lt;/li&gt;
&lt;li&gt;mole_fraction:    0.07739941 (init = 0.05)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/5b1fb36019eae53d82648d9fdf049153/cca35/s3.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Fit result of spectrum 3" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/5b1fb36019eae53d82648d9fdf049153/f058b/s3.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Fit result of spectrum 3"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;Spectrum 4:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Tvib:             4721.28892 (init = 6000)&lt;/li&gt;
&lt;li&gt;Trot:             4728.52960 (init = 4000)&lt;/li&gt;
&lt;li&gt;mole_fraction:    0.07008355 (init = 0.05)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/569114757da34f35d48661ef31830737/cca35/s4.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Fit result of spectrum 4" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/569114757da34f35d48661ef31830737/f058b/s4.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Fit result of spectrum 4"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/08/20220828_0000_tranhuunhathuy/</guid><pubDate>Sat, 27 Aug 2022 23:00:00 GMT</pubDate></item><item><title>Week 7 and 8 - User-testing, Mr. Minou's case, HAPPY BIRTHDAY TO ME!!!</title><link>http://openastronomy.org/Universe_OA/posts/2022/08/20220807_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;For now, my priority is to focus on extensive user-testing cases from real-life experimental spectra, instead of the synthetic ones in first phase of the project. One of the very first experimental spectra I get, is from Mr. Nicolas MinesiMinesi, or Mr. Minou, a Post-doctoral Researcher at Universify of California, L.A. He specializes in laser spectroscopy and also one of my mentors in RADIS.&lt;/p&gt;
&lt;h4&gt;1. The spectrum&lt;/h4&gt;
&lt;p&gt;Mr. Minou introduced an absorbance CO spectrum near 2011 cm-1. He stored the data in a MAT (Matlab) file, which is extracted by this script:&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;fileName &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;"1857_VoigtCO_Minesi.mat"&lt;/span&gt;
data &lt;span class="token operator"&gt;=&lt;/span&gt;  scipy&lt;span class="token punctuation"&gt;.&lt;/span&gt;io&lt;span class="token punctuation"&gt;.&lt;/span&gt;loadmat&lt;span class="token punctuation"&gt;(&lt;/span&gt;fileName&lt;span class="token punctuation"&gt;,&lt;/span&gt; simplify_cells&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token boolean"&gt;True&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token string"&gt;'CO_resu_Voigt'&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;
index &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;20&lt;/span&gt;
s_experimental &lt;span class="token operator"&gt;=&lt;/span&gt; Spectrum&lt;span class="token punctuation"&gt;.&lt;/span&gt;from_array&lt;span class="token punctuation"&gt;(&lt;/span&gt;
data&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token string"&gt;'nu'&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
data&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token string"&gt;'A_exp'&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;index&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;'absorbance'&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
wunit&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;'cm-1'&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
unit&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;''&lt;/span&gt;
&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token comment"&gt;# adimensioned&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, I acquire the experimental spectrum as below:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/e70ce9c33fa1293cdc0e69659560ada6/df5d6/exp_spectrum.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Mr. Minou's experimental spectrum, in absorbance." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/e70ce9c33fa1293cdc0e69659560ada6/f058b/exp_spectrum.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Mr. Minou's experimental spectrum, in absorbance."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And then, soon enough, I have also acquired his ground-truth data, which are fed to the JSON structures:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;&lt;span class="token comment"&gt;# Experimental conditions which will be used for spectrum modeling. Basically, these are known ground-truths.&lt;/span&gt;
experimental_conditions &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"molecule"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;          &lt;span class="token comment"&gt;# Molecule ID&lt;/span&gt;
&lt;span class="token string"&gt;"isotope"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Isotope ID, can have multiple at once&lt;/span&gt;
&lt;span class="token string"&gt;"wmin"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;2010.6&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Starting wavelength/wavenumber to be cropped out from the original experimental spectrum.&lt;/span&gt;
&lt;span class="token string"&gt;"wmax"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;2011.6&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Ending wavelength/wavenumber for the cropping range.&lt;/span&gt;
&lt;span class="token string"&gt;"wunit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"cm-1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;           &lt;span class="token comment"&gt;# Accompanying unit of those 2 wavelengths/wavenumbers above.&lt;/span&gt;
&lt;span class="token string"&gt;"pressure"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;             &lt;span class="token comment"&gt;# Partial pressure of gas, in "bar" unit.&lt;/span&gt;
&lt;span class="token string"&gt;"path_length"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;10&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;         &lt;span class="token comment"&gt;# Experimental path length, in "cm" unit.&lt;/span&gt;
&lt;span class="token string"&gt;"wstep"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.001&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token string"&gt;"databank"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"hitemp"&lt;/span&gt;       &lt;span class="token comment"&gt;# Databank used for calculation. Must be stated.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# List of parameters to be fitted.&lt;/span&gt;
fit_parameters &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"Tgas"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;7170&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;              &lt;span class="token comment"&gt;# Fit parameter, accompanied by its initial value.&lt;/span&gt;
&lt;span class="token string"&gt;"mole_fraction"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.07&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;     &lt;span class="token comment"&gt;# Species mole fraction, from 0 to 1.&lt;/span&gt;
&lt;span class="token string"&gt;"offset"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"0 cm-1"&lt;/span&gt;         &lt;span class="token comment"&gt;# Experimental offset, must be a blank space separating offset amount and unit.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# List of bounding ranges applied for those fit parameters above.&lt;/span&gt;
bounding_ranges &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"Tgas"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;2000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;9000&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;      &lt;span class="token comment"&gt;# Bounding ranges for each fit parameter stated above. You can skip this step, but not recommended.&lt;/span&gt;
&lt;span class="token string"&gt;"mole_fraction"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;   &lt;span class="token comment"&gt;# Species mole fraction, from 0 to 1.&lt;/span&gt;
&lt;span class="token string"&gt;"offset"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token number"&gt;0.1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;0.1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;      &lt;span class="token comment"&gt;# Experimental offset, must be a blank space separating offset amount and unit&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# Fitting pipeline setups.&lt;/span&gt;
fit_properties &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"method"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"lbfgsb"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;        &lt;span class="token comment"&gt;# Preferred fitting method from the 17 confirmed methods of LMFIT stated in week 4 blog. By default, "leastsq".&lt;/span&gt;
&lt;span class="token string"&gt;"fit_var"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"absorbance"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;   &lt;span class="token comment"&gt;# Spectral quantity to be extracted for fitting process, such as "radiance", "absorbance", etc.&lt;/span&gt;
&lt;span class="token string"&gt;"normalize"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token boolean"&gt;False&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;        &lt;span class="token comment"&gt;# Either applying normalization on both spectra or not.&lt;/span&gt;
&lt;span class="token string"&gt;"max_loop"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;           &lt;span class="token comment"&gt;# Max number of loops allowed. By default, 100.&lt;/span&gt;
&lt;span class="token string"&gt;"tol"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1e-20&lt;/span&gt;               &lt;span class="token comment"&gt;# Fitting tolerance, only applicable for "lbfgsb" method.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During my attempt to fit this spectrum, several bugs have been found and addressed.&lt;/p&gt;
&lt;h4&gt;2. Improvements&lt;/h4&gt;
&lt;h5&gt;a. Databank statement&lt;/h5&gt;
&lt;p&gt;Initially, the databank selection is hard-coded into my module, with &lt;code class="language-text"&gt;hitran&lt;/code&gt; for LTE cases and &lt;code class="language-text"&gt;hitemp&lt;/code&gt; for non-LTE cases. In this case, Mr. Minou’s spectrum is an LTE one, but he used &lt;code class="language-text"&gt;hitemp&lt;/code&gt; databank for calculation. Basically, for CO molecule, there are lines in &lt;code class="language-text"&gt;hitemp&lt;/code&gt; databank that are missing in &lt;code class="language-text"&gt;hitran&lt;/code&gt; databank, and thus the default &lt;code class="language-text"&gt;hitran&lt;/code&gt; for LTE does not provide a good result for Mr. Minou’s case.&lt;/p&gt;
&lt;p&gt;Thus, I make an implementation that allows users to specify the databank to be fetched into SpectrumFactory with &lt;code class="language-text"&gt;fetch_databank&lt;/code&gt;, by stating it directly in the script, as you can see above in &lt;code class="language-text"&gt;experimental_conditions&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;b. Allow &lt;code class="language-text"&gt;offset&lt;/code&gt; to be fitted&lt;/h5&gt;
&lt;p&gt;Previously, as &lt;code class="language-text"&gt;offset&lt;/code&gt; and &lt;code class="language-text"&gt;slit&lt;/code&gt; are not parameters of &lt;code class="language-text"&gt;calc_spectrum()&lt;/code&gt;, but instead post-calculation convolution steps, so I did not include them as fit parameters. Now &lt;code class="language-text"&gt;offset&lt;/code&gt; is included and can be fitted as you can see above. As for &lt;code class="language-text"&gt;slit&lt;/code&gt;, according to Mr. Minou, usually the users know their FTIR spectrometer’s stats, and measure slit separately, so I have yet implemeted &lt;code class="language-text"&gt;slit&lt;/code&gt; as fittable parameter.&lt;/p&gt;
&lt;h4&gt;3. Result&lt;/h4&gt;
&lt;p&gt;Finally, we can see a not-perfect-but-good-enough result:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/178b6fac46562dfaf07965c4cb5ebe13/9451d/result.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Fitting result of Mr. Minou's case." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/178b6fac46562dfaf07965c4cb5ebe13/f058b/result.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Fitting result of Mr. Minou's case."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;With best-fit parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;Tgas&lt;/code&gt; : 6657.56 K (initially 7000 K).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;mole_fraction&lt;/code&gt; : 0.052 (initially 0.05).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;offset&lt;/code&gt; : -0.0177 cm-1 (initially 0 cm-1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the fitting performance, which is really, really robust:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fitting method: L-BFGS-B.&lt;/li&gt;
&lt;li&gt;Number of fitting loops: 120.&lt;/li&gt;
&lt;li&gt;Total fitting time: 4.3125 s.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To explain the discrepancy between experimental and best-fit spectra, Mr. Minou suggests that, this is some of physical problems, as RADIS currently only uses the air broadening parameters while originally he did this experiment in Argon. Future updates on other molecules’ broadening coefficients will be needed to increase the accuracy of these cases with non-air diluents.&lt;/p&gt;
&lt;p&gt;And so that’s it! My first complete case has done, and I have much better confidence in my fitting module, while being eager to confront other cases and gradually improve my module. This is such a good birthday evening.&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/08/20220807_0000_tranhuunhathuy/</guid><pubDate>Sat, 06 Aug 2022 23:00:00 GMT</pubDate></item><item><title>First evaluation - Final rush for first milestone, advices from mentors, and keep going!</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220724_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;In this final week, I fully dedicate myself into user-testing cases. As pointed out by Mr. Erwan Pannier, &lt;em&gt;“Things will definitely change after user feedback so don’t waste too much time before that”&lt;/em&gt;. Thus, I must quickly bring up several notebooks for the users - our spectroscopic scientists - to test and provide feedbacks, and from then I can shape my fitting modules closer to the real usages and needs. Firstly, I will talk about several additional updates in this final week of phase 1:&lt;/p&gt;
&lt;h4&gt;1. Non-LTE support&lt;/h4&gt;
&lt;p&gt;Now the fitting module supports non-LTE input. The module will automatically switch to non-LTE mode when &lt;code class="language-text"&gt;Tvib&lt;/code&gt; is detected inside the input meterials.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If there are more than one &lt;code class="language-text"&gt;Tvib&lt;/code&gt; due to non-diatomic molecules having more than one vibrational temperatures, the input of &lt;code class="language-text"&gt;Tvib&lt;/code&gt; will be either &lt;code class="language-text"&gt;tuple&lt;/code&gt; or &lt;code class="language-text"&gt;list&lt;/code&gt;, and thus needed to be treated differently. For this, the procedure is gonna be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;After &lt;code class="language-text"&gt;Tvib&lt;/code&gt; is detected as a fitting parameter within &lt;code class="language-text"&gt;fit&lt;/code&gt;, if it is in type of either &lt;code class="language-text"&gt;tuple&lt;/code&gt; or &lt;code class="language-text"&gt;list&lt;/code&gt;, each of the constituting temperature will then be extracted, and assigned a number after it, for example, &lt;code class="language-text"&gt;Tvib1&lt;/code&gt;, &lt;code class="language-text"&gt;Tvib2&lt;/code&gt;, and so on.&lt;/li&gt;
&lt;li&gt;Then, these separated temperatures will be assigned to a Parameter object and from here, they will be treated as an individual fitting parameter, which will altogether enter the fitting process.&lt;/li&gt;
&lt;li&gt;After fitting process, all Parameter objects with &lt;code class="language-text"&gt;Tvib&lt;/code&gt; in their names will be collected and merged into the original &lt;code class="language-text"&gt;Tvib&lt;/code&gt; array.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2. Format refactor - more flexible ways to input&lt;/h4&gt;
&lt;p&gt;As I mentioned last week, the new fitting module should also support in-script JSON structure, because as Mr. Erwan Pannier pointed out, people would prefer adjusting everything within a single script, rather than switching between windows just to adjust a separated JSON file. So now the idea is to have 2 ways of input: either through in-script &lt;code class="language-text"&gt;JSON&lt;/code&gt; structures, or through an external &lt;code class="language-text"&gt;JSON&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Now the users can either use a separated JSON file as input, or directly input a bunch of &lt;code class="language-text"&gt;dict&lt;/code&gt; parameters.&lt;/p&gt;
&lt;p&gt;For example, when using JSON file:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;&lt;span class="token comment"&gt;# Get JSON file path (note that the experimental spectrum file MUST BE IN THE SAME FOLDER containing JSON file)&lt;/span&gt;
JSON_path &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;"../test_dir/test_JSON_file.json"&lt;/span&gt;

&lt;span class="token comment"&gt;# Conduct the fitting process!&lt;/span&gt;
s_best&lt;span class="token punctuation"&gt;,&lt;/span&gt; result&lt;span class="token punctuation"&gt;,&lt;/span&gt; log &lt;span class="token operator"&gt;=&lt;/span&gt; fit_spectrum&lt;span class="token punctuation"&gt;(&lt;/span&gt;input_file &lt;span class="token operator"&gt;=&lt;/span&gt; JSON_path&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when inputting a bunch of &lt;code class="language-text"&gt;dict&lt;/code&gt; parameters (pure Python way):&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;&lt;span class="token comment"&gt;# Load experimental spectrum. You can prepare yours, or fetch one of them in the ground-truth folder like below.&lt;/span&gt;
s_experimental &lt;span class="token operator"&gt;=&lt;/span&gt; load_spec&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;"./data/LTE/ground-truth/synth-NH3-1-500-2000-cm-1-P10-t1000-v-r-mf0.01-p1-sl1nm.spec"&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;

&lt;span class="token comment"&gt;# Experimental conditions which will be used for spectrum modeling. Basically, these are known ground-truths.&lt;/span&gt;
experimental_conditions &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"molecule"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"NH3"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;         &lt;span class="token comment"&gt;# Molecule ID&lt;/span&gt;
&lt;span class="token string"&gt;"isotope"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Isotope ID, can have multiple at once&lt;/span&gt;
&lt;span class="token string"&gt;"wmin"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;              &lt;span class="token comment"&gt;# Starting wavelength/wavenumber to be cropped out from the original experimental spectrum.&lt;/span&gt;
&lt;span class="token string"&gt;"wmax"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1050&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;              &lt;span class="token comment"&gt;# Ending wavelength/wavenumber for the cropping range.&lt;/span&gt;
&lt;span class="token string"&gt;"wunit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"cm-1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;           &lt;span class="token comment"&gt;# Accompanying unit of those 2 wavelengths/wavenumbers above.&lt;/span&gt;
&lt;span class="token string"&gt;"mole_fraction"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.01&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;     &lt;span class="token comment"&gt;# Species mole fraction, from 0 to 1.&lt;/span&gt;
&lt;span class="token string"&gt;"pressure"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;10&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Partial pressure of gas, in "bar" unit.&lt;/span&gt;
&lt;span class="token string"&gt;"path_length"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;          &lt;span class="token comment"&gt;# Experimental path length, in "cm" unit.&lt;/span&gt;
&lt;span class="token string"&gt;"slit"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1 nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;            &lt;span class="token comment"&gt;# Experimental slit, must be a blank space separating slit amount and unit.&lt;/span&gt;
&lt;span class="token string"&gt;"offset"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"-0.2 nm"&lt;/span&gt;        &lt;span class="token comment"&gt;# Experimental offset, must be a blank space separating offset amount and unit.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# List of parameters to be fitted.&lt;/span&gt;
fit_parameters &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"Tgas"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;700&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;               &lt;span class="token comment"&gt;# Fit parameter, accompanied by its initial value.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# List of bounding ranges applied for those fit parameters above.&lt;/span&gt;
bounding_ranges &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"Tgas"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;600&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;2000&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;       &lt;span class="token comment"&gt;# Bounding ranges for each fit parameter stated above. You can skip this step, but not recommended.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# Fitting pipeline setups.&lt;/span&gt;
fit_properties &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token string"&gt;"method"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"lbfgsb"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;        &lt;span class="token comment"&gt;# Preferred fitting method from the 17 confirmed methods of LMFIT stated in week 4 blog. By default, "leastsq".&lt;/span&gt;
&lt;span class="token string"&gt;"fit_var"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"radiance"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;     &lt;span class="token comment"&gt;# Spectral quantity to be extracted for fitting process, such as "radiance", "absorbance", etc.&lt;/span&gt;
&lt;span class="token string"&gt;"normalize"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token boolean"&gt;False&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;        &lt;span class="token comment"&gt;# Either applying normalization on both spectra or not.&lt;/span&gt;
&lt;span class="token string"&gt;"max_loop"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;150&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;           &lt;span class="token comment"&gt;# Max number of loops allowed. By default, 100.&lt;/span&gt;
&lt;span class="token string"&gt;"tol"&lt;/span&gt; &lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1e-10&lt;/span&gt;               &lt;span class="token comment"&gt;# Fitting tolerance, only applicable for "lbfgsb" method.&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;

&lt;span class="token comment"&gt;# Conduct the fitting process!&lt;/span&gt;
s_best&lt;span class="token punctuation"&gt;,&lt;/span&gt; result&lt;span class="token punctuation"&gt;,&lt;/span&gt; log &lt;span class="token operator"&gt;=&lt;/span&gt; fit_spectrum&lt;span class="token punctuation"&gt;(&lt;/span&gt;
s_exp &lt;span class="token operator"&gt;=&lt;/span&gt; s_experimental&lt;span class="token punctuation"&gt;,&lt;/span&gt;
fit_params &lt;span class="token operator"&gt;=&lt;/span&gt; fit_parameters&lt;span class="token punctuation"&gt;,&lt;/span&gt;
bounds &lt;span class="token operator"&gt;=&lt;/span&gt; bounding_ranges&lt;span class="token punctuation"&gt;,&lt;/span&gt;
model &lt;span class="token operator"&gt;=&lt;/span&gt; experimental_conditions&lt;span class="token punctuation"&gt;,&lt;/span&gt;
pipeline &lt;span class="token operator"&gt;=&lt;/span&gt; fit_properties
&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, this will be much more flexible for the users to input the ground-truth data and parameters.&lt;/p&gt;
&lt;h4&gt;3. Sample notebooks and test files&lt;/h4&gt;
&lt;p&gt;To support the user-testing process, 4 sample Jupyter notebooks and 4 corresponding Python test files have been added. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/8400844d0a6880d50b65b66f8f8443d3/sample_LTE_Tgas.ipynb"&gt;&lt;code class="language-text"&gt;sample_LTE_Tgas.ipynb&lt;/code&gt;&lt;/a&gt; : LTE fitting case, with &lt;code class="language-text"&gt;Tgas&lt;/code&gt; as fit parameter, multiple-dict input.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/25a15b8b2ffbe5d4f45a3abac687d7bc/sample_LTE_Tgas-molfrac.ipynb"&gt;&lt;code class="language-text"&gt;sample_LTE_Tgas-molfrac.ipynb&lt;/code&gt;&lt;/a&gt; : LTE fitting case, with &lt;code class="language-text"&gt;Tgas&lt;/code&gt; and &lt;code class="language-text"&gt;mole_fraction&lt;/code&gt; as fit parameters, multiple-dict input.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/6c8401dc960f424c43da01b84f066926/sample_LTE-with-JSON_Tgas.ipynb"&gt;&lt;code class="language-text"&gt;sample_LTE-with-JSON_Tgas.ipynb&lt;/code&gt;&lt;/a&gt; : LTE fitting case, with &lt;code class="language-text"&gt;Tgas&lt;/code&gt; as fit parameter, JSON file input.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/3a7118b0d09be64d598dff8d16e7cff6/sample_nonLTE_1Tvib-Trot.ipynb"&gt;&lt;code class="language-text"&gt;sample_nonLTE_1Tvib-Trot.ipynb&lt;/code&gt;&lt;/a&gt; : non-LTE fitting case, with 1 &lt;code class="language-text"&gt;Tvib&lt;/code&gt; and 1 &lt;code class="language-text"&gt;Trot&lt;/code&gt; as fit parameters, multiple-dict input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, as the first evaluation is drawing near, and the fact that my fitting module for 1st phase is fundamentally finished (there might be some bugs, but now it’s just time for bug reporting, debugging and keep it that way), I believe now it’s a good time for me to reflect my progress during this first phase, and to plan accordingly for the next phase. Thus, I decide to ask my mentors to discuss about the current progress, and future plans as well. Also, I hope to receive several reviews about my work attitude, current impression of phase 1, and the current state of evaluation and room for improvements, too. Turned out that the comments are quite good, better than I expected. The only thing that I need to improve is, welp, don’t asking &lt;em&gt;too much&lt;/em&gt; feedbacks, but instead just focus on the content and quality of the module development.&lt;/p&gt;
&lt;p&gt;I would like to conclude this final blog of phase 1 with words from Mr. Erwan Pannier:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In other words : this is not a school-project. There is no right/wrong/expectations that you should.
Just work, deliver, try things, fail, change direction, try again, succeed. But focus on the content, and focus on delivering a great product.
In your case, a great fitting routine. When you will be happy with what you’ve done, people will follow.&lt;/p&gt;
&lt;/blockquote&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220724_0000_tranhuunhathuy/</guid><pubDate>Sat, 23 Jul 2022 23:00:00 GMT</pubDate></item><item><title>Fifth week - Major updates on literally everything, and non-LTE benchmarking</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220717_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;&lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/b6a43fd435ed51da926a7346d2f66de9/JSON_sample.json"&gt;JSON sample&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;1. Fitting method benchmarking&lt;/h4&gt;
&lt;p&gt;The ideal of benchmarking result is to test and assess under what conditions, such as fitting method, pipeline, refinement, etc., the fitting process can achieve a stable and robust result. Firstly, I want to test the fitting method and see which ones are the best to put into the module as the default method. As we use LMFIT.Minimizer, we have 23 fitting methods in total:&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;: Levenberg-Marquardt (default).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;least_squares&lt;/code&gt;: Least-Squares minimization, using Trust Region Reflective method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;differential_evolution&lt;/code&gt;: differential evolution.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;brute&lt;/code&gt;: brute force method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;basinhopping&lt;/code&gt;: Basin-hopping method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;ampgo&lt;/code&gt;: Adaptive Memory Programming for Global Optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;nelder&lt;/code&gt;: Nelder-Mead.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;: Limited-memory Broyden–Fletcher–Goldfarb–Shanno (L-BFGS-B).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;powell&lt;/code&gt;: Powell’s method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;cg&lt;/code&gt;: Conjugate-Gradient.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;newton&lt;/code&gt;: Newton-Conjugate-Gradient.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;cobyla&lt;/code&gt;: Cobyla.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;bfgs&lt;/code&gt;: Broyden–Fletcher–Goldfarb–Shanno (BFGS).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;tnc&lt;/code&gt;: Truncated Newton.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-ncg&lt;/code&gt;: Newton-Conjugate-Gradient trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-exact&lt;/code&gt;: nearly exact trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-krylov&lt;/code&gt;: Newton’s Generalized Lanczos Trust-Region (GLTR).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-constr&lt;/code&gt;: trust-region for constrained optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;dogleg&lt;/code&gt;: Dog-leg trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;slsqp&lt;/code&gt;: Sequential Linear Squares Programming.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;emcee&lt;/code&gt;: Maximum likelihood via Monte-Carlo Markov Chain.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;shgo&lt;/code&gt;: Simplicial Homology Global Optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;dual_annealing&lt;/code&gt;: Dual Annealing optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this list, there are 5 methods - &lt;code class="language-text"&gt;newton&lt;/code&gt;, &lt;code class="language-text"&gt;trust-ncg&lt;/code&gt;, &lt;code class="language-text"&gt;trust_exact&lt;/code&gt;, &lt;code class="language-text"&gt;trust-krylov&lt;/code&gt; and &lt;code class="language-text"&gt;dogleg&lt;/code&gt; - that require Jacobian function to work, which adds more complexity into our fitting process and codebase, hence I remove them from the benchmark and never use them again. There are also &lt;code class="language-text"&gt;emcee&lt;/code&gt; method that, for some unknown reasons, the fitting procedure never stops even after passing the loop limit, thus I have to remove it. Now we have 17 methods left that are stable enough to compare. Additionally, I set the max number of fitting loops as 200, so this means that any method that have equal of higher than 200 loops means that they are most likely unable to stop. I will conduct benchmarking process on the &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um.spec&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;The result for this method-comparing benchmark can be found in &lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/method_comparison.txt"&gt;this JSON file&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Method&lt;/th&gt;
&lt;th align="center"&gt;Last residual&lt;/th&gt;
&lt;th align="center"&gt;Number of loops&lt;/th&gt;
&lt;th align="center"&gt;Processing time (s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;leastsq&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042272&lt;/td&gt;
&lt;td align="center"&gt;17&lt;/td&gt;
&lt;td align="center"&gt;6.128568887710571&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;least_squares&lt;/td&gt;
&lt;td align="center"&gt;0.0027299046347&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;3.8792104721069336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;differential_evolution&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042330&lt;/td&gt;
&lt;td align="center"&gt;48&lt;/td&gt;
&lt;td align="center"&gt;7.211840629577637&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;brute&lt;/td&gt;
&lt;td align="center"&gt;0.0027847218345&lt;/td&gt;
&lt;td align="center"&gt;20&lt;/td&gt;
&lt;td align="center"&gt;3.13600492477417&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;basinhopping&lt;/td&gt;
&lt;td align="center"&gt;0.0030471725482&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;31.650216579437256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ampgo&lt;/td&gt;
&lt;td align="center"&gt;0.0027301332094&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;36.60996413230896&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;nelder&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042330&lt;/td&gt;
&lt;td align="center"&gt;48&lt;/td&gt;
&lt;td align="center"&gt;7.532714605331421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;lbfgsb&lt;/td&gt;
&lt;td align="center"&gt;0.0027299043815&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;1.8955962657928467&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;powell&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042271&lt;/td&gt;
&lt;td align="center"&gt;38&lt;/td&gt;
&lt;td align="center"&gt;6.310025691986084&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;cg&lt;/td&gt;
&lt;td align="center"&gt;0.0027299046922&lt;/td&gt;
&lt;td align="center"&gt;34&lt;/td&gt;
&lt;td align="center"&gt;5.223567724227905&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;cobyla&lt;/td&gt;
&lt;td align="center"&gt;0.0027299044752&lt;/td&gt;
&lt;td align="center"&gt;22&lt;/td&gt;
&lt;td align="center"&gt;3.028048515319824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;bfgs&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042351&lt;/td&gt;
&lt;td align="center"&gt;20&lt;/td&gt;
&lt;td align="center"&gt;2.9560532569885254&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;tnc&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042284&lt;/td&gt;
&lt;td align="center"&gt;36&lt;/td&gt;
&lt;td align="center"&gt;5.905533313751221&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;trust-constr&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042271&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;2.3700413703918457&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;slsqp&lt;/td&gt;
&lt;td align="center"&gt;0.0027299969016&lt;/td&gt;
&lt;td align="center"&gt;18&lt;/td&gt;
&lt;td align="center"&gt;3.160074472427368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;shgo&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042272&lt;/td&gt;
&lt;td align="center"&gt;32&lt;/td&gt;
&lt;td align="center"&gt;6.185185194015503&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;dual_annealing&lt;/td&gt;
&lt;td align="center"&gt;0.0221619241989&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;32.40411591529846&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;(It is important to remember that this result might differ for each run, but rest assure the common trend is unchanged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the data above, we have &lt;code class="language-text"&gt;basinhopping&lt;/code&gt;, &lt;code class="language-text"&gt;ampgo&lt;/code&gt; and &lt;code class="language-text"&gt;dual_annealing&lt;/code&gt; jumping out of the loop limit of 200, and it’s totally not a good thing, which I would like to exclude them out for the sake of better visualization. Then, in order to compare the rest of 14 methods, I have a scatter plot below in which I focus on analyzing the &lt;code class="language-text"&gt;last_residual&lt;/code&gt; - indicator of accuracy - on the horizontal axis, and &lt;code class="language-text"&gt;loops&lt;/code&gt; - indicator of fitting iterations needed - on the vertical axis. As &lt;code class="language-text"&gt;time&lt;/code&gt; is heavily influenced by the computational capacity of each device, I don’t prioritize it than other two criteria in the result assessment, and thus it is indicated by color code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Scatter plot of the result." src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/result_plot.png"&gt;&lt;/p&gt;
&lt;p&gt;If we zoom in the best 8 cases marked by the red rectangle above:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Best 8" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/result_zoomed.png"&gt;&lt;/p&gt;
&lt;p&gt;In the zoomed figure, the result is quite satisfying as I expected. When we talk about the most famous curve-fitting algorithms, we can mention either &lt;code class="language-text"&gt;leastsq&lt;/code&gt;/&lt;code class="language-text"&gt;least_squares&lt;/code&gt; or &lt;code class="language-text"&gt;bfgs&lt;/code&gt;/&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;, and now we can see them taking 4 out of top 5. Now let’s focus on the two competitors: &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and &lt;code class="language-text"&gt;least_squares&lt;/code&gt; and get some observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; has a little lower residual and so a little bit better in accuracy than &lt;code class="language-text"&gt;least_squares&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Although approximately same fitting loops (12 and 14), the time required for &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; is 1.895596s, significantly lower than &lt;code class="language-text"&gt;least_squares&lt;/code&gt; of 3.879210s. We can also see this behavior in their neighbors: &lt;code class="language-text"&gt;bfgs&lt;/code&gt; (2.956053s) &amp;lt; &lt;code class="language-text"&gt;leastsq&lt;/code&gt; (6.128569s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is explainable. While &lt;code class="language-text"&gt;least_squares&lt;/code&gt; simply calculating and minimizing the sum of the residuals of points from the comparative curves, &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; - Limited-memory BFGS uses a limited amount of computer memory to conduct &lt;a href="https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm"&gt;Broyden-Fletcher-Goldfarb-Shanno algorithm&lt;/a&gt; for the minimization.&lt;/p&gt;
&lt;p&gt;So for now, I have initial assumption that &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; performs slightly better than &lt;code class="language-text"&gt;leastsq&lt;/code&gt;. After conducting fitting process on other spectra, the &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and &lt;code class="language-text"&gt;leastsq&lt;/code&gt; are seem to be dominant in terms of speed (based on number of loops and time elapsed) and accuracy (this depends a little bit on pipeline combination, which will be addressed in next part) compared to other methods. However, more benchmarks are needed to confirm my initla assumption.&lt;/p&gt;
&lt;h4&gt;2. Fitting pipeline comparison&lt;/h4&gt;
&lt;p&gt;Next is the benchmarking process focusing on pipeline comparison. A fitting pipeline comprises of several options, from spectrum refinement methods such as which spectral quantity to take, whether applying normalization on both spectra or not, or simply just fitting process preferences such as maxinum number of fitting loops allowed, or fitting method, or max fitting tolerance. While in the new JSON structure the users are free to adjust all of them, through this benchmarking process I would like acquire more understandings about how these pipeline might affect the quality of a fitting work.&lt;/p&gt;
&lt;p&gt;In order to assess a fitting’s quality, I use the synthetic spectra that I generated on week 1. Although they are heavily convoluted with noises and offsets, since they are software-generated, we can know what are the experimental properties (such as &lt;code class="language-text"&gt;path_length&lt;/code&gt;, &lt;code class="language-text"&gt;slit&lt;/code&gt;, etc.). Meanwhile, regarding the experimental spectrum &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um&lt;/code&gt;, we are definitely not sure those parameters (in fact, we don’t even know whether it is LTE or non-LTE). So, I decided to test on 7 synthetic spectra:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO-1-1800-2300-cm-1-P3-t1500-v-r-mf0.1-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-500-1100-cm-1-P2-t900-v-r-mf0.5-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-500-3000-cm-1-P93-t740-v-r-mf0.96-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-3300-3700-cm-1-P0.005-t3000-v-r-mf0.01-p1-sl1.4nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-H2O-1-1000-2500-cm-1-P0.5-t1500-v-r-mf0.5-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-NH3-1-500-2000-cm-1-P10-t1000-v-r-mf0.01-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-O2-1-7500-8000-cm-1-P1.01325-t298.15-v-r-mf0.21-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each spectra, I will modify the pipeline’s &lt;code class="language-text"&gt;method&lt;/code&gt; and &lt;code class="language-text"&gt;normalize&lt;/code&gt; properties, until the best possible fitting result is achieved - least fitting loops, and closest to the ground-truth (GT) temperature (this is why I prefer synthetic over experimental spectra, as I explained above). Here is the result:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Spec No.&lt;/th&gt;
&lt;th align="center"&gt;GT Temp&lt;/th&gt;
&lt;th align="center"&gt;Start Temp&lt;/th&gt;
&lt;th align="center"&gt;Best Temp&lt;/th&gt;
&lt;th align="center"&gt;Method&lt;/th&gt;
&lt;th align="center"&gt;Normalize&lt;/th&gt;
&lt;th align="center"&gt;Diff&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1500&lt;/td&gt;
&lt;td align="center"&gt;1300&lt;/td&gt;
&lt;td align="center"&gt;1468.97&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/1.png"&gt;1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;900&lt;/td&gt;
&lt;td align="center"&gt;1300&lt;/td&gt;
&lt;td align="center"&gt;898.84&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/2.png"&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;740&lt;/td&gt;
&lt;td align="center"&gt;1000&lt;/td&gt;
&lt;td align="center"&gt;~740&lt;/td&gt;
&lt;td align="center"&gt;both&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/3.png"&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;3000&lt;/td&gt;
&lt;td align="center"&gt;2850&lt;/td&gt;
&lt;td align="center"&gt;3003.52&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/4.png"&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;1500&lt;/td&gt;
&lt;td align="center"&gt;2000&lt;/td&gt;
&lt;td align="center"&gt;1507.25&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;true&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/5.png"&gt;5&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;1000&lt;/td&gt;
&lt;td align="center"&gt;2250&lt;/td&gt;
&lt;td align="center"&gt;994.90&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/6.png"&gt;6&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;298.15&lt;/td&gt;
&lt;td align="center"&gt;660&lt;/td&gt;
&lt;td align="center"&gt;297.86&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/7.png"&gt;7&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see from the table above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All spectra achieve near-perfect best fit results. This is because we have perfect ground-truth conditions. In real-life circumstances, such accurate ground-truth is virtually impossible to achieve, but this is the job of fitting users to measure and set them.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt; performs quite good in most case. This is quite surprising after the result from &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um.spec&lt;/code&gt;, but it can be explained as most likely we didn’t use the correct ground-truth conditions for it since we don’t know (seriously, who created that spectrum?). However, there is a small observation from me that, those cases where &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; lost agains &lt;code class="language-text"&gt;leastsq&lt;/code&gt; were primarily because of number of loops. Still, it’s a win for &lt;code class="language-text"&gt;leastsq&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Their neighbors, &lt;code class="language-text"&gt;least_squares&lt;/code&gt; and &lt;code class="language-text"&gt;bfgs&lt;/code&gt;, are completely underdogs. We don’t even need to mention other methods.&lt;/li&gt;
&lt;li&gt;In nearly all the best cases, &lt;code class="language-text"&gt;normalize = false&lt;/code&gt; is set. This is quite explainable, the more originality the better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Summary&lt;/h4&gt;
&lt;p&gt;After all the benchmarking works above, I have decided to set the &lt;code class="language-text"&gt;leastsq&lt;/code&gt; as the default fitting method, in case users don’t state the method explicitly in JSON file. Later on, in the fitting tutorial, I will add some suggestions about using &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and trying to switch the &lt;code class="language-text"&gt;normalize&lt;/code&gt; in case their fitting work is not quite good.&lt;/p&gt;
&lt;p&gt;Nevertheless, these benchmarks helped me gain more insights about the performance of my fitting module, and most importantly, let me experience the feeling of a spectroscopist trying to fit his spectra - playing around the parameters, adjusting parameters and praying for a good result to come. Quite a physically and mentally exhausting work to be honest, since whenever the result went wrong, I didn’t know whether the error came from ground-truth conditions, or from my fitting module. There have been days and nights I sat in front of my laptop adjusting the JSON files and codebase continuously. But finally, the benchmarking process for LTE spectra is good now, and I am quite confident in my fitting module. Now let’s move on to the non-LTE spectra!&lt;/p&gt;
&lt;p&gt;&lt;img alt="A footage of me turning parameters up and down like a DJ" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/meme.jpg"&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220717_0000_tranhuunhathuy/</guid><pubDate>Sat, 16 Jul 2022 23:00:00 GMT</pubDate></item><item><title>Fourth week - Intensive benchmarking process for LTE spectra</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220710_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;As my fitting module has completed, now I am clear to start the benchmarking process. Initially, I planned to do it on 4 categories: large, small, LTE and non-LTE. But then, Mr. Erwan’s words helped me realize that my classification was somehow not ideal for this, as he said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first need is not fitting performance, its a good fitting interface they would work on every typical condition.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Do not wasting time trying to determine a perfect threshold or categories.&lt;/p&gt;
&lt;p&gt;Work on real-life examples. CO2 4.2 - 5 µm is one.&lt;/p&gt;
&lt;p&gt;CO2 bandhead (the Single Temperature fit example) is another one.&lt;/p&gt;
&lt;p&gt;Works on the improving the fits from these real-life examples,
and - maybe - you’ll generalize to categories/classifications eventually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be honest, I have been thinking about changing my project timeline and objectives a little bit. Initially, I proposed the timeline in which I would spend 1 week for making the module, and 4 weeks to conduct benchmarking on 4 types of spectrum (large, small, LTE, non-LTE). But then, I encountered a lot of difficulties in conducting the fitting process, which significantly delays my fitting module to be completed in the end of week 3. Along with Mr. Erwan’s suggestions, after careful considerations, I have decided to reduce the category to only 2 groups of LTE and non-LTE spectra, and propose a new timeline based on that with my mentors, which successfully acquired their approvals. The new timeline is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Week 4 (this week): conduct benchmarking process on LTE spectra.&lt;/li&gt;
&lt;li&gt;Week 5: conduct benchmarking process on non-LTE spectra.&lt;/li&gt;
&lt;li&gt;Week 6: implement the fitting module and fitting models into RADIS codebase, finish any documentations, create a 101 tutorial, and prepare for first evaluation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this new timeline, the last week is going to be the toughest time ever! But I will try my best to catch up with the deadlines once and for all. I must admit that after half the first phase, I realized that my expected timeline in my project proposal - derived from my initial understandings of RADIS and fitting - is quite not applicable. As Mr. Minou - one of my mentors, said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t worry about changing the objectives . Some difficulties usually come up only when the project begins and cannot
be easily anticipated. New directions seem fine to me and you are on the right path.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As well as Mr. Erwan:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just keep on progressing on the project as you do, reevaluating needs if needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have more confidence in keeping on with my plan. This new approach, hopefully, will allow me to finish implementing the fitting module into RADIS by the end of first phase. Quite an intensive experience for me but, let’s go anyway! So here are the benchmarking results for our LTE experimental spectra, in which I will focus on comparison between fitting methods, and between refinement pipelines.&lt;/p&gt;
&lt;h4&gt;1. Fitting method benchmarking&lt;/h4&gt;
&lt;p&gt;The ideal of benchmarking result is to test and assess under what conditions, such as fitting method, pipeline, refinement, etc., the fitting process can achieve a stable and robust result. Firstly, I want to test the fitting method and see which ones are the best to put into the module as the default method. As we use LMFIT.Minimizer, we have 23 fitting methods in total:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;: Levenberg-Marquardt (default).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;least_squares&lt;/code&gt;: Least-Squares minimization, using Trust Region Reflective method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;differential_evolution&lt;/code&gt;: differential evolution.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;brute&lt;/code&gt;: brute force method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;basinhopping&lt;/code&gt;: Basin-hopping method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;ampgo&lt;/code&gt;: Adaptive Memory Programming for Global Optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;nelder&lt;/code&gt;: Nelder-Mead.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;: Limited-memory Broyden–Fletcher–Goldfarb–Shanno (L-BFGS-B).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;powell&lt;/code&gt;: Powell’s method.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;cg&lt;/code&gt;: Conjugate-Gradient.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;newton&lt;/code&gt;: Newton-Conjugate-Gradient.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;cobyla&lt;/code&gt;: Cobyla.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;bfgs&lt;/code&gt;: Broyden–Fletcher–Goldfarb–Shanno (BFGS).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;tnc&lt;/code&gt;: Truncated Newton.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-ncg&lt;/code&gt;: Newton-Conjugate-Gradient trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-exact&lt;/code&gt;: nearly exact trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-krylov&lt;/code&gt;: Newton’s Generalized Lanczos Trust-Region (GLTR).&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;trust-constr&lt;/code&gt;: trust-region for constrained optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;dogleg&lt;/code&gt;: Dog-leg trust-region.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;slsqp&lt;/code&gt;: Sequential Linear Squares Programming.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;emcee&lt;/code&gt;: Maximum likelihood via Monte-Carlo Markov Chain.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;shgo&lt;/code&gt;: Simplicial Homology Global Optimization.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;dual_annealing&lt;/code&gt;: Dual Annealing optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this list, there are 5 methods - &lt;code class="language-text"&gt;newton&lt;/code&gt;, &lt;code class="language-text"&gt;trust-ncg&lt;/code&gt;, &lt;code class="language-text"&gt;trust_exact&lt;/code&gt;, &lt;code class="language-text"&gt;trust-krylov&lt;/code&gt; and &lt;code class="language-text"&gt;dogleg&lt;/code&gt; - that require Jacobian function to work, which adds more complexity into our fitting process and codebase, hence I remove them from the benchmark and never use them again. There are also &lt;code class="language-text"&gt;emcee&lt;/code&gt; method that, for some unknown reasons, the fitting procedure never stops even after passing the loop limit, thus I have to remove it. Now we have 17 methods left that are stable enough to compare. Additionally, I set the max number of fitting loops as 200, so this means that any method that have equal of higher than 200 loops means that they are most likely unable to stop. I will conduct benchmarking process on the &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um.spec&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;The result for this method-comparing benchmark can be found in &lt;a href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/43e71f48257a8a3d444d530c8859e77b/method_comparison.txt"&gt;this JSON file&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Method&lt;/th&gt;
&lt;th align="center"&gt;Last residual&lt;/th&gt;
&lt;th align="center"&gt;Number of loops&lt;/th&gt;
&lt;th align="center"&gt;Processing time (s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;leastsq&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042272&lt;/td&gt;
&lt;td align="center"&gt;17&lt;/td&gt;
&lt;td align="center"&gt;6.128568887710571&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;least_squares&lt;/td&gt;
&lt;td align="center"&gt;0.0027299046347&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;3.8792104721069336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;differential_evolution&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042330&lt;/td&gt;
&lt;td align="center"&gt;48&lt;/td&gt;
&lt;td align="center"&gt;7.211840629577637&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;brute&lt;/td&gt;
&lt;td align="center"&gt;0.0027847218345&lt;/td&gt;
&lt;td align="center"&gt;20&lt;/td&gt;
&lt;td align="center"&gt;3.13600492477417&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;basinhopping&lt;/td&gt;
&lt;td align="center"&gt;0.0030471725482&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;31.650216579437256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ampgo&lt;/td&gt;
&lt;td align="center"&gt;0.0027301332094&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;36.60996413230896&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;nelder&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042330&lt;/td&gt;
&lt;td align="center"&gt;48&lt;/td&gt;
&lt;td align="center"&gt;7.532714605331421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;lbfgsb&lt;/td&gt;
&lt;td align="center"&gt;0.0027299043815&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;1.8955962657928467&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;powell&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042271&lt;/td&gt;
&lt;td align="center"&gt;38&lt;/td&gt;
&lt;td align="center"&gt;6.310025691986084&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;cg&lt;/td&gt;
&lt;td align="center"&gt;0.0027299046922&lt;/td&gt;
&lt;td align="center"&gt;34&lt;/td&gt;
&lt;td align="center"&gt;5.223567724227905&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;cobyla&lt;/td&gt;
&lt;td align="center"&gt;0.0027299044752&lt;/td&gt;
&lt;td align="center"&gt;22&lt;/td&gt;
&lt;td align="center"&gt;3.028048515319824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;bfgs&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042351&lt;/td&gt;
&lt;td align="center"&gt;20&lt;/td&gt;
&lt;td align="center"&gt;2.9560532569885254&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;tnc&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042284&lt;/td&gt;
&lt;td align="center"&gt;36&lt;/td&gt;
&lt;td align="center"&gt;5.905533313751221&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;trust-constr&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042271&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;2.3700413703918457&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;slsqp&lt;/td&gt;
&lt;td align="center"&gt;0.0027299969016&lt;/td&gt;
&lt;td align="center"&gt;18&lt;/td&gt;
&lt;td align="center"&gt;3.160074472427368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;shgo&lt;/td&gt;
&lt;td align="center"&gt;0.0027299042272&lt;/td&gt;
&lt;td align="center"&gt;32&lt;/td&gt;
&lt;td align="center"&gt;6.185185194015503&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;dual_annealing&lt;/td&gt;
&lt;td align="center"&gt;0.0221619241989&lt;/td&gt;
&lt;td align="center"&gt;201&lt;/td&gt;
&lt;td align="center"&gt;32.40411591529846&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;(It is important to remember that this result might differ for each run, but rest assure the common trend is unchanged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the data above, we have &lt;code class="language-text"&gt;basinhopping&lt;/code&gt;, &lt;code class="language-text"&gt;ampgo&lt;/code&gt; and &lt;code class="language-text"&gt;dual_annealing&lt;/code&gt; jumping out of the loop limit of 200, and it’s totally not a good thing, which I would like to exclude them out for the sake of better visualization. Then, in order to compare the rest of 14 methods, I have a scatter plot below in which I focus on analyzing the &lt;code class="language-text"&gt;last_residual&lt;/code&gt; - indicator of accuracy - on the horizontal axis, and &lt;code class="language-text"&gt;loops&lt;/code&gt; - indicator of fitting iterations needed - on the vertical axis. As &lt;code class="language-text"&gt;time&lt;/code&gt; is heavily influenced by the computational capacity of each device, I don’t prioritize it than other two criteria in the result assessment, and thus it is indicated by color code.&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/41c56cdd9aa439841d66bb9a01dd543d/29114/result_plot.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Scatter plot of the result." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/41c56cdd9aa439841d66bb9a01dd543d/f058b/result_plot.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Scatter plot of the result."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If we zoom in the best 8 cases marked by the red rectangle above:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/b03e6b2a34c2ea21d9bc963c5d6e7acf/29114/result_zoomed.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Best 8" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/b03e6b2a34c2ea21d9bc963c5d6e7acf/f058b/result_zoomed.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Best 8"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In the zoomed figure, the result is quite satisfying as I expected. When we talk about the most famous curve-fitting algorithms, we can mention either &lt;code class="language-text"&gt;leastsq&lt;/code&gt;/&lt;code class="language-text"&gt;least_squares&lt;/code&gt; or &lt;code class="language-text"&gt;bfgs&lt;/code&gt;/&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;, and now we can see them taking 4 out of top 5. Now let’s focus on the two competitors: &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and &lt;code class="language-text"&gt;least_squares&lt;/code&gt; and get some observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; has a little lower residual and so a little bit better in accuracy than &lt;code class="language-text"&gt;least_squares&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Although approximately same fitting loops (12 and 14), the time required for &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; is 1.895596s, significantly lower than &lt;code class="language-text"&gt;least_squares&lt;/code&gt; of 3.879210s. We can also see this behavior in their neighbors: &lt;code class="language-text"&gt;bfgs&lt;/code&gt; (2.956053s) &amp;lt; &lt;code class="language-text"&gt;leastsq&lt;/code&gt; (6.128569s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is explainable. While &lt;code class="language-text"&gt;least_squares&lt;/code&gt; simply calculating and minimizing the sum of the residuals of points from the comparative curves, &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; - Limited-memory BFGS uses a limited amount of computer memory to conduct &lt;a href="https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm"&gt;Broyden-Fletcher-Goldfarb-Shanno algorithm&lt;/a&gt; for the minimization.&lt;/p&gt;
&lt;p&gt;So for now, I have initial assumption that &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; performs slightly better than &lt;code class="language-text"&gt;leastsq&lt;/code&gt;. After conducting fitting process on other spectra, the &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and &lt;code class="language-text"&gt;leastsq&lt;/code&gt; are seem to be dominant in terms of speed (based on number of loops and time elapsed) and accuracy (this depends a little bit on pipeline combination, which will be addressed in next part) compared to other methods. However, more benchmarks are needed to confirm my initla assumption.&lt;/p&gt;
&lt;h4&gt;2. Fitting pipeline comparison&lt;/h4&gt;
&lt;p&gt;Next is the benchmarking process focusing on pipeline comparison. A fitting pipeline comprises of several options, from spectrum refinement methods such as which spectral quantity to take, whether applying normalization on both spectra or not, or simply just fitting process preferences such as maxinum number of fitting loops allowed, or fitting method, or max fitting tolerance. While in the new JSON structure the users are free to adjust all of them, through this benchmarking process I would like acquire more understandings about how these pipeline might affect the quality of a fitting work.&lt;/p&gt;
&lt;p&gt;In order to assess a fitting’s quality, I use the synthetic spectra that I generated on week 1. Although they are heavily convoluted with noises and offsets, since they are software-generated, we can know what are the experimental properties (such as &lt;code class="language-text"&gt;path_length&lt;/code&gt;, &lt;code class="language-text"&gt;slit&lt;/code&gt;, etc.). Meanwhile, regarding the experimental spectrum &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um&lt;/code&gt;, we are definitely not sure those parameters (in fact, we don’t even know whether it is LTE or non-LTE). So, I decided to test on 7 synthetic spectra:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO-1-1800-2300-cm-1-P3-t1500-v-r-mf0.1-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-500-1100-cm-1-P2-t900-v-r-mf0.5-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-500-3000-cm-1-P93-t740-v-r-mf0.96-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-CO2-1-3300-3700-cm-1-P0.005-t3000-v-r-mf0.01-p1-sl1.4nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-H2O-1-1000-2500-cm-1-P0.5-t1500-v-r-mf0.5-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-NH3-1-500-2000-cm-1-P10-t1000-v-r-mf0.01-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;synth-O2-1-7500-8000-cm-1-P1.01325-t298.15-v-r-mf0.21-p1-sl1nm.spec&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each spectra, I will modify the pipeline’s &lt;code class="language-text"&gt;method&lt;/code&gt; and &lt;code class="language-text"&gt;normalize&lt;/code&gt; properties, until the best possible fitting result is achieved - least fitting loops, and closest to the ground-truth (GT) temperature (this is why I prefer synthetic over experimental spectra, as I explained above). Here is the result:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Spec No.&lt;/th&gt;
&lt;th align="center"&gt;GT Temp&lt;/th&gt;
&lt;th align="center"&gt;Start Temp&lt;/th&gt;
&lt;th align="center"&gt;Best Temp&lt;/th&gt;
&lt;th align="center"&gt;Method&lt;/th&gt;
&lt;th align="center"&gt;Normalize&lt;/th&gt;
&lt;th align="center"&gt;Diff&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1500&lt;/td&gt;
&lt;td align="center"&gt;1300&lt;/td&gt;
&lt;td align="center"&gt;1468.97&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/1.png"&gt;1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;900&lt;/td&gt;
&lt;td align="center"&gt;1300&lt;/td&gt;
&lt;td align="center"&gt;898.84&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;lbfgsb&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/2.png"&gt;2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;740&lt;/td&gt;
&lt;td align="center"&gt;1000&lt;/td&gt;
&lt;td align="center"&gt;~740&lt;/td&gt;
&lt;td align="center"&gt;both&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/3.png"&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;3000&lt;/td&gt;
&lt;td align="center"&gt;2850&lt;/td&gt;
&lt;td align="center"&gt;3003.52&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/4.png"&gt;4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;1500&lt;/td&gt;
&lt;td align="center"&gt;2000&lt;/td&gt;
&lt;td align="center"&gt;1507.25&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;true&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/5.png"&gt;5&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;1000&lt;/td&gt;
&lt;td align="center"&gt;2250&lt;/td&gt;
&lt;td align="center"&gt;994.90&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/6.png"&gt;6&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;298.15&lt;/td&gt;
&lt;td align="center"&gt;660&lt;/td&gt;
&lt;td align="center"&gt;297.86&lt;/td&gt;
&lt;td align="center"&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt;&lt;/td&gt;
&lt;td align="center"&gt;false&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/TranHuuNhatHuy/my-2022-gsoc-journey/master/content/blog/5.%204th-week/7.png"&gt;7&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see from the table above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All spectra achieve near-perfect best fit results. This is because we have perfect ground-truth conditions. In real-life circumstances, such accurate ground-truth is virtually impossible to achieve, but this is the job of fitting users to measure and set them.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;leastsq&lt;/code&gt; performs quite good in most case. This is quite surprising after the result from &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um.spec&lt;/code&gt;, but it can be explained as most likely we didn’t use the correct ground-truth conditions for it since we don’t know (seriously, who created that spectrum?). However, there is a small observation from me that, those cases where &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; lost agains &lt;code class="language-text"&gt;leastsq&lt;/code&gt; were primarily because of number of loops. Still, it’s a win for &lt;code class="language-text"&gt;leastsq&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Their neighbors, &lt;code class="language-text"&gt;least_squares&lt;/code&gt; and &lt;code class="language-text"&gt;bfgs&lt;/code&gt;, are completely underdogs. We don’t even need to mention other methods.&lt;/li&gt;
&lt;li&gt;In nearly all the best cases, &lt;code class="language-text"&gt;normalize = false&lt;/code&gt; is set. This is quite explainable, the more originality the better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Summary&lt;/h4&gt;
&lt;p&gt;After all the benchmarking works above, I have decided to set the &lt;code class="language-text"&gt;leastsq&lt;/code&gt; as the default fitting method, in case users don’t state the method explicitly in JSON file. Later on, in the fitting tutorial, I will add some suggestions about using &lt;code class="language-text"&gt;lbfgsb&lt;/code&gt; and trying to switch the &lt;code class="language-text"&gt;normalize&lt;/code&gt; in case their fitting work is not quite good.&lt;/p&gt;
&lt;p&gt;Nevertheless, these benchmarks helped me gain more insights about the performance of my fitting module, and most importantly, let me experience the feeling of a spectroscopist trying to fit his spectra - playing around the parameters, adjusting parameters and praying for a good result to come. Quite a physically and mentally exhausting work to be honest, since whenever the result went wrong, I didn’t know whether the error came from ground-truth conditions, or from my fitting module. There have been days and nights I sat in front of my laptop adjusting the JSON files and codebase continuously. But finally, the benchmarking process for LTE spectra is good now, and I am quite confident in my fitting module. Now let’s move on to the non-LTE spectra!&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/83691995f7e77035e5034ccbfb1a61ff/41099/meme.jpg" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="A footage of me turning parameters up and down like a DJ" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/83691995f7e77035e5034ccbfb1a61ff/41099/meme.jpg" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="A footage of me turning parameters up and down like a DJ"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220710_0000_tranhuunhathuy/</guid><pubDate>Sat, 09 Jul 2022 23:00:00 GMT</pubDate></item><item><title>Third week - Finalizing fitting module after long days of struggling</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220703_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;To be honest, I started this week realizing I was far behind the deadline. After suffering a traumatizing fever which incapacitated me for one week, I had a fitting module which did not run correctly. Starting this week, the JSON parsing worked normally, but for some reasons the fitting process kept plummeting the &lt;code class="language-text"&gt;Tgas&lt;/code&gt; value either to very high or very low guesses, always out of the boundaries. What are they trying to seek? I don’t know. So, I have spent this third week trying my best to fix the fitting module and make it run normally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At first, I suspected this was a fault in the return of cost function, so I tried either &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.spectrum.compare.html#radis.spectrum.compare.get_diff"&gt;get_diff()&lt;/a&gt; or &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.spectrum.compare.html#radis.spectrum.compare.get_residual"&gt;get_residual()&lt;/a&gt;. The fitting process varied between the two approaches, but in the end the plummeting value prevailed.&lt;/li&gt;
&lt;!-- TEASER_END --&gt;
&lt;li&gt;Then, I thought my synthetic spectra were faulty, so I decided to regenerate and restructure them all over again, and the problem was still there.&lt;/li&gt;
&lt;li&gt;At this time I was still believing that the problem came from the difference between two spectra. So I tried my best to put the generation of two spectra as similar as possible, but still no progress.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was around this point that I received some mind-blowing feedbacks from Mr. Erwan Pannier - one of my mentors:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not wasting time trying to determine a perfect threshold or categories.&lt;/p&gt;
&lt;p&gt;Work on real-life examples. CO2 4.2 - 5 µm is one.&lt;/p&gt;
&lt;p&gt;CO2 bandhead (the Single Temperature fit example) is another one.&lt;/p&gt;
&lt;p&gt;Works on the improving the fits from these real-life examples,
and - maybe - you’ll generalize to categories/classifications eventually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At some point, I tried to use &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.spectrum.spectrum.html#radis.spectrum.spectrum.Spectrum.normalize"&gt;normalize()&lt;/a&gt;. My idea is, since my current fitting target is temperature, the experimental and model spectra can be both normalized, as the spectrum lineshape is determined by the component temperatures. After normalizing, things worked perfectly out of my expectation!&lt;/p&gt;
&lt;p&gt;And so, after one week of pure suffering and perseverance, I have finished the fitting module! So, there are 3 important parts of my fitting feature:&lt;/p&gt;
&lt;h4&gt;1. Input JSON file&lt;/h4&gt;
&lt;p&gt;A JSON file containing every information, from path to experimental spectrum file, to initial conditions - known parameters that will be used for calculating model spectra, and fit parameter(s) are also stated here. For example:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-json"&gt;&lt;code class="language-json"&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"fileName"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO2_measured_spectrum_4-5um.spec"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"molecule"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO2"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"isotope"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1,2"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wmin"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;4167&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wmax"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;4180&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wunit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"pressure"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1e-3&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"mole_fraction"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"path_length"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;10&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"slit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1.4 nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"fit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"Tgas"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1100&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"bound_Tgas"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;2000&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the JSON file above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="language-text"&gt;fileName&lt;/code&gt; : path to the &lt;code class="language-text"&gt;.spec&lt;/code&gt; spectrum file from &lt;code class="language-text"&gt;./data/&lt;/code&gt;, will be changed when implementing to RADIS codebase. For now the format is &lt;code class="language-text"&gt;&amp;lt;spectrum-type&amp;gt;/spectrum/&amp;lt;name&amp;gt;.spec&lt;/code&gt;. For example: &lt;code class="language-text"&gt;large/spectrum/CO2_measured_spectrum_4-5um.spec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Parameters from &lt;code class="language-text"&gt;molecule&lt;/code&gt; to &lt;code class="language-text"&gt;slit&lt;/code&gt; are used for calculating model spectrum later. &lt;code class="language-text"&gt;wmin&lt;/code&gt; and &lt;code class="language-text"&gt;wmax&lt;/code&gt; are used to determine the range of wavelength/wavenumber that will be cropped from original experimental spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code class="language-text"&gt;fit&lt;/code&gt; section contains fit parameters and their corresponding initial values or fitting bounds. In the example above, fit parameter &lt;code class="language-text"&gt;Tgas&lt;/code&gt; has initial value of 1100 and fitting bound [300, 2000].&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Fitting module &lt;code class="language-text"&gt;fitting_module.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Contains functions to load JSON file &lt;code class="language-text"&gt;get_JSON()&lt;/code&gt; and most importantly, &lt;code class="language-text"&gt;fit_spectrum()&lt;/code&gt; which receives only path of JSON file as input parameter, and will do all the fitting work for you.&lt;/p&gt;
&lt;p&gt;Firstly, when being called, &lt;code class="language-text"&gt;fit_spectrum()&lt;/code&gt; will call and parse the input path to &lt;code class="language-text"&gt;get_JSON()&lt;/code&gt; which reads necessary information from the JSON file. These information are returned to &lt;code class="language-text"&gt;fit_spectrum()&lt;/code&gt;, which will try to retrieve experimental data. Then, it crops, normalizes, removes NaN values, and some other refinements. Next, the read information and refined experimental spectrum will be sent to fitting models for the fitting process, which is described below.&lt;/p&gt;
&lt;h4&gt;3. Fitting models &lt;code class="language-text"&gt;model_LTE.py&lt;/code&gt; and &lt;code class="language-text"&gt;model_nonLTE.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;These 2 files contain &lt;code class="language-text"&gt;residual_LTE()&lt;/code&gt; - for LTE spectra, and &lt;code class="language-text"&gt;residual_NonLTE()&lt;/code&gt; - for non-LTE spectra (I haven’t developed this yet, will be done this week according to timeline), respectively. These functions receives refined experimental spectrum and initial conditions read from JSON file before, then calculate model spectrum, refine it, and return the residual/difference/cost between 2 spectra.&lt;/p&gt;
&lt;h4&gt;4. Initial result when fitting &lt;code class="language-text"&gt;CO2_measured_spectrum_4-5um.spec&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;I tried to recreate the same fitting scenario as &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html#sphx-glr-auto-examples-plot-1t-fit-py"&gt;1-temp fit example&lt;/a&gt;. The result of my module seems promising, with only 17 iterations compared to 32 iterations in the example.&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-text"&gt;&lt;code class="language-text"&gt;Succesfully finished the fitting process in 7.901483058929443s.
[[Fit Statistics]]
# fitting method   = leastsq
# function evals   = 17
# data points      = 1
# variables        = 1
chi-square         = 7.4524e-06
reduced chi-square = 7.4524e-06
Akaike info crit   = -9.80697750
Bayesian info crit = -11.8069775
[[Variables]]
Tgas:  1459.11902 +/- 26872889.5 (1841720.19%) (init = 1100)
e:\radis\radis\misc\warning.py:354: HighTemperatureWarning: HITRAN is valid for low temperatures (typically &amp;lt; 700 K). For higher temperatures you may need HITEMP or CDSD. See the 'databank=' parameter
warnings.warn(WarningType(message))
e:\radis\radis\misc\curve.py:241: UserWarning: Presence of NaN in curve_divide!
Think about interpolation=2
warnings.warn(&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/c1ca7b795588d0c7ddc1076fc8fce6b8/9e818/fitting_result.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Comparison between normalized experimental spectrum and best fitted spectrum" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/c1ca7b795588d0c7ddc1076fc8fce6b8/f058b/fitting_result.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Comparison between normalized experimental spectrum and best fitted spectrum"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;5. RADIS fitting process from user perspective in the future&lt;/h4&gt;
&lt;p&gt;If being implemented, this fitting pipeline will benefit RADIS users, especially new users, in the future. Imagine you have a spectrum to be fitted. All you need to do next, is to fill the information into a JSON form, and then call &lt;code class="language-text"&gt;fit_spectrum(&amp;lt;path-to-JSON-file&amp;gt;)&lt;/code&gt; and let it do all the work. If you are not satisfied with the result, you can change the unknown information in the JSON, such as &lt;code class="language-text"&gt;slit&lt;/code&gt; and &lt;code class="language-text"&gt;path_length&lt;/code&gt;, and recall the function again, until you are satisfied.&lt;/p&gt;
&lt;p&gt;This is way easier and much friendlier for RADIS users than dwelling into RADIS documentation to find out and learn how to use existing fitting pipeline.&lt;/p&gt;
&lt;p&gt;For now, this user interface only allows LTE spectra to be fitted. But in the following weeks, more types will be implemented and covered along with results from benchmarking progress.&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220703_0000_tranhuunhathuy/</guid><pubDate>Sat, 02 Jul 2022 23:00:00 GMT</pubDate></item><item><title>Second week - Development of new fitting module</title><link>http://openastronomy.org/Universe_OA/posts/2022/06/20220626_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;According to the project proposal, during the second week I am supposed to start the benchmarking process with a bunch of large-category synthentic spectra. Thus, I started to generate a bunch of large synthetic spectra.&lt;/p&gt;
&lt;p&gt;Firstly, I create a &lt;a href="https://github.com/TranHuuNhatHuy/RADIS-Spectrum-Fitting-Benchmark/blob/main/data/synthetic_spectrum_generator.py"&gt;synthetic spectrum generator&lt;/a&gt;. This module is to synthesize various spectra for the benchmarking process based on 4 groups:&lt;/p&gt;
&lt;ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;li&gt;Large and LTE spectra.&lt;/li&gt;
&lt;li&gt;Large and non-LTE spectra.&lt;/li&gt;
&lt;li&gt;Narrow and LTE spectra.&lt;/li&gt;
&lt;li&gt;Narrow and non-LTE spectra.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generated spectra are stored in &lt;code class="language-text"&gt;./data/&amp;lt;spectrum-type&amp;gt;/spectrum&lt;/code&gt; in RADIS .spec file, while their corresponding ground-truths are stored in &lt;code class="language-text"&gt;./data/&amp;lt;spectrum-type&amp;gt;/ground-truth&lt;/code&gt; in JSON format. For each spectrum type, after acquiring most stable fitting pipeline, the model, the algorithm and other specific settings will be stored as a model file in &lt;code class="language-text"&gt;./fitting-module/&amp;lt;spectrum-type&amp;gt;/model.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, I want to generate a synthetic LTE spectrum whose ground-truth as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Molecule: CO2.&lt;/li&gt;
&lt;li&gt;HITRAN isotope ID: 1 (12C16O2).&lt;/li&gt;
&lt;li&gt;Wavelength range: from 3300 cm-1 to 3700 cm-1.&lt;/li&gt;
&lt;li&gt;Pressure: 0.005 bar.&lt;/li&gt;
&lt;li&gt;Tgas: 3000 C.&lt;/li&gt;
&lt;li&gt;Mole fraction: 0.01&lt;/li&gt;
&lt;li&gt;Path length: 1 cm.&lt;/li&gt;
&lt;li&gt;Experimental slit: 1.4 mm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, the JSON generated and registered for this spectrum is going to be like this:&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-json"&gt;&lt;code class="language-json"&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"fileName"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"synth-CO2-1-3300-3700-cm-1-P0.005-t3000-v-r-mf0.01-p1-sl1.4nm.spec"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"molecule"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO2"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"isotope"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wmin"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;3300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wmax"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;3700&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"wunit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"cm-1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"pressure"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.005&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"mole_fraction"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.01&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"path_length"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"slit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1.4 nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"fit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"Tgas"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;3000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"bound_Tgas"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;[&lt;/span&gt;
&lt;span class="token number"&gt;2500&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token number"&gt;4000&lt;/span&gt;
&lt;span class="token punctuation"&gt;]&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code class="language-text"&gt;fileName&lt;/code&gt; specifies &lt;code class="language-text"&gt;.spec&lt;/code&gt; file - the file which stores our experimental spectrum - in the data directory. Other parameters can be seen above. For the &lt;code class="language-text"&gt;fit&lt;/code&gt; group, it contains fit parameters, initial fitting value, and the fitting boundaries. For example, in the JSON file above, we fit the &lt;code class="language-text"&gt;Tgas&lt;/code&gt; parameter whose initial value is 3000 C, upper bound and lower bound are 2500 C and 4000 C respectively.&lt;/p&gt;
&lt;p&gt;Then, for the given initial conditions, and initial &lt;code class="language-text"&gt;Tgas&lt;/code&gt; value, we have this RADIS-calculated spectrum:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/0e9b5a48c6d76f32655c5fd59aa8797d/42de8/calculated.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Calculated-from-ground-truth spectrum" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/0e9b5a48c6d76f32655c5fd59aa8797d/f058b/calculated.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Calculated-from-ground-truth spectrum"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To make it look like an experimental one, after applying slit and around 0.2 mm of offset, noises will be added with scale at 1% of max radiance value.&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;s_wav&lt;span class="token punctuation"&gt;,&lt;/span&gt; s_val &lt;span class="token operator"&gt;=&lt;/span&gt; s&lt;span class="token punctuation"&gt;.&lt;/span&gt;get&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;'radiance'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
noise_scale &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token builtin"&gt;max&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;val &lt;span class="token keyword"&gt;for&lt;/span&gt; val &lt;span class="token keyword"&gt;in&lt;/span&gt; s_val &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;not&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;math&lt;span class="token punctuation"&gt;.&lt;/span&gt;isnan&lt;span class="token punctuation"&gt;(&lt;/span&gt;val&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt; &lt;span class="token number"&gt;0.005&lt;/span&gt; &lt;span class="token comment"&gt;# Prevent NaN&lt;/span&gt;
s_val &lt;span class="token operator"&gt;+=&lt;/span&gt; np&lt;span class="token punctuation"&gt;.&lt;/span&gt;random&lt;span class="token punctuation"&gt;.&lt;/span&gt;normal&lt;span class="token punctuation"&gt;(&lt;/span&gt;size &lt;span class="token operator"&gt;=&lt;/span&gt; s_val&lt;span class="token punctuation"&gt;.&lt;/span&gt;size&lt;span class="token punctuation"&gt;,&lt;/span&gt; scale &lt;span class="token operator"&gt;=&lt;/span&gt; noise_scale&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, I reproduce dilatation by applying non-linear transformation, with scale 0.66% of deviation.&lt;/p&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;wav_mean &lt;span class="token operator"&gt;=&lt;/span&gt; np&lt;span class="token punctuation"&gt;.&lt;/span&gt;mean&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;wav &lt;span class="token keyword"&gt;for&lt;/span&gt; wav &lt;span class="token keyword"&gt;in&lt;/span&gt; s_wav &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;not&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;math&lt;span class="token punctuation"&gt;.&lt;/span&gt;isnan&lt;span class="token punctuation"&gt;(&lt;/span&gt;wav&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
s_wav &lt;span class="token operator"&gt;=&lt;/span&gt; wav_mean &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;s_wav &lt;span class="token operator"&gt;-&lt;/span&gt; wav_mean&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt; &lt;span class="token number"&gt;1.0066&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the noise-added spectrum will be save as .spec file and its information will be stored as formatted JSON structure. The noise-added spectrum is like this:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/fa599fd0903315d279158c0ca38a6a5b/20751/noise-added.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Final product of generated synthetic spectrum" class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/fa599fd0903315d279158c0ca38a6a5b/f058b/noise-added.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Final product of generated synthetic spectrum"&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can see the difference between these two spectra using &lt;code class="language-text"&gt;plot_diff()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/51e2569008c18f1a2d54223ad885b2c8/5f7fb/compare.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="Difference result between two spectra. As you can see, the synth spectrum features both noise and dilatation effects." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/51e2569008c18f1a2d54223ad885b2c8/f058b/compare.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="Difference result between two spectra. As you can see, the synth spectrum features both noise and dilatation effects."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;These files will later be used for benchmarking process to test multiple fitting pipelines, and more files will definitely be added later.&lt;/p&gt;
&lt;p&gt;About the fitting module, now I am still stuck with the development of it. The development seems harder and requires more time than I expected. I will try my best to keep up with the deadlines.&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/06/20220626_0000_tranhuunhathuy/</guid><pubDate>Sat, 25 Jun 2022 23:00:00 GMT</pubDate></item><item><title>First week - Spectra gazing and initial ideas for fitting module</title><link>http://openastronomy.org/Universe_OA/posts/2022/06/20220619_0000_tranhuunhathuy/</link><dc:creator>TranHuuNhatHuy</dc:creator><description>&lt;p&gt;So, according to the plan, in the first week I am supposed to finish these tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup a dedicated repository for reference database. Upload gathered spectra labelled with ground truths onto the database.&lt;/li&gt;
&lt;!-- TEASER_END --&gt;
&lt;li&gt;Investigate and understand each spectra type’s nature, identification and complexity, under instructions of mentors.&lt;/li&gt;
&lt;li&gt;Prepare LMFIT modules for benchmarking process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First is about a dedicated repository for reference database. Since my project is about creating a brand-new feature for RADIS users instead of making changes in RADIS codebase to increase its performance of already-implemented features, I have to do all of my work in a separated repository, before committing to the main codebase upon mentor’s approval. Thus, I have created &lt;a href="https://github.com/TranHuuNhatHuy/RADIS-Spectrum-Fitting-Benchmark"&gt;RADIS Spectrum Fitting Benchmark repository&lt;/a&gt; specifically built for benchmarking process of RADIS spectrum fitting. This repository contains the spectra library with their curresponding ground-truths, as well as fitting modules and benchmarking results.&lt;/p&gt;
&lt;p&gt;The next step is to gain more knowledge and understanding regarding the spectrum types, and nature of each of them. So basically, now I’m expected to conduct extensive benchmarking process on 4 spectrum types and find now which pipeline fits best on which spectrum type. For now, the classification of spectrum is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Large spectra: spectra containing a lot of data points, maybe because there are too many lines that fill up the RAM capacity during spectrum calculation, or because spectrum’s coverage on large wavelength/wavenumber ranges (which also means “wide” spectra), leading to various empty spaces that can be optimized. Either way, the calculation step of these spectra is extensively heavy, both in time and memory required.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/daa4fbddc9721f104f2c6c55dd426484/73b94/large.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="A large spectrum of CO2, retrieved from RADIS app. We can see the result as an extensive accumulation of lines." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/daa4fbddc9721f104f2c6c55dd426484/f058b/large.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="A large spectrum of CO2, retrieved from RADIS app. We can see the result as an extensive accumulation of lines."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Narrow spectra: spectra containing small amount of data points, in which lineshape can be line-wise calculated without the need of extensive collissional broadening.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class="gatsby-resp-image-wrapper" style="display: block; margin-left: auto; margin-right: auto;"&gt;
&lt;a class="gatsby-resp-image-link" href="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/9a0d9b2b3ffb891b1483094c89083659/58bb7/small.png" rel="noopener" style="display: block;" target="_blank"&gt;
&lt;span class="gatsby-resp-image-background-image" style="display: block;"&gt;&lt;/span&gt;
&lt;img alt="A small spectrum of H2O, retrieved from RADIS app. We can see very few lines, the rest is broadening result." class="gatsby-resp-image-image" src="https://gsoc2022tranhuunhathuy.gatsbyjs.io/static/9a0d9b2b3ffb891b1483094c89083659/f058b/small.png" style="width: 100%; height: 100%; margin: 0; vertical-align: middle;" title="A small spectrum of H2O, retrieved from RADIS app. We can see very few lines, the rest is broadening result."&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;LTE spectra: spectra featuring only gas temperature &lt;em&gt;Tgas&lt;/em&gt;, basically the major type of spectrum usually encountered throughout multiple experiments. This type of spectrum can be derived using RADIS’s equilibrium claculation.&lt;/li&gt;
&lt;li&gt;Non-LTE spectra: spectra featuring multiple temperatures, not only gas temperature &lt;em&gt;Tgas&lt;/em&gt; but also vibrational temperature &lt;em&gt;Tvib&lt;/em&gt; and rotational temperature &lt;em&gt;Trot&lt;/em&gt;. RADIS’s non-equilibrium calculation is required to calculate these spectra.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this project, I am expected to optimize these 4 types of spectrum. There are several optimization ideas that can be utilized and developed upon:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For large spectra: as this type of spectrum has significant burden in the model calculation, a lot of rooms for improvement can be found in this process. For this, we can try to reduce the solution of experimental and model spectra for shorter calculation time, or we can even normalize them, since lineshape heavily relies on temperature components.&lt;/li&gt;
&lt;li&gt;For small spectra: as this type of spectrum has few data points, while the calculation process is very fast, the burden one is actually spectrum generation phase. Visualization of spectrum is convenient for human, but not for machine and the cost function. So, we can by-pass this spectrum generation process and just only focus on the calculation side.&lt;/li&gt;
&lt;li&gt;For LTE and Non-LTE spectra, the difference is all about the number of fitting parameters, and the choice of fitting users regarding fitting boundaries and dependencies. We can flexibly adapt these kinds of fitting pipelines.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally is the tentative format for my brand-new fitting module. Have been in this spectroscopy community for months, I notice a lot of times newcomers arrive and get confused at the RADIS installation and its codebase. To add up, current &lt;a href="https://radis.readthedocs.io/en/latest/auto_examples/plot_1T_fit.html"&gt;RADIS fitting example&lt;/a&gt; is quite challenging, especially for new users of RADIS.&lt;/p&gt;
&lt;p&gt;So, when designing new fitting feature from the perspective of user experience, I want to make a user-friendly interface that can benefit both. Thus, my idea is a fitting module that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users only need to fill the fitting conditions and parameteres into something like a JSON file, along with a &lt;em&gt;.spec&lt;/em&gt; Spectrum file containing the experimental spectrum to be fitted. Basically, a JSON file is going to be like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gatsby-highlight"&gt;&lt;pre class="language-json"&gt;&lt;code class="language-json"&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"fileName"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO2-1-1900-2300-cm-1.01325-t300-v300-r300-p1-sl0.5nm.spec"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"molecule"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"CO2"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"isotope"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"1"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"from_wavelength"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1900&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"to_wavelength"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;2300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"pressure"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1.01325&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"mole_fraction"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0.1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"path_length"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"slit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;"0.5 nm"&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"fit"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;
&lt;span class="token property"&gt;"Tgas"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"Tvib"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token property"&gt;"Trot"&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;300&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The fitting module will read the JSON file and acquire the information, while loading the experimental spectrum.&lt;/li&gt;
&lt;li&gt;The whole fitting process is automatically conducted. Everything users need to do, is to fill out a JSON form, and prepare an experimental file. This is much more user-friendly instead of the above fitting example, where users have to manually define the model, refine experimental spectrum and other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all of this, I really hope to bring forth a brand-new fitting experience for RADIS users. Ambitions are set, now sit tight, and start coding!&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2022/06/20220619_0000_tranhuunhathuy/</guid><pubDate>Sat, 18 Jun 2022 23:00:00 GMT</pubDate></item></channel></rss>
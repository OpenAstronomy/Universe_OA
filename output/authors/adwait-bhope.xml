<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts by Adwait Bhope)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/authors/adwait-bhope.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 08 Dec 2024 01:24:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Google Summer of Code Work Product Submission</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;This blog post is a consolidated report of my &lt;a href="https://summerofcode.withgoogle.com/projects/#5357890195423232"&gt;GSoC ’21 project&lt;/a&gt;. I’ve been contributing to &lt;a href="https://github.com/sunpy/ndcube"&gt;ndcube&lt;/a&gt; - a &lt;a href="https://sunpy.org/"&gt;sunpy&lt;/a&gt; affiliated package, which is itself a part of the umbrella organization called &lt;a href="https://openastronomy.org/"&gt;openastronomy&lt;/a&gt;. Phew, that’s quite some hierarchy.&lt;/p&gt;
&lt;p&gt;Here’s a list of pull requests that I’ve opened during the coding period:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/433"&gt;Initial implementation for validating two WCS&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Implements a function to check if two given WCS objects are compatible with each other for reprojecting the NDCube.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/434"&gt;Reproject implementation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Adds a method to reproject an NDCube using the astropy package called reproject.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/439"&gt;Reproject NDCube Documentation&lt;/a&gt;: &lt;em&gt;Merged&lt;/em&gt;&lt;br&gt;Documentation for the above PR.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/436"&gt;Combine cubes from NDCubeSequence using reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Stacks the data of all cubes in an NDCubeSequence together into one cube. This PR is ready to merge but awaits testing from the community.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/441"&gt;Reproject NDCubeSequence Documentation&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;Documentation for the above PR. This will be merged after the code.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/448"&gt;Support adaptive and exact algorithms for reproject&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is completed and is ready to merge.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/ndcube/pull/459"&gt;Make reproject more efficient by identifying invariant axes&lt;/a&gt;: &lt;em&gt;Unmerged&lt;/em&gt;&lt;br&gt;This PR is a work in progress and might need some time until it’s ready. The last commit on this PR as of writing this post can be found &lt;a href="https://github.com/sunpy/ndcube/pull/459/commits/0c4c5a369c55f3f3e53837dd3db2b5f589b750ae"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I’ve also been writing blog posts throughout the coding period. Here are links to the 4 parts I’ve written so far: &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-1-b56e7277046e"&gt;Part 1&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/so-here-i-am-a-month-into-the-coding-period-and-at-the-onset-of-the-first-evaluation-2e6f76a45653"&gt;Part 2&lt;/a&gt;, &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-3-f6354389b27f"&gt;Part 3&lt;/a&gt;, and &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-4-8c7c62861783"&gt;Part 4&lt;/a&gt;. They contain a more technical description of the work along with some obstacles that we faced.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=b35a6c6cba33" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210820_1105_adwaitbhope/</guid><pubDate>Fri, 20 Aug 2021 10:05:17 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;The last few days haven’t been as productive as earlier. We fixed some issues with the NDCubeSequence’s stacking PR and it looks like it’s ready to merge now. With some feedback from the community, I think it will happen soon. There have also been some minor updates to the PR that brings reproject’s other algorithms to NDCube.&lt;/p&gt;
&lt;p&gt;A new task that I’ve taken up now is identifying invariant axes in a cube. Let’s say there’s a 3D data cube where one of the axes corresponds to a quantity like time, which you don’t want to reproject onto another grid. Identifying this axis would let us reproject at only one point along this axis and then apply it throughout. This will speed up the execution significantly and require a lesser amount of memory. It’s a tricky path though and the first implementation might not be very efficient. What we’re trying to do is convert pixel coordinates to world coordinates using the source WCS, and convert it back from world to pixel using the target WCS. If the original and final pixel coordinates match, we can conclude that the axis is invariant.&lt;/p&gt;
&lt;p&gt;I shall update its progress soon, but this is all for now. GSoC is officially coming to an end, but as I said in the previous post, it doesn’t matter much for continuing my contributions to this community. I’ve been fascinated by this open-source environment and culture and learned so much along the way. I guess GSoC did serve its purpose for me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There’s some work at sunraster, specifically updating it to work with ndcube 2.0 (whose RC1 was released recently). That sounds like a fun project given that I’m now familiar with ndcube. In fact, that was a project I had considered applying for as part of GSoC but hadn’t. I’ll let you all know how that goes. Cheers for now, I’ll talk to you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8c7c62861783" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</guid><pubDate>Tue, 17 Aug 2021 08:56:14 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;First and foremost, I celebrate the merging of the PR that brings reproject to NDCube! It defines a base-level functionality or MVP if you want to call it that, along with some relevant documentation. We also mark the release of ndcube’s 2.0 RC1. This is an important milestone since ndcube 2.0 brings significant changes, owing to the implementation of the new high-level WCS API.&lt;/p&gt;
&lt;p&gt;Our next plan of action was to extend the method to use other algorithms that reproject supports. Interpolation (the one that the above PR implements) supports multi-dimensional cubes but “adaptive” and “exact” algorithms do not. For the time being, they only work on 2D cubes containing celestial axes. So that’s what I’ve implemented them for in a new PR, which is currently under review and should hopefully get merged soon.&lt;/p&gt;
&lt;p&gt;The only problem for this PR was identifying celestial axes. We’ve taken a shortcut to solve this quickly and avoid creating a blocker, but a better implementation is due.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The NDCubeSequence PR that I talked about in the last blog post hit a few unexpected edge cases which are under work.&lt;/p&gt;
&lt;p&gt;We’re nearing the end of GSoC’s official timeline and while that is saddening, the good thing is that open source doesn’t need a GSoC timeline for contributing. I do hope that I’ll be able to tie up any loose ends before the end date, but I suppose that does not matter in the community’s bigger picture. Functional additions, bug fixes, and performance improvements are always going to be coming in for reproject, and I plan to maintain at least that bit of code (or more) in the future.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f6354389b27f" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</guid><pubDate>Sun, 01 Aug 2021 17:53:41 GMT</pubDate></item><item><title>So here I am, a month into the coding period and at the onset of the first evaluation.</title><link>http://openastronomy.org/Universe_OA/posts/2021/07/20210711_1548_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;h4&gt;About my Google Summer of Code Project: Part 2&lt;/h4&gt;&lt;p&gt;So here I am, a month into the coding period and at the onset of the first evaluation. I talked about what my project was in the &lt;a href="https://adwaitbhope.medium.com/about-my-google-summer-of-code-project-part-1-b56e7277046e"&gt;last blog&lt;/a&gt;, and I’ll use this one to cover the progress we’ve made.&lt;/p&gt;
&lt;p&gt;All the work so far has been compiled into 3 messy PRs. To start with, reprojecting an NDCube onto another WCS requires that you first validate whether the source and target WCS transformations are in fact compatible. It’s no good if they represent an entirely different coordinate system. They need to have the same number of world axes and in the same order. The first PR introduces a function to check this and it has been merged into the main branch.&lt;/p&gt;
&lt;p&gt;The second one implements the actual reproject method on NDCube, leveraging the reproject package. Currently, it serves as a wrapper around the interpolation algorithm, with plans to support more algorithms soon. But that bit is dependent on optimizing the current functionality by being a little smarter about detecting axes that do not need to be modified. This would also help speed up the function AND use less memory!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The third PR is an interesting one. There is a class called NDCubeSequence, which is, as the name says, a sequence of NDCubes. Think of it as multiple NDCubes arranged in an array with some additional convenient functionality. Let’s say you have some information about an image that isn’t really related to any of the axes but applies to the whole image — the timestamp of the image, for example. If you have multiple similar images taken at different timestamps, they can form an NDCubeSequence, where the sequence axis represents time. You can also combine the sequence axis with an existing axis of the cubes so that they form a large panorama or mosaic, which is wider than the field of view that could’ve been captured in one image.&lt;/p&gt;
&lt;p&gt;In most cases, the individual cubes do not share the same WCS object even if they are images of the same entity. This is because of effects like wobble or rotation that introduce slight changes in the WCS. So we used the previously implemented reproject method to get all the cubes on the same grid, so they can share the WCS. Then, we stacked the data of all cubes together in one single numpy array, introducing an extra dimension that corresponds to the sequence. A new WCS is also constructed that includes this newly formed dimension. You combine this data and the WCS, and voila, you have reduced the NDCubeSequence to an NDCube!&lt;/p&gt;
&lt;p&gt;The next steps would be to refine this behaviour and try to optimize wherever possible. Then we’ll try to get these 2 remaining PRs merged in the main branch to avoid getting inundated later. So, this is all for this post, see you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2e6f76a45653" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/07/20210711_1548_adwaitbhope/</guid><pubDate>Sun, 11 Jul 2021 14:48:45 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 1</title><link>http://openastronomy.org/Universe_OA/posts/2021/06/20210621_1658_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;p&gt;I had been eyeing Google Summer of Code last year (and the year before that), but never really got around to doing anything about it. It’s a wonderful learning experience and being in my final year of college this was the last opportunity I was going to get. So I decided to give it a shot.&lt;/p&gt;
&lt;p&gt;I started late, sometime during late February. I picked out a few organizations that looked interesting to me. &lt;a href="https://openastronomy.org/"&gt;openastronomy&lt;/a&gt; particularly caught my eye because I was working on another project of mine related to Astronomy. In fact we were using one of the Python libraries under openastronomy. Now this is an umbrella organization, which means that there are multiple sub-organizations — sunpy, astropy, radis, poliastro, and a few more. They’re used extensively by the scientific community in their research. The project I selected was under sunpy, which is a Python library for solar data analysis. The project is about resampling data to increase or decrease its resolution — more on that later. Again, I had recently performed this operation in one of my projects, so it seemed only natural for me to go with this one. I worked on some issues on GitHub and submitted PRs, tried to get a hold of the codebase, put together a proposal, got feedback from the project mentors and friends, and submitted it. After about a month of impatient waiting, I received an email saying that my proposal was accepted! Awesome!&lt;/p&gt;
&lt;p&gt;Now, I plan to continue writing these blogs throughout the project and since this is the first one, let me take a moment to talk about the project. So, there’s a sunpy-affiliated package called ndcube, which exists to provide users an easier way of handling coordinates. Astronomical data like images taken from cameras are usually stored as n-dimensional arrays. A dimension could represent spatial or temporal axes. In such an array, the pixel coordinates map to some coordinates in the real world. These could be RA and Dec, or in the case of solar data, Helioprojective Latitude and Longitude. Nevertheless, there needs to be a mapping from the pixels to the real world. This is given by the World Coordinate System, which is just a set of (complicated) mathematical transformations. ndcube is a package that correlates the actual data with its transformations in such a way that you can manipulate the data, and the transformations will continue to remain consistent. It can be used with any type of data like images, spectra, timeseries data, and so on.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MHKTGHeR4F3nHd2gO1ocUw.png"&gt;&lt;figcaption&gt;Open Astronomy and SunPy&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Often, researchers like to upsample or downsample the resolution of their data, perhaps to improve the Signal to Noise Ratio or even just to get their data onto the same grid. My project under Google Summer of Code is exactly this — to implement this functionality under ndcube. Luckily, there exists a package called reproject that has a few algorithms implemented already. My job would be to expose this through a succinct API under ndcube.&lt;/p&gt;
&lt;p&gt;So far, my mentors and I have broken down this work and set smaller and more achievable targets to begin with, and I’ve started working on them. Unfortunately, my Community Bonding Period was quite stagnant thanks to my college commitments, but now that they’re out of the way, I have more time on my hands to devote to the project. I’ll be publishing more blogs about my progress in the coming weeks, hopefully more frequently. Talk to you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=b56e7277046e" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/06/20210621_1658_adwaitbhope/</guid><pubDate>Mon, 21 Jun 2021 15:58:34 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts by ViciousEagle03)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/authors/viciouseagle03.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 15 May 2025 01:57:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC 2024 @OpenAstronomy: Overview of Merged and Pending PRs</title><link>http://openastronomy.org/Universe_OA/posts/2024/08/20240824_1117_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;&lt;img alt="img" src="https://viciouseagle03.github.io/images/PR-Merged.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This blogpost deals with all the PRs that were merged/opened in NDCube/ SunPy / Astropy for completing the project.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;The PRs were filed in accordance with the tasks recorded in the GitHub &lt;a href="https://github.com/orgs/sunpy/projects/12"&gt;task-tab&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="ndcube"&gt;NDCube&lt;/h3&gt;
&lt;h5 id="pr-708-asdf-supporthttpsgithubcomsunpyndcubepull708"&gt;PR #708: &lt;a href="https://github.com/sunpy/ndcube/pull/708"&gt;Asdf-Support&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="merged"&gt;(Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;PR for supporting the serialization of basic &lt;code&gt;ndcube.NDCube&lt;/code&gt; objects with the serialization logic written for the below classes
NDCube, GlobalCoords, ExtraCoords.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="pr-751-add-support-for-the-serialization-of-the-ndcube-wcs-wrappershttpsgithubcomsunpyndcubepull751"&gt;PR #751: &lt;a href="https://github.com/sunpy/ndcube/pull/751"&gt;Add support for the serialization of the ndcube WCS wrappers&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="yet-to-be-merged"&gt;(Yet to be Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR introduces serialization support for &lt;code&gt;ndcube&lt;/code&gt; WCS wrappers, including &lt;code&gt;CompoundLowLevelWCS&lt;/code&gt;, &lt;code&gt;ResampledLowLevelWCS&lt;/code&gt; and &lt;code&gt;ReorderedLowLevelWCS&lt;/code&gt;, allowing them to be saved in ASDF format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="pr-756-add-serialization-logic-for-the-ndcubesequence-and-ndcollectionhttpsgithubcomsunpyndcubepull756"&gt;PR #756: &lt;a href="https://github.com/sunpy/ndcube/pull/756"&gt;Add serialization logic for the NDCubeSequence and NDCollection&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="yet-to-be-merged-1"&gt;(Yet to be Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR introduces serialization support for &lt;code&gt;NDCubeSequence&lt;/code&gt; and &lt;code&gt;NDCollection&lt;/code&gt; objects, enabling their conversion to and from ASDF format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="astropy"&gt;Astropy&lt;/h3&gt;
&lt;h5 id="pr-237-remove-astropy-version-checkhttpsgithubcomastropyasdf-astropypull237"&gt;PR #237: &lt;a href="https://github.com/astropy/asdf-astropy/pull/237"&gt;Remove astropy version check&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="merged-1"&gt;(Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR removes the &lt;code&gt;astropy&lt;/code&gt; version check, which was previously set to version 5.1, from the codebase. The minimum required version is updated to 5.2, and associated conditional logic in &lt;code&gt;test_transform.py&lt;/code&gt; is removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="pr-235-support-serialization-of-astropywcswcs-objects-to-asdfhttpsgithubcomastropyasdf-astropypull235"&gt;PR #235: &lt;a href="https://github.com/astropy/asdf-astropy/pull/235"&gt;Support serialization of astropy.wcs.WCS objects to ASDF&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="yet-to-be-merged-2"&gt;(Yet to be Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR introduces support for serializing &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; and &lt;code&gt;astropy.wcs.wcsapi.SlicedLowLevelWCS&lt;/code&gt; objects to ASDF format. With this enhancement, any &lt;code&gt;ndcube.NDCube&lt;/code&gt; objects can be serialized to ASDF while preserving the underlying WCS as &lt;code&gt;astropy.wcs.WCS&lt;/code&gt;. Additionally, it ensures that sliced &lt;code&gt;ndcube.NDCube&lt;/code&gt; objects maintain proper WCS preservation when serialized and are restored correctly upon deserialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="pr-239-add-serialization-logic-for-uncertainty-objectshttpsgithubcomastropyasdf-astropypull239"&gt;PR #239: &lt;a href="https://github.com/astropy/asdf-astropy/pull/239"&gt;Add serialization logic for uncertainty objects&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="yet-to-be-merged-3"&gt;(Yet to be Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR adds serialization logic for &lt;code&gt;astropy.nddata.StdDevUncertainty&lt;/code&gt; and &lt;code&gt;astropy.nddata.UnknownUncertainty&lt;/code&gt; objects. This update enables the serialization of these uncertainty types, ensuring that the uncertainty attribute of the &lt;code&gt;ndcube.NDCube&lt;/code&gt; object is properly preserved and restored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sunpy"&gt;SunPy&lt;/h3&gt;
&lt;h5 id="pr-7686-asdf-schema-update-minor-changehttpsgithubcomsunpysunpypull7686"&gt;PR #7686: &lt;a href="https://github.com/sunpy/sunpy/pull/7686"&gt;ASDF schema update: minor change&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="merged-2"&gt;(Merged)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This PR updates the ASDF schema by removing incorrect usage of the unsupported &lt;code&gt;allowAdditionalProperties&lt;/code&gt; validator. This minor change ensures that the schema files for generic_map (versions &lt;code&gt;1.0.0&lt;/code&gt;, &lt;code&gt;1.1.0&lt;/code&gt;, and &lt;code&gt;1.2.0&lt;/code&gt;) are correctly formatted.&lt;/li&gt;
&lt;/ul&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/08/20240824_1117_viciouseagle03/</guid><pubDate>Sat, 24 Aug 2024 10:17:02 GMT</pubDate></item><item><title>GSoC [Week 06-07] Progress</title><link>http://openastronomy.org/Universe_OA/posts/2024/07/20240728_1014_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;&lt;img alt="img" src="https://viciouseagle03.github.io/images/mid_term.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post covers all the work done in the sixth week of Google Summer of Code.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/blockquote&gt;
&lt;p&gt;After having developed the serialization logic for NDCube with wcs as &lt;code&gt;gWCS&lt;/code&gt;, the next step was to extend this support to handle the serialization of NDCube where the wcs attribute is &lt;code&gt;astropy.wcs.WCS&lt;/code&gt;. This week my primary focus has been on enabling the serialization of &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; objects to ASDF. This task involves adding the necessary serialization logic to the asdf-astropy repository.&lt;/p&gt;
&lt;h4 id="discussions-on-wcs-serialization"&gt;Discussions on WCS Serialization&lt;/h4&gt;
&lt;p&gt;We had a discussion about the process of serializing WCS objects and covered the following points:&lt;/p&gt;
&lt;h5 id="complex-wcs-types"&gt;Complex WCS Types:&lt;/h5&gt;
&lt;p&gt;WCS types like tabular and distortion ones are tricky because they involve data tables. Handling these types requires a more sophisticated approach.&lt;/p&gt;
&lt;h5 id="approach-discussion"&gt;Approach Discussion:&lt;/h5&gt;
&lt;p&gt;We discussed serializing a HDUList object or using &lt;code&gt;WCS.to_hdu&lt;/code&gt; for the complex WCS types but that seems pretty complex for a first attempt. We agreed on initially not supporting these complex WCS types and just using &lt;code&gt;WCS.to_header()&lt;/code&gt; for now for supporting the serialization of the basic WCS objects.&lt;/p&gt;
&lt;h4 id="whats-new"&gt;What’s new&lt;/h4&gt;
&lt;p&gt;So after my PR gets merged asdf-astropy would support the serialization of the &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; objects to ASDF.
Ideally we would want to detect tabular and distortion WCS types and throw an error if they come up. This way, we’re clear about what’s supported and we agreed on revisiting this part and in the future and to extend this to support the serialization of the complex WCS objects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serialized simple &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; object to ASDF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;#ASDF 1.0.0
#ASDF_STANDARD 1.5.0
%YAML 1.1
%TAG ! tag:stsci.edu:asdf/
--- !core/asdf-1.1.0
asdf_library: !core/software-1.0.0 {author: The ASDF Developers, homepage: 'http://github.com/asdf-format/asdf',
name: asdf, version: 3.0.1}
history:
extensions:
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://asdf-format.org/core/extensions/core-1.5.0
software: !core/software-1.0.0 {name: asdf, version: 3.0.1}
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://astropy.org/astropy/extensions/astropy-1.0.0
software: !core/software-1.0.0 {name: asdf-astropy, version: 0.6.1.dev10+gdab5b4d.d20240723}
fits: !&amp;lt;tag:astropy.org:astropy/fits/fitswcs-1.0.0&amp;gt;
header: {CDELT1: 0.4, CDELT2: 2.0e-11, CDELT3: 0.0055555555555556, CDELT4: 0.0013888888888889,
CRPIX1: 0.0, CRPIX2: 0.0, CRPIX3: 0.0, CRPIX4: 5.0, CRVAL1: 0.0, CRVAL2: 0.0,
CRVAL3: 0.0, CRVAL4: 0.0, CTYPE1: TIME, CTYPE2: WAVE, CTYPE3: HPLT-TAN, CTYPE4: HPLN-TAN,
CUNIT1: min, CUNIT2: m, CUNIT3: deg, CUNIT4: deg, DATEREF: '2020-01-01T00:00:00',
LATPOLE: 0.0, LONPOLE: 180.0, MJDREF: 58849.0, WCSAXES: 4}
...
&lt;/code&gt;&lt;/pre&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/07/20240728_1014_viciouseagle03/</guid><pubDate>Sun, 28 Jul 2024 09:14:09 GMT</pubDate></item><item><title>GSoC [Week 04-05] Progress</title><link>http://openastronomy.org/Universe_OA/posts/2024/07/20240715_0549_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;&lt;img alt="img" src="https://viciouseagle03.github.io/images/test_img.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post covers all the work done in the fourth and fifth week of Google Summer of Code.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/blockquote&gt;
&lt;h5 id="mid-term-evaluations-are-nearing"&gt;Mid term evaluations are nearing!&lt;/h5&gt;
&lt;p&gt;This week, my focus was on extending the test suite to include examples of loading an &lt;code&gt;NDCube&lt;/code&gt; backed by various &lt;code&gt;gwcs.WCS&lt;/code&gt; objects and testing the roundtrip serialization of the NDCube. I needed to verify that the ExtraCoords and GlobalCoords objects are correctly serialized and deserialized. Adding the gWCS test suite presented some challenges, but seeing it function correctly was incredibly rewarding. Completing these tasks was essential to ensure everything was in place for the mid-term evaluation 🚀.&lt;/p&gt;
&lt;h4 id="adding-gwcs-test-suite"&gt;Adding gWCS Test Suite&lt;/h4&gt;
&lt;p&gt;This was the most challenging part for me this week. To check the roundtrip serialization of &lt;code&gt;gwcs.WCS&lt;/code&gt; objects (i.e., ensuring all attributes of the &lt;code&gt;wcs&lt;/code&gt; attribute of the NDCube are preserved when read and loaded through an ASDF file), I had to write a test suite for NDCube backed by different &lt;code&gt;gwcs.WCS&lt;/code&gt; objects as the wcs attribute for the NDCube objects which would then be loaded into an NDCube and checked for roundtrip serialization.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the &lt;code&gt;gwcs.WCS&lt;/code&gt; test object which would be loaded in an NDCube and checked for roundtrip serialization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;def gwcs_4d_t_l_lt_ln():
"""
Creates a 4D GWCS object with time, wavelength, and celestial coordinates.

- Time: Axis 0
- Wavelength: Axis 1
- Sky: Axes 2 and 3

Returns:
wcs.WCS: 4D GWCS object.
"""

time_model = models.Identity(1)
time_frame = cf.TemporalFrame(axes_order=(0, ), unit=u.s,
reference_frame=Time("2000-01-01T00:00:00"))

wave_frame = cf.SpectralFrame(axes_order=(1, ), unit=u.m, axes_names=('wavelength',))
wave_model = models.Scale(0.2)

shift = models.Shift(-5) &amp;amp; models.Shift(0)
scale = models.Scale(5) &amp;amp; models.Scale(20)
tan = models.Pix2Sky_TAN()
celestial_rotation = models.RotateNative2Celestial(0, 0, 180)
cel_model = shift | scale | tan | celestial_rotation
sky_frame = cf.CelestialFrame(axes_order=(2, 3), name='icrs',
reference_frame=coord.ICRS(),
axes_names=("longitude", "latitude"))

transform = time_model &amp;amp; wave_model &amp;amp; cel_model

frame = cf.CompositeFrame([time_frame, wave_frame, sky_frame])
detector_frame = cf.CoordinateFrame(name="detector", naxes=4,
axes_order=(0, 1, 2, 3),
axes_type=("pixel", "pixel", "pixel", "pixel"),
unit=(u.pix, u.pix, u.pix, u.pix))

return (wcs.WCS(forward_transform=transform, output_frame=frame, input_frame=detector_frame))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="checking-the-extracoords-and-globalcoords"&gt;Checking the ExtraCoords and GlobalCoords&lt;/h4&gt;
&lt;p&gt;I had to make sure the converters written for these objects preserved all the required parameters when saved to an ASDF file and read from an ASDF file. Doing this was straightforward as my mentors helped me during the process of writing the tests and ensuring good coverage.&lt;/p&gt;
&lt;h4 id="handling-unsupported-attributes"&gt;Handling Unsupported Attributes&lt;/h4&gt;
&lt;p&gt;It is as important to test the supported API as it is to throw a warning to the user when a particular attribute serialization is unsupported. I added warnings for attributes that are not yet supported (such as a sliced &lt;code&gt;NDCube&lt;/code&gt; and &lt;code&gt;wcs&lt;/code&gt; attribute of the &lt;code&gt;NDCube&lt;/code&gt; as the &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; object), which I plan to support in the future.&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/07/20240715_0549_viciouseagle03/</guid><pubDate>Mon, 15 Jul 2024 04:49:00 GMT</pubDate></item><item><title>GSoC [Week 02-03] Progress</title><link>http://openastronomy.org/Universe_OA/posts/2024/06/20240623_0719_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;This blog post covers all the work done in the second and third week of Google Summer of Code.&lt;/p&gt;
&lt;p&gt;In the past weeks, my focus has been on enhancing the serialization support of NDCube by extending its support for ExtraCoords and GlobalCoords. After establishing serialization support for the fundamental attributes of the NDCube object—such as data and wcs—in the ASDF file format, the next logical step was extending this capability to include &lt;code&gt;ExtraCoords&lt;/code&gt; and &lt;code&gt;GlobalCoords&lt;/code&gt; object.&lt;/p&gt;
&lt;h3 id="globalcoords-and-extracoords"&gt;GlobalCoords and ExtraCoords&lt;/h3&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;ExtraCoords: The ExtraCoords attribute expand NDCube’s capabilities by incorporating additional spatial or spectral coordinates beyond those defined by the primary WCS. It accommodate complex datasets needing extra dimensions or coordinates, such as spectroscopic data with folded axes.&lt;/p&gt;
&lt;p&gt;GlobalCoords: The GlobalCoords attribute are coordinates in an NDCube that provides universal context across the entire dataset and apply uniformly across all axes. It captures metadata such as observation times or global positional coordinates of the NDCube object.&lt;/p&gt;
&lt;h3 id="extending-the-serialization-support"&gt;Extending the Serialization support&lt;/h3&gt;
&lt;p&gt;Now, &lt;code&gt;ExtraCoords&lt;/code&gt; can be initialized by specifying a &lt;code&gt;BaseLowLevelWCS&lt;/code&gt; object and a mapping, or by building it up using one or more lookup tables. To support the latter method, I had to ensure the &lt;code&gt;lookup_tables&lt;/code&gt; were properly preserved during serialization. For this purpose, I designed the schema and wrote the converter class for the following objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ndcube.extra_coords.extra_coords.ExtraCoords&lt;/li&gt;
&lt;li&gt;ndcube.extra_coords.table_coord.TimeTableCoordinate&lt;/li&gt;
&lt;li&gt;ndcube.extra_coords.table_coord.QuantityTableCoordinate&lt;/li&gt;
&lt;li&gt;ndcube.extra_coords.table_coord.SkyCoordTableCoordinate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initialization of &lt;code&gt;GlobalCoords&lt;/code&gt; is more straightforward, which required me to design the schema and write the converter class for the following object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ndcube.global_coords.GlobalCoords&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s an example of the &lt;code&gt;ExtraCoords&lt;/code&gt; Schema&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;%YAML 1.1
---
$schema: "http://stsci.edu/schemas/yaml-schema/draft-01"
id: "asdf://sunpy.org/ndcube/schemas/extra_coords-0.1.0"

title:
Represents the ndcube ExtraCoords object

description:
Represents the ndcube ExtraCoords object

type: object
properties:
wcs:
tag: "tag:stsci.edu:gwcs/wcs-1.*"
mapping:
type: array
lookup_tables:
type: array
items:
type: array
items:
- oneOf:
- type: number
- type: array
- oneOf:
- tag: "tag:sunpy.org:ndcube/extra_coords/table_coord/quantitytablecoordinate-0.*"
- tag: "tag:sunpy.org:ndcube/extra_coords/table_coord/skycoordtablecoordinate-0.*"
- tag: "tag:sunpy.org:ndcube/extra_coords/table_coord/timetablecoordinate-0.*"
dropped_tables:
type: array
ndcube:
tag: "tag:sunpy.org:ndcube/ndcube/ndcube-0.*"

required: [ndcube]
additionalProperties: false
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="whats-new-keeping-up-with-the-coords"&gt;What’s new: Keeping Up with the Coords&lt;/h3&gt;
&lt;p&gt;&lt;img alt="img" src="https://viciouseagle03.github.io/images/ASDF-ser-new-type.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, when we save an NDCube object to an ASDF file, the file successfully stores the &lt;code&gt;ExtraCoords&lt;/code&gt; and &lt;code&gt;GlobalCoords&lt;/code&gt; information, which is preserved when we deserialize and generate a new NDCube object by reading the file. The only thing that is still not supported is initializing an ExtraCoords object using a mapping and an &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; object. This feature will be supported in the future when I implement serialization support for &lt;code&gt;astropy.wcs.WCS&lt;/code&gt; in the asdf-astropy library.&lt;/p&gt;
&lt;h5 id="saving-an-ndcube-with-globalcoords-and-extracoords-attribute"&gt;Saving an NDCube with &lt;code&gt;GlobalCoords&lt;/code&gt; and &lt;code&gt;ExtraCoords&lt;/code&gt; attribute&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;with asdf.open('ndcubeglobal_extra.asdf') as af:
ndcube2 = af.tree['ndcube']
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="the-relevant-asdf-file-block"&gt;The relevant ASDF file block&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;extra_coords: !&amp;lt;tag:sunpy.org:ndcube/extra_coords/extra_coords/extracoords-0.1.0&amp;gt;
dropped_tables: []
lookup_tables:
- - 0
- !&amp;lt;tag:sunpy.org:ndcube/extra_coords/table_coord/timetablecoordinate-0.1.0&amp;gt;
mesh: false
names: [time]
reference_time: !time/time-1.1.0 {base_format: fits, value: '2000-01-01T00:00:00.000'}
table: !time/time-1.1.0
base_format: fits
value: !core/ndarray-1.0.0
byteorder: little
datatype: [ucs4, 23]
shape: [10]
source: 5
- - 0
- !&amp;lt;tag:sunpy.org:ndcube/extra_coords/table_coord/skycoordtablecoordinate-0.1.0&amp;gt;
mesh: false
names: [lon, lat]
table: !&amp;lt;tag:astropy.org:astropy/coordinates/skycoord-1.0.0&amp;gt;
dec: !&amp;lt;tag:astropy.org:astropy/coordinates/latitude-1.0.0&amp;gt;
unit: !unit/unit-1.0.0 deg
value: !core/ndarray-1.0.0
byteorder: little
datatype: float64
shape: [10]
source: 7
frame: icrs
ra: !&amp;lt;tag:astropy.org:astropy/coordinates/longitude-1.0.0&amp;gt;
unit: !unit/unit-1.0.0 deg
value: !core/ndarray-1.0.0
byteorder: little
datatype: float64
shape: [10]
source: 6
wrap_angle: !&amp;lt;tag:astropy.org:astropy/coordinates/angle-1.0.0&amp;gt; {datatype: float64,
unit: !unit/unit-1.0.0 deg, value: 360.0}
representation_type: spherical
- - 1
- !&amp;lt;tag:sunpy.org:ndcube/extra_coords/table_coord/quantitytablecoordinate-0.1.0&amp;gt;
mesh: true
names: [exposure_time]
table:
- !unit/quantity-1.1.0
unit: !unit/unit-1.0.0 s
value: !core/ndarray-1.0.0
byteorder: little
datatype: float64
shape: [10]
source: 8
unit: !unit/unit-1.0.0 s
ndcube: *id001
global_coords: !&amp;lt;tag:sunpy.org:ndcube/global_coords/globalcoords-0.1.0&amp;gt;
internal_coords:
name1:
- custom:physical_type1
- !unit/quantity-1.1.0 {datatype: float64, unit: !unit/unit-1.0.0 m, value: 1.0}
name2:
- custom:physical_type2
- !unit/quantity-1.1.0 {datatype: float64, unit: !unit/unit-1.0.0 s, value: 2.0}
ndcube: *id001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;During my coding period, my mentors have been incredibly helpful, and huge thanks to &lt;a href="https://github.com/braingram"&gt;@braingram&lt;/a&gt; for explaining and ensuring I understood the entire ASDF serialization process thoroughly. I learned a lot about schema design and JSON schema. I was particularly impressed by the &lt;a href="https://docs.github.com/en/actions/using-workflows"&gt;CI workflows&lt;/a&gt;, when I set up a dedicated schema testing workflow. It showed me how automated testing can catch errors that manual testing might overlook. Although I implemented a straightforward workflow, it go me curious about learning more about CI workflows.&lt;/p&gt;
&lt;p&gt;I am currently adding tests for the new serialization support in NDCube, which I plan to finish by the next coding week.&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/06/20240623_0719_viciouseagle03/</guid><pubDate>Sun, 23 Jun 2024 06:19:36 GMT</pubDate></item><item><title>Community Bonding and Week 01 Progress</title><link>http://openastronomy.org/Universe_OA/posts/2024/06/20240607_2045_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;This post documents the planning of the project, my learnings during the community bonding period, and the tasks I completed in my first week.&lt;/p&gt;
&lt;h3 id="community-bonding-period"&gt;Community Bonding Period&lt;/h3&gt;
&lt;p&gt;After the euphoria of being accepted into GSoC faded, it was time for setting up my workspace and diving back into the codebase after a month. Planning out the project was key, and meeting with my mentors was a big part of that. I was excited for this chat because the mentors had been super helpful and easy to reach during the proposal stage.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h3 id="setting-the-stage-mentor-meet-up-and-project-planning"&gt;Setting the Stage: Mentor Meet-Up and Project Planning&lt;/h3&gt;
&lt;p&gt;During the meet-up, we discussed about the best approach to kick-start the development process. It was mostly the mentors discussing about the possible roadmap and as they outlined the project roadmap, I listened carefully, taking notes on important discussions. One of the key decision was to set up clear communication channels and workflows to make sure we all stay on the same page and to ensure I do not vary off of the project or get stuck in a deadend.&lt;/p&gt;
&lt;p&gt;Additionally, we agreed to use GitHub projects for project management, making it easier to keep track of tasks and monitor progress. You can check out the GitHub project here: &lt;a href="https://github.com/orgs/sunpy/projects/12/views/1"&gt;&lt;strong&gt;Github Project&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apart from discussing the project proceedings, I was also tasked with setting up a blog website to document my GSoC journey and share updates with the community. I decided to use Hugo to create the blog website and deployed it through GitHub pages. Additionally, I was asked to share the RSS feed of my blog to ensure that project updates are easily accessible to everyone.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://viciouseagle03.github.io/images/tasks.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="week-01-first-coding-week"&gt;Week [01]: First Coding Week&lt;/h2&gt;
&lt;h3 id="a-brief-overview-about-my-project"&gt;A brief overview about my project&lt;/h3&gt;
&lt;p&gt;My projects aims to enable the storage and retrieval of NDCube objects using the ASDF file format. Currently, ndcube lacks native support for saving NDCube objects to files and loading them back, limiting its usability. To address this, the project will implement convertors and schema definitions for NDCube objects and related classes ensuring robust serialization and deserialiazation. The first phase of my project requires the complete imlementation of serialization of an &lt;strong&gt;ndcube.NDCube&lt;/strong&gt; object when &lt;code&gt;.data&lt;/code&gt; is a numpy array and &lt;code&gt;.wcs&lt;/code&gt; is a &lt;strong&gt;gwcs.WCS object&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="the-prototype"&gt;The Prototype&lt;/h3&gt;
&lt;p&gt;In our meeting, we discussed the initial steps, which centered around laying the groundwork for serialization support for the NDCube object, particularly focusing on establishing basic functionality. This included implementing the convertor class, registering the convertors as ASDF extensions, and ensuring they were readily available via entry points. Getting a good grasp of the whole serialization process took some dedicated reading through the ASDF docs 🧐.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Convertor Class: I implemented the convertor class, including the &lt;code&gt;to_yaml_tree&lt;/code&gt; and &lt;code&gt;from_yaml_tree&lt;/code&gt; methods. The former converts NDCube object attributes into a single node object suitable for serialization. Now, here’s the super cool part the &lt;code&gt;.wcs&lt;/code&gt; attribute of the NDCube object, being a complex object, is accommodated within the node, as the node is permitted to contain nested complex objects.
&lt;em&gt;Viola!&lt;/em&gt; , so I was able to leverage the existing convertor for GWCS objects which made the process somewhat less complicated. The latter method is exactly the opposite, it accepts a single node object from parsed YAML and returns the corresponding NDCube object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema and Manifests: The Schema was designed to validate the presence, and the datatype of the validator properties for the NDCube object. The manifest was implemented for acheiving the resource mapping of the schema.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ASDF Integration: In entry_point.py, I’ve implemented get_resource_mapping to retrieve mappings for schema and manifest files, required for ASDF file validation and identifying NDCube objects and the get_extension is implemented to retrieve extensions , here the extension through which the ndcube convertor was registered&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-demonstration"&gt;Code Demonstration&lt;/h3&gt;
&lt;h4 id="ndcube-initialised-with-gwcswcs-object-as-its-wcs-attribute"&gt;NDCube initialised with gwcs.WCS object as its ‘.wcs’ attribute&lt;/h4&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
import asdf
from astropy.time import Time
from ndcube import NDCube
from ndcube.extra_coords import QuantityTableCoordinate, TimeTableCoordinate
import astropy.units as u


energy = np.arange(10) * u.keV
time = Time('2020-01-01 00:00:00') + np.arange(10) * u.s
energy_coord = QuantityTableCoordinate(energy, names='energy', physical_types='em.energy')
time_coord = TimeTableCoordinate(time, names='time', physical_types='time')

# Initialize the GWCS object
wcs = (time_coord &amp;amp; energy_coord).wcs
data = np.random.rand(len(time), len(energy))

# Initialize the NDCube
ndcube = NDCube(data, wcs=wcs)

with asdf.AsdfFile() as af:
af.tree['ndcube'] = ndcube
af.write_to('ndcube.asdf')
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="serialized-asdf-file"&gt;Serialized ASDF File&lt;/h4&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#ASDF 1.0.0
#ASDF_STANDARD 1.5.0
%YAML 1.1
%TAG ! tag:stsci.edu:asdf/
--- !core/asdf-1.1.0
asdf_library: !core/software-1.0.0 {author: The ASDF Developers, homepage: 'http://github.com/asdf-format/asdf',
name: asdf, version: 3.0.1}
history:
extensions:
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://asdf-format.org/core/extensions/core-1.5.0
software: !core/software-1.0.0 {name: asdf, version: 3.0.1}
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://sunpy.org/extensions/ndcube-0.1.0
software: !core/software-1.0.0 {name: ndcube, version: 2.3.dev224+g04409b5.d20240605}
- !core/extension_metadata-1.0.0
extension_class: asdf_astropy._manifest.CompoundManifestExtension
extension_uri: asdf://astropy.org/core/extensions/core-1.5.0
software: !core/software-1.0.0 {name: asdf-astropy, version: 0.5.0}
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://asdf-format.org/transform/extensions/transform-1.5.0
software: !core/software-1.0.0 {name: asdf-astropy, version: 0.5.0}
- !core/extension_metadata-1.0.0
extension_class: asdf.extension._manifest.ManifestExtension
extension_uri: asdf://asdf-format.org/astronomy/gwcs/extensions/gwcs-1.2.0
software: !core/software-1.0.0 {name: gwcs, version: 0.20.0}
ndcube: &amp;amp;id001 !&amp;lt;tag:sunpy.org:ndcube/ndcube/NDCube-0.1.0&amp;gt;
data: !core/ndarray-1.0.0
source: 0
datatype: float64
byteorder: little
shape: [10, 10]
extra_coords: !&amp;lt;tag:sunpy.org:ndcube/extra_coords/extra_coords/ExtraCoords-0.1.0&amp;gt;
dropped_tables: []
ndcube: *id001
wcs: !&amp;lt;tag:stsci.edu:gwcs/wcs-1.2.0&amp;gt;
name: ''
pixel_shape: null
steps:
- !&amp;lt;tag:stsci.edu:gwcs/step-1.1.0&amp;gt;
frame: !&amp;lt;tag:stsci.edu:gwcs/frame-1.0.0&amp;gt;
axes_names: ['', '']
axes_order: [0, 1]
axes_type: [PIXEL, PIXEL]
axis_physical_types: ['custom:PIXEL', 'custom:PIXEL']
name: PixelFrame
naxes: 2
unit: [!unit/unit-1.0.0 pixel, !unit/unit-1.0.0 pixel]
transform: !transform/concatenate-1.2.0
forward:
- !transform/tabular-1.2.0
bounds_error: false
fill_value: .nan
inputs: [x]
lookup_table: !unit/quantity-1.1.0
unit: !unit/unit-1.0.0 s
value: !core/ndarray-1.0.0
source: 1
datatype: float64
byteorder: little
shape: [10]
method: linear
outputs: [y]
points:
- !unit/quantity-1.1.0
unit: !unit/unit-1.0.0 pixel
value: !core/ndarray-1.0.0
source: 2
datatype: float64
byteorder: little
shape: [10]
- !transform/tabular-1.2.0
bounds_error: false
fill_value: .nan
inputs: [x]
lookup_table: !unit/quantity-1.1.0
unit: !unit/unit-1.0.0 keV
value: !core/ndarray-1.0.0
source: 3
datatype: float64
byteorder: little
shape: [10]
method: linear
outputs: [y]
points:
- !unit/quantity-1.1.0
unit: !unit/unit-1.0.0 pixel
value: !core/ndarray-1.0.0
source: 4
datatype: float64
byteorder: little
shape: [10]
inputs: [x0, x1]
outputs: [y0, y1]
- !&amp;lt;tag:stsci.edu:gwcs/step-1.1.0&amp;gt;
frame: !&amp;lt;tag:stsci.edu:gwcs/composite_frame-1.0.0&amp;gt;
frames:
- !&amp;lt;tag:stsci.edu:gwcs/temporal_frame-1.0.0&amp;gt;
axes_names: [time]
axes_order: [0]
axis_physical_types: [time]
name: TemporalFrame
reference_frame: !time/time-1.1.0 2020-01-01 00:00:00.000
unit: [!unit/unit-1.0.0 s]
- !&amp;lt;tag:stsci.edu:gwcs/frame-1.0.0&amp;gt;
axes_names: [energy]
axes_order: [1]
axes_type: [CUSTOM]
axis_physical_types: [em.energy]
name: CoordinateFrame
naxes: 1
unit: [!unit/unit-1.0.0 keV]
name: CompositeFrame
transform: null
...
�BLK0 [TY*ߝ��R�4p}Q����?��#���?ȩȏ��?���#��?��ҩ��?*B��y�?ʱ�tv��?������?�fEp�X�?k1^}��?=���A�?�]����?
�֜���?���H�?��)9�?{juoPW�?p�:����?0�T9��?w�A��?pWݫ  %�?�K#)cB�?�uv����?V‹����?���^�.�?��2���?���eQ�?^߁}���?�$6mwp�?�&amp;amp;�"��?N�;�[�?4�؅J3�?
����?=&amp;gt;��ܨ?��#%�?J6F=s��?E��}.�?°���
�?����Qa�?;��0�?vM���?q��ǖ'�?�&amp;lt;5��?G]�X�?��.���?��ɐ?�?j��G�L�?&amp;lt;��&amp;amp;��?��q];I?�̱���?X�Dt�v�?Pҧ���?0�=�E��?����?O&amp;gt;&amp;gt;tGj?D.���#�?p�N����?,$�V)��?j��xƦ�?�v�h�?�"�
�p�?7S�0�?���ۢ`�?8YI�yְ?"E��o��?J�G�8�?�W�����?����ـ�?t���o�?sg���?h�Ȝ���?�)�=g�?e/B/�?�2�;�?�~�xT��?s�S���?t�|1.��?�n��ʳ?��/�؛�?jd����?�oB���?Lz09��?�����?��ga��?`������?���kW��?���P7�?�|�F@�?Oq���?d���$�?&amp;gt;�e�~�?�t�(�?�Ԓ���?&amp;lt;�P����?���a�?�Q΢���?����?Ѳ�#[[�?� �^�X�?jC�����?�mJA��?�BLK0PPP?�N��{I�?N"F98��?`������? @�     @h�����@ @������@x�����@"@�BLK0PPP�����Z
�η~�ZH�?@@@@@@ @"@�BLK0PPP�����Z
�η~�ZH�?@@@@@@ @"@�BLK0PPP�����Z
�η~�ZH�?@@@@@@ @"@#ASDF BLOCK INDEX
%YAML 1.1
---
- 4304
- 5158
- 5292
- 5426
- 5560
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="gsoc-week-one-reflections"&gt;GSoC Week One: Reflections&lt;/h3&gt;
&lt;p&gt;My first week with GSoC has been a thrilling ride, full of learning and growth. The support from the community has been incredible. Looking forward to what lies ahead!🚀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perseverance is not a long race; it is many short races one after the other.&lt;/p&gt;
&lt;/blockquote&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/06/20240607_2045_viciouseagle03/</guid><pubDate>Fri, 07 Jun 2024 19:45:27 GMT</pubDate></item><item><title>Getting Selected for Google Summer of Code 2024</title><link>http://openastronomy.org/Universe_OA/posts/2024/06/20240607_1041_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;Hello everyone, this marks my first blog post where I pen down my experience and learnings about getting selected for Google Summer of Code.&lt;/p&gt;
&lt;h3 id="what-is-this-series-about"&gt;What is this series about?&lt;/h3&gt;
&lt;p&gt;In this series of blog posts, I mainly plan on walking you through what it was like working for GSoC, what challenges I faced, and how I overcame those.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;img alt="img" src="https://viciouseagle03.github.io/images/GSoC_OA.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Summer of Code is a global, online program focused on bringing new contributors into open source software development. GSoC Contributors work with an open source organization on a 12+ week programming project under the guidance of mentors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="discovering-gsoc-from-curiosity-to-decision"&gt;Discovering GSoC: From Curiosity to Decision&lt;/h3&gt;
&lt;p&gt;I first came across Google Summer of Code (GSoC) during my early years at IIT Roorkee.&lt;/p&gt;
&lt;p&gt;The idea of working on real-world open source projects with guidance from experienced mentors worldwide piqued my interest.
For me it provided a unique chance to collaborate with an international community of developers, enhancing my skills in coding, problem-solving, and project management. I was amazed by the idea of jumping into a library that so many people were part of really got me excited. Getting to help out and knowing it would make a difference for loads of folks - it resonated with me :) . So, I went on a hunt for an organisation that matched my skills and also kept me engaged enough to persistently work on the project idea throughout the summers ☀️.&lt;/p&gt;
&lt;h3 id="proposal-a-daunting-task"&gt;Proposal: A Daunting Task&lt;/h3&gt;
&lt;p&gt;Once I had chosen the organization and tackled some issues, opened a few pull requests, and familiarized myself with the codebase, the next step was to explore the idea list. Based on my interest, I chose NDCube (open-source SunPy affiliated package). I went through the tests and documentation to understand the NDCube package better and chose the &lt;strong&gt;Serialization of NDCube Classes to ASDF&lt;/strong&gt; project. Crafting the proposal was a challenge, I had to keep it concise, sticking to the recommended 5-page limit. With the support of the SunPy mentors, who provided valuable feedback, I was able to refine my proposal to meet the standards expected by GSoC.&lt;/p&gt;
&lt;h3 id="the-ndcube-package"&gt;The NDCube package&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://viciouseagle03.github.io/images/ndcube.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us understand what really is the ndcube package, it is a Python package used for managing multi-dimensional data in astronomy. In astronomy, data often comes in arrays with multiple dimensions, such as images or spectroscopic data cubes. Each element of the array represents a measurement taken at a specific point in space and time.
The challenge lies in managing the relationship between the array elements data and their corresponding physical locations in the observed sky. This is where the World Coordinate System (WCS) framework comes in. WCS provides a standardized way to relate array axes to physical coordinates(connects points in the image to their real locations in space).&lt;/p&gt;
&lt;p&gt;Now, imagine you have lots of pictures, each showing a different part of the sky or taken at a different time. It would be great if you could combine all these pictures into one big map, right? That’s where ndcube comes in. It’s like a tool that takes all these pictures and their coordinate information and puts them together in a way that makes them easy to work with.&lt;/p&gt;
&lt;p&gt;With ndcube, you can slice these pictures, zoom in on specific regions, or compare different pictures side by side. You can also transform the coordinates, which is like moving your map from one location to another or rotating it to see things from a different angle. And the best part is, ndcube does all this while keeping track of the complex coordinate transformations of data points. As ndcube puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The fundamental reason to opt for ndcube is to harness the astronomy-specific World Coordinate System (WCS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="the-waiting-game-from-submission-to-selection"&gt;The Waiting Game: From Submission to Selection&lt;/h3&gt;
&lt;p&gt;After a month of anticipation, the long-awaited email arrived from the GSoC team: my proposal had been accepted by OpenAstronomy(The umbrella organization) 😁.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://viciouseagle03.github.io/images/Acceptance.png"&gt;&lt;/p&gt;
&lt;p&gt;Getting into GSoC is super exciting and it marks the start of an amazing journey. I know it’s going to take a lot of hard work and dedication, but I’m really looking forward to the challenges ahead and most importantly, the incredible learning experience that GSoC brings.&lt;/p&gt;
&lt;p&gt;The mentors overseeing my project are &lt;a href="https://github.com/DanRyanIrish"&gt;Daniel Ryan&lt;/a&gt;, &lt;a href="https://github.com/cadair"&gt;Stuart Mumford&lt;/a&gt;, and &lt;a href="https://github.com/braingram"&gt;Brett Graham&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I plan on writing the next post within a week or two, documenting the progress I make in the project.&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/06/20240607_1041_viciouseagle03/</guid><pubDate>Fri, 07 Jun 2024 09:41:56 GMT</pubDate></item><item><title>Venturing Forward : Test Post</title><link>http://openastronomy.org/Universe_OA/posts/2024/05/20240516_1347_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;Stay posted for future updates :).
&lt;!-- TEASER_END --&gt;&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/05/20240516_1347_viciouseagle03/</guid><pubDate>Thu, 16 May 2024 12:47:06 GMT</pubDate></item><item><title>About Me</title><link>http://openastronomy.org/Universe_OA/posts/2024/05/20240516_0000_viciouseagle03/</link><dc:creator>ViciousEagle03</dc:creator><description>&lt;p&gt;I am a second-year undergraduate student at the Indian Institute of Technology, Roorkee, majoring in Mathematics and Computing.
How is the blog made? The blog is created using Hugo, a static site generator, and it’s styled with the hugo-paper theme.
Contact Information Reach me at piyushsharma04321@gmail.com
&lt;!-- TEASER_END --&gt;&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2024/05/20240516_0000_viciouseagle03/</guid><pubDate>Wed, 15 May 2024 23:00:00 GMT</pubDate></item></channel></rss>
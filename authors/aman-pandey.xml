<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts by AMAN PANDEY)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/authors/aman-pandey.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 14 Jun 2025 01:58:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC Blog#4 (Final Submission)</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1225_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;It’s the end of GSoC 2022; man, it was a great experience! Starting with aimless contributions brought me to a project which united my two passions: programming and astrophysics. The three-month journey and the community bonding period were excellent learning experiences.&lt;/p&gt;
&lt;p&gt;From learning a new and robust language like Julia to using Unit Testing for real-world data, I learned a lot about programming. This period also tested my git skills (as open source is one of the best ways to get your hands dirty in it) as I resolved merge conflicts, changed branch heads whenever required, and always kept an eye on the log history. My whole project is presented here in terms of git commits and some explanation of what these are doing. In the end, I will point out what’s next from here, and I hope Stingray will grow up to become a beloved package like many others in the Julia Community.&lt;/p&gt;
&lt;p&gt;I did the project in 5PRs (three merged and two open to review), which are listed below:&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/1"&gt;&lt;em&gt;Implement Workflow&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/2"&gt;&lt;em&gt;Add Fourier methods and tests&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/3"&gt;&lt;em&gt;Implement GTI Reading and Handling&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Merged)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/7"&gt;&lt;em&gt;Implement EventList&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Open)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/9"&gt;&lt;em&gt;Documentation&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (Open)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also documented this journey in four other blogs: &lt;a href="https://medium.com/@aman_p/gsoc-blog-0-8f65bf844cd8"&gt;Blog0&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-1-cc0c0995d56e"&gt;Blog1&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-2-63d283e1a60b"&gt;Blog2&lt;/a&gt;, &lt;a href="https://medium.com/@aman_p/gsoc-blog-3-350c7b7dad61"&gt;and Blog3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting a package from scratch can look like a behemoth task; you can confuse which methods to begin with, what the architecture will be, and how I will ensure continuous testing. Fortunately, my mentors were very helpful, and in the community bonding period itself, I initialized a basic package with the help of PkgTemplate.jl with integrated CIs.&lt;/p&gt;
&lt;p&gt;My mentor &lt;a href="https://github.com/matteobachetti"&gt;&lt;strong&gt;Matteo&lt;/strong&gt;&lt;/a&gt; suggested I go on to implement Fourier methods first as they are the primary thing required to create power and cross-spectra from an array. I started on with it, and the PR was a great lesson both in terms of how much code I needed to port with passing tests and how idiomatic I had to keep it to discover the full power of Julia. My initial code was pretty pythonic, and my other mentor, &lt;a href="https://github.com/giordano"&gt;&lt;strong&gt;Mosè&lt;/strong&gt;&lt;/a&gt;, gave much good advice on how to fix them and keep the code readable. Still, due to the sheer amount of code and tests I needed to write, the code is currently non-idiomatic for a few functions, and I hope to make them efficient in the future.&lt;/p&gt;
&lt;p&gt;After this, I needed a working tool to handle GTIs; trust me; this was the best part of the project. I was having fun with different interval operations I needed to implement, looking at them from different angles and maintaining the code’s sanctity. The tests passed, and I had pretty idiomatic code written there with handling file reading (HDF5 and FITS) for some tests, which helped me in the future.&lt;/p&gt;
&lt;p&gt;After the mid-evals, I got somewhat busy due to tests and college courses. After the first week, I started contributing again by considering different ways to represent photon arrival and count data. Using structs and methods for them (including extending Base functions when required) was the way to go, and after half of the second phase, I managed to get a PR on these things though the code is still in review. One can now plot the LightCurves, read data from a FITS file and use the Fourier methods to get the power and cross-spectra and perform operations on the related GTIs. But how?&lt;/p&gt;
&lt;p&gt;In the final week, my focus was to provide documentation on the functions mentioned, taking help from the Python package and changing it as required, especially as the markdowns are different for both languages’ docstrings. I followed it with writing a user guide, although it is still incomplete in the current PR, and I hope to get it done well by the end of this month (working outside of GSoC :).&lt;/p&gt;
&lt;p&gt;As a whole, this project was exciting to me. I can safely say that I lacked experience in many parts, but my mentors were fantastic, and I had some great discussions with them. The essential power of Julia is how it handles memory and compiles the code as required (JIT), and with this in focus, the project can still grow to various extents.&lt;/p&gt;
&lt;p&gt;For example, good use of type systems in the Fourier methods, a clearer way to use generators (the resumable functions), and user APIs for Cross and Power Spectra would be the first thing this package needs working on. After this, we can implement other features like Bi-Spectra and Var-Energy Spectra. In the end, one can see how powerful Julia can be if programmed correctly. Below is the runtime for reading the same files in Python and Julia (Julia is doing almost 40 times faster). This order of speed boost is still an excellent achievement for Julia while keeping all the important arrays and metadata from the file in a struct.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/925/1*p-F3ErLlJtjTA4fSQSqeJw.png"&gt;&lt;figcaption&gt;Python Code&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/633/1*hyOqX2j2UxQ59IxKwxej4w.png"&gt;&lt;figcaption&gt;Julia Code&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;With this, I end this blog and this awesome GSoC program, with a hope to keep contributing to this and other open source projects and learning new things. Great thanks to my mentors, Open Astronomy and Google for providing this opportunity.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/736/0*eGlGa84zNsGaMHL0.jpg"&gt;&lt;figcaption&gt;Source: Pinterest&lt;/figcaption&gt;&lt;/figure&gt;&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=1c27a20f13a2" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220912_1225_aman-pandey-afk/</guid><pubDate>Mon, 12 Sep 2022 11:25:22 GMT</pubDate></item><item><title>GSoC Blog #3</title><link>http://openastronomy.org/Universe_OA/posts/2022/08/20220820_0702_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;Mid Evaluations are over, and I’m glad to be back at work. As the base functionality is done now, I am on to provide user APIs to create cross spectra and periodograms from actual astronomical data easily.&lt;/p&gt;
&lt;p&gt;I was busy the first week after the mid-term due to intern season at my campus, so that I couldn’t contribute much. Afterward, I started by understanding different functionalities related to photon count events next week. The plan was to:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Read the photon count data from different file formats and get the essential information like time, GTIs, PI channels, etc.&lt;/li&gt;&lt;li&gt;Create EventList struct and handle different methods like sorting, joining, filtering, and simulating these data.&lt;/li&gt;&lt;li&gt;Test these methods by appropriately re-binning, creating periodograms, and plotting the data.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;There was also modification in the git workflow as the documentation branch was based on the gti one, which now has its parent main.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;For the 3rd week, I have worked on the EventList APIs and the data reading part. Its currently implemented for the FITS extension, but I will expand to other formats like HDF5 or ECSV. I have also studied LightCurve structure and implemented a to and from conversion with EventLists, although its methods are needed to be worked upon.&lt;/p&gt;
&lt;p&gt;In the coming weeks, I aim to create extensive tests, debug these methods, and optimize them in Julia. After these are done, other features like coherence and time lags will also be necessary. The period will &lt;em&gt;end&lt;/em&gt; with documentation and refactoring of already existing codes, and &lt;em&gt;if&lt;/em&gt; I get time, I will work on variability vs. energy spectrum.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=350c7b7dad61" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/08/20220820_0702_aman-pandey-afk/</guid><pubDate>Sat, 20 Aug 2022 06:02:40 GMT</pubDate></item><item><title>GSoC Blog#2</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220726_0559_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;The first half of the coding period is almost done, and here I am with the updates! As stated at the end of the last blog, I started the 3rd week by improving the &lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/2"&gt;second PR&lt;/a&gt;. I performed pretty intensive memory and performance analysis on the functions in fourier.jl, using BenchmarkTools and .mem files to analyze bottlenecks in the program. With my mentors’ help, I removed many allocation and type-stability related issues during that time. I also had some problems with non-idiomatic code, like I could use multiple-dispatch or dot broadcast in functions, some of which I solved, and some are due for refactoring after the mid-evaluation. After finishing the improvements and getting my second PR merged, I planned to work on LightCurves and implement periodograms and other APIs so that users can easily manipulate photon count data. But my mentor suggested I implement file reading and mechanisms to manage the GTIs (Good Time Intervals) obtained from these files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Working out the GTI mechanisms&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had learned a lot from the previous PR, and one of the things was I should try to implement some of the methods in my way rather than using the python algorithms with an idiomatic Julian code in mind. I started the 4th week with methods for reading GTIs from a FITS file (For those unfamiliar, it is a file format for storing, processing, and transmitting scientific data, especially images). I used the FITSIO.jl package, and experimenting on the terminal led me to manipulate HDUs and their data. One thing I thoroughly thought of was the appropriate data structure of the GTIs. Should I use Intervals from the Intervals.jl package? Or a vector of vector like the python library does? I finally decided to use what I was using in the fourier.jl, an AbstractMatrix of Reals. It was easy to access data from them, and you could use slices to get a list of start and end times. For the operations, I had to convert among matrix, intervals frequently, and vectors as the Intervals.jl provided many ways to manipulate GTIs like union or intersection or getting its complement, i.e., Bad Time Intervals. With some more methods like creating masks and GTIs from conditions and implementing Tests for all of these functions, I was finished with the gti.jl file. A little performance analysis told me that the code was efficient. After some refactoring, like removing code duplication by merging union and intersection in the same function, I was done with the PR. It has some minor changes currently to be made before it gets merged.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;strong&gt;Working on the documentation&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lbM1DS0_-Ja0lb53Owb6PQ.png"&gt;&lt;/figure&gt;&lt;p&gt;As the mid evaluations have begun this week, I will be taking some time to write the docstring and deploy them on GitHub. The stingray python docs are pretty good, so I will mostly use them as a Base and tweak them as necessary (when there is a different function signature or the Julian way of doing things is different). Documenter.jl will be the package I would be using for this. The complete documentation will be a milestone for the end of the program, where I, along with my mentors, will try to write notebook tutorials for the package and host them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the second phase&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope to qualify for the mid-evals, after which the second phase will begin. The core implementation is done; users can now use the library and its different methods to read from a file, process the data, and create periodograms. The main motive now will be to ease its access and implement other helpful features, a major one of which will be plotting the periodograms. I initially proposed working with these APIs before mid-evals, but who knows about the future? I have done some things meant for the other half, so I guess it’s okay. As an end note, I am pretty much excited for the other half of this program, it has made me learn a lot, and the workings of Julia awe-inspire me as I explore it side by side. Goodbye for now!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=63d283e1a60b" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220726_0559_aman-pandey-afk/</guid><pubDate>Tue, 26 Jul 2022 04:59:13 GMT</pubDate></item><item><title>GSoC Blog #1</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220702_0631_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/0*kmysU0LzpIzm8qV4.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;Its time for my first blog during the coding period! We are into our 3rd week in the coding period, and already the journey is getting exciting, a little challenging, of course, but I am enjoying it. As I had mentioned in the earlier blog, I started the initial week with implementing the helper functions, Fourier analysis, and tests related to them from Python to Julia. By god, it was not an easy way through.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dealing with tests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started by understanding what the functions inside fourier.py did and quickly realized that without running tests, I would have a hard time working out the insides of some of the methods. I thus, started writing functions is Julia, understanding the parameters and their types and using external packages like ResumableFunctions or Statistics wherever necessary. After implementing normalizations for arrays, I worked on tests where the problems began. Out of Index errors, types not supported, and the same functionality implemented differently in Julia and Python started to take most of my time.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;For example, to create a histogram, we use &lt;em&gt;NumPy.histogram, &lt;/em&gt;pass it an array and number of bins, and it returns the required histogram in a tuple. For Julia, I had to use the package StatsBase, then call fit(Histogram, array, bins), which generates an object whose weight property is my result. But that is the fun. I’m slowly adjusting to handling such codes without class methods, which will be very necessary for this and the next week, as I look forward to implementing LightCurves and EventLists classes of the python package.&lt;/p&gt;
&lt;p&gt;Data handling, which I thought initially to be challenging, was although a smooth experience. Using the DataFrame package with the MetaData package turned out to be a very flexible approach while working with tables. I quickly implemented a large sample data using the HDF5 format suggested by my mentor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Making the PR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was about to complete this work when the government made the internet in my area inaccessible due to local protests. I couldn’t work that efficiently for three days and definitely couldn’t communicate with my mentor. After the internet was back, I quickly sorted out some issues and made a PR, but it wasn’t too good to be merged due to a few reasons. I didn’t provide type-annotations on the functions as many arguments were nothing (null in Julia), and providing types on them would cause the function to produce an error. My code also had some memory allocation and performance issues. The most encouraging thing was how my mentor Mosè cooperated with these issues. He advised me on many things, provided me with quick fixes, and commented on learning from these mistakes. I am certainly looking to fix these problems as soon as possible, learning along to write practical and high-performance Julia code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem now&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I quickly changed the code to be type annotated as I already knew about the types while understanding the codebase. There were not many type instabilities as I already had checked my functions with @code_warntype macro, and it was mostly clean. The main problem I’m facing now is unlike Python, Julia doesn’t have a tradition of defaulting values with null and checking if it’s null to provide more functionality ahead in code. This is the result of one of my @code_warntype runs:&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*nVtVLI6OIUyMQ9TqlIbqtQ.png"&gt;&lt;figcaption&gt;The Yellow Colour Indicates a type-instability, though it maybe important to use Unions of Nothing and a Concrete Datatype, thus it is only a warning (not red)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The code is not entirely Julian, and the tests take slightly longer to run compared to Python.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/840/1*dJ7COYI3hPgd-O3OYiv65w.png"&gt;&lt;figcaption&gt;Python tests run in 3.9s on avg&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Next two weeks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I intend to implement creating and working with LightCurves and then move on to EventLists and implement related helper functions and filters. My approach now will be to understand and sketch the functioning with a thorough working of tests and then implement it from scratch in a Julian way. Alongside, I will be improving the fourier.jl functions with what I learn and hope to get the PR merged by the start of the following week. I will be back with some more accounts of this exciting journey!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=cc0c0995d56e" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220702_0631_aman-pandey-afk/</guid><pubDate>Sat, 02 Jul 2022 05:31:49 GMT</pubDate></item><item><title>GSoC Blog #0</title><link>http://openastronomy.org/Universe_OA/posts/2022/06/20220614_1714_aman-pandey-afk/</link><dc:creator>AMAN PANDEY</dc:creator><description>&lt;p&gt;With the end of the community bonding period, my GSoC 2022 project has officially started. It will be an exciting journey, and I will be documenting my experience and work in a series of blogs in the future.&lt;/p&gt;
&lt;p&gt;I’m &lt;strong&gt;Aman Pandey, &lt;/strong&gt;and this blog is about my introduction to open source and learning Julia that lead me to take part in the Google Summer of Code for Open Astronomy, juliaAstro and Stingray to be specific. I also enlist my community bonding period work and what I intend to do next week.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*dfjiDfMcY8h9eEOySAnxbA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;My journey to Open Source&lt;/strong&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/310/1*6cUCFKPtaiyl4vQ3Q1YkLA.jpeg"&gt;&lt;/figure&gt;&lt;p&gt;My intro to the open-source world was through a game called TwilioQuest. It had a level where I had to configure git and GitHub and then contribute to their Open Pixel Art repo by changing a JSON file. It was fun, but I wasn’t fully aware of the open-source community until I started understanding the Godot engine ( A 3D game engine in C++). I followed the instructions for compiling it on Windows using VSCode, but I met an issue. I couldn’t reproduce the instructions of the doc and created a pull request to change the docs when I found the solution. The community was very helpful, and after some suggestions, I could finally merge my first PR!&lt;/p&gt;
&lt;p&gt;Through the internet, I learned about GSoC as a program to foster an open-source culture among students, especially to guide newcomers to contribute code and engage with the community. I started searching for organizations that interested me and found OpenAstronomy (I was fascinated by the different projects going on in the organization). A thorough search made me sure to start learning Julia to contribute to the “Spectral Timing in Julia” project. While trying to contribute, I was fascinated by the structure of a Julia program and its excellent features like multiple dispatch and Abstract and Concrete Type System. Part of it was due to the incredible guidance by one of the project’s mentors, &lt;strong&gt;Mosè Giordano, &lt;/strong&gt;which shows the role of community while developing open-source software. I was thrilled when my project was announced as selected; it will be a great summer this year!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Community Bonding Period&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My project involves porting the Stingray package of python to Julia, which consists of different time series analysis methods to deal with periodicities in X-Ray signals coming from massive celestial objects. I started the period by learning about different methods implemented in the python package like creating periodograms, normalizing them, and using them for data types like NumPy iterables or custom objects like LightCurves and EventLists. At the same time, I focused on learning about Julia and its best practices and understanding how to write clean, high-performance, and documented code.&lt;/p&gt;
&lt;p&gt;I committed my first PR for the project by initializing the package and adding documentation and continuous integration (CI) support. I then looked forward to porting the fourier.py file and implementing tests alongside it and was reasonably successful in it. In my opinion, it was a significant period; I discussed many exciting things with the mentors, like using DataFrames and generating distribution to test the periodograms with array inputs. I myself worked on writing type-stable code (which I was introduced to while working on a PR for another juliaAstro package, AstroLib) and diving deep into topics like dispatch and type systems, which are the testament that open source contribution can enhance your developer skills multi-folds as these topics are not restricted to any specific programming language.&lt;/p&gt;
&lt;p&gt;An example of type-unstable function :&lt;/p&gt;
&lt;pre&gt;function foo()&lt;br&gt;    x = 1&lt;br&gt;    for i = 1:10&lt;br&gt;        x /= rand()&lt;br&gt;    end&lt;br&gt;    return x&lt;br&gt;end&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Upcoming Week&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I intend to implement the utility functions and fourier.py file of Stingray in Julia to create periodograms and cross spectra from tables. Then, I will move on to implement the light curves and event lists, through which, in the future, I will be able to create full-fledged periodograms and cross-spectra. Proper Testing and performance-related aspects will be sincerely followed throughout the project.&lt;/p&gt;
&lt;p&gt;I am excited about this summer and expect to learn much about software development, open-source, and the programming community throughout this journey. Thanks to Google, Open Astronomy, juliaAstro, Stingray, and my mentors &lt;a href="https://github.com/matteobachetti"&gt;Matteo Bachetti&lt;/a&gt; and &lt;a href="https://github.com/giordano"&gt;Mosè Giordano&lt;/a&gt; for providing me this opportunity. Let the coding phase start!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8f65bf844cd8" width="1"&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2022/06/20220614_1714_aman-pandey-afk/</guid><pubDate>Tue, 14 Jun 2022 16:14:10 GMT</pubDate></item></channel></rss>
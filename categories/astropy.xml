<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about Astropy)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/astropy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 30 Nov 2024 01:15:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>astropy@GSoC Blog Post #6.5 - Week 10, Final Evaluations</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt; You know, 7's my lucky number.&lt;/p&gt;
&lt;p&gt;And Happy Independence Day!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</guid><pubDate>Sat, 14 Aug 2021 21:36:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #6, Week 8&amp;9</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210809_0848_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;b&gt;Heads-up about the Progress of   &lt;a href="https://github.com/astropy/astropy/pull/11897"&gt;#11897&lt;/a&gt;&lt;/b&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  In summary the situation of the concerned PR a few days back was 4 types of CI   test errors, one bug and possibly a need for modification of part of the code   copied from pycdsreadme. All these have been taken care of as detailed below,   but for the numpy depreciation warnings that keep coming up. I don't think we   can do anything about the latter's persistence as of now. I shall comment more   about it on GitHub as well. &lt;/div&gt;&lt;div&gt;  &lt;ol style="text-align: left;"&gt;    &lt;li&gt;      &lt;i&gt;File not found error&lt;/i&gt;: Moritz's HW, i.e. using       &lt;span style="font-family: courier;"&gt;get_pkg_data_filename&lt;/span&gt; import,       directly took care of this.     &lt;/li&gt;    &lt;li&gt;      &lt;i&gt;Error in coord col decimal places&lt;/i&gt;: The precision of the coordinate       component columns was getting set arbitrarily, which created difference in       the output for 32-bit and 62-bit machines, and possibly between different       operating systems. This has been corrected by having a fixed number of 12       digits after decimal for &lt;b&gt;RAs,&lt;/b&gt; &lt;b&gt;DEs&lt;/b&gt; and the       latitude/longitude columns of Galactic and Ecliptic coords. This error       also relates with the Formats bug.     &lt;/li&gt;    &lt;li&gt;      &lt;span style="font-family: courier;"&gt;&lt;i&gt;SphericalRepresentation&lt;/i&gt;&lt;/span&gt;&lt;i&gt; col error&lt;/i&gt;: Now, this was a bit major issue compared to the two       above, although the solution was only 2 line changes. When the coords cols       were checked for and divided into components, the original SkyCoord col       was deleted right within the loop. This made the iteration index of the       loop to point to i+2 column after deletion, where i is the index of the       original &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col. That is,       effectively skipping the immediate next column after the       &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col, as it would have       receded by one place in the list. Got this fixed by popping the original       &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col after all the       columns in the table have been iterated over. This way all       &lt;span style="font-family: courier;"&gt;object&lt;/span&gt; type columns are       converted to &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; objects       with &lt;span style="font-family: courier;"&gt;str&lt;/span&gt; values.     &lt;/li&gt;    &lt;li&gt;      &lt;i&gt;~table.tests and &lt;/i&gt;&lt;span style="font-family: courier;"&gt;&lt;i&gt;test_write&lt;/i&gt;&lt;/span&gt;&lt;i&gt; failures&lt;/i&gt;: All these errors were warnings due to depreciation of       numpy specific aliases for different Python types. Most previous tests in       Astropy appear to use these now depreciated numpy types, which raises       warnings during testing our code. I have been able to provide remedy for       majority of these by additionally using       &lt;span style="font-family: courier;"&gt;np.issubdtype(col.dtype, np.integer)&lt;/span&gt;      while checking if the columns has integer values, however, tests with       oldest supported version of all dependencies still fails. See my GitHub       comment for more info.     &lt;/li&gt;  &lt;/ol&gt;  &lt;i&gt;&lt;div&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/div&gt;The &lt;/i&gt;&lt;span style="font-family: courier;"&gt;&lt;i&gt;formats&lt;/i&gt;&lt;/span&gt;&lt;i&gt; bug&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;  This was another major problem we had stumbled upon. It took me a while to   skim through various docs and codes to find the optimum fix for this. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Our initial insight was that the difference between the Byte-By-Byte   description and the data part of the written table, when the   &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; argument is passed to the   &lt;span style="font-family: courier;"&gt;write&lt;/span&gt; function, related in some   manner to the string formatting part of the code. By first look itself, it was   evident that there isn't any provision in the writer for cases when the   columns already contain a   &lt;span style="font-family: courier;"&gt;format&lt;/span&gt; attribute, which is what is   assigned when &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; is passed, as   I had written here back then. Creating allowance for this was easy enough,   right away correcting the test outputs. Now, both the Byte-By-Byte and the   table data had the number of decimal digits, or whatever other format for that   matter, we wanted them to have. Apart from the internally created coordinate   component columns, for which the number of digits after decimal was fixed. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  It is when we want to go a step further than this and wanna truncate or   eradicate the string formatting part to obtain the column format, that we   stumble upon a road block. There are two concerns, &lt;/div&gt;&lt;div&gt;  &lt;ul style="text-align: left;"&gt;    &lt;li&gt;      If no &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; argument is       passed, &lt;span style="font-family: courier;"&gt;col.format&lt;/span&gt; will be set       to &lt;span style="font-family: courier;"&gt;None&lt;/span&gt;.     &lt;/li&gt;    &lt;li&gt;      Even if we already know the column format, say       &lt;span style="font-family: courier;"&gt;.5f&lt;/span&gt;, we still need to evaluate       the maximum size of the value strings of the column in most cases, and do       some formatting to have the format in CDS/MRT recommendation,       &lt;span style="font-family: courier;"&gt;Fx.5&lt;/span&gt;.     &lt;/li&gt;  &lt;/ul&gt;  The column &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; passed in the   formats argument are set by using the in-build Python function   &lt;span style="font-family: courier;"&gt;format&lt;/span&gt; (&lt;a href="https://docs.python.org/3/library/functions.html#format"&gt;https://docs.python.org/3/library/functions.html#format&lt;/a&gt;). For cases when no formats argument is passed, the default behavior when   writing the table data, for instance in the   &lt;span style="font-family: courier;"&gt;FixedWidth&lt;/span&gt; writer is to set the   column format to &lt;span style="font-family: courier;"&gt;''&lt;/span&gt; which is   equivalent to saying   &lt;span style="font-family: courier;"&gt;val = str(val)&lt;/span&gt;. (&lt;a href="https://docs.astropy.org/en/stable/table/construct_table.html#table-format-string"&gt;https://docs.astropy.org/en/stable/table/construct_table.html#table-format-string&lt;/a&gt;) &lt;span style="font-family: courier;"&gt;FixedWidth&lt;/span&gt; uses the maximum   length of these strings to get the column widths.   &lt;b&gt;So, there the string formatting part of the code is essential if we want to     know the correct format for columns without string values.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  However, there may be another solution to this that can be tried in the   long-term. I was curious to know what other writers in Astropy did in such   situations when the column format needs to be given explicitly in the header   of the written table. There aren't extravagantly many such use cases, but the   FITS standard tables do have format keywords in the header as serve the   purpose well. So, looking over the Astropy FITS writer, I found the way in   which it deals with the problem of assigning column formats is by separately   defining all the formats that can be and then using a custom   &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; class which has some default   format attributes. (See:&lt;br&gt;&lt;a href="https://github.com/astropy/astropy/blob/main/astropy/io/fits/column.py"&gt;https://github.com/astropy/astropy/blob/main/astropy/io/fits/column.py&lt;/a&gt;). ASCII writers also have a custom   &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; class, but the attributes   that it currently has are exceedingly lacking to be of any use to us now. (&lt;a href="https://github.com/astropy/astropy/blob/79323de928e87827526ed8fce04986a5dd459794/astropy/io/ascii/core.py#L270"&gt;https://github.com/astropy/astropy/blob/79323de928e87827526ed8fce04986a5dd459794/astropy/io/ascii/core.py#L270&lt;/a&gt;) In the long-run, we could take motivation from the FITS writer and make   changes herein.&lt;br&gt;&lt;br&gt;&lt;i&gt;Other updates&lt;/i&gt;&lt;/div&gt;&lt;div&gt;  &lt;i&gt;&lt;br&gt;&lt;/i&gt;  &lt;div&gt;    &lt;div&gt;      I have began to work on the other two branches for Time cols and MRT       metadata resp and would have them done in some time.     &lt;/div&gt;    &lt;div&gt;      On an unrelated note, I found that the       &lt;span style="font-family: courier;"&gt;test_cds_header_from_readme.py&lt;/span&gt;      test file in       &lt;span style="font-family: courier;"&gt;&lt;a href="http://astropy.io/"&gt;astropy.io&lt;/a&gt;.ascii.tests&lt;/span&gt;      contains some CDS reading tests. It was recently modified by the 11593 PR       (&lt;a href="https://github.com/astropy/astropy/pull/11593/files"&gt;https://github.com/astropy/astropy/pull/11593/files&lt;/a&gt;). I imagine that these tests can be incorporated within test_cds.py and       then we won't perhaps have to move CDS/MRT tests to any other test file?     &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210809_0848_suyog7130/</guid><pubDate>Mon, 09 Aug 2021 07:48:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #5, Week 6&amp;7</title><link>http://openastronomy.org/Universe_OA/posts/2021/07/20210721_2000_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;How are you?&lt;/p&gt;
&lt;p&gt;My dear mentors and I have decided to have the MRT (Machine Readable Table) format writing first. The same CDS code as been used now will be used, just the template of the written table will be in the MRT format.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Points to be noted regarding this and the immediate things that have been and will done are as follows:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul style="text-align: left;"&gt;&lt;li&gt;Leave out writing all the optional CDS ReadMe fields as of now. These can be dealt with individual PRs later.&lt;/li&gt;&lt;li&gt;Some tests fail because &lt;span style="font-family: courier;"&gt;start_line = None&lt;/span&gt; doesn't work. It has been introduced once again within &lt;span style="font-family: courier;"&gt;CdsData.write&lt;/span&gt; function in addition to been defined in the main &lt;span style="font-family: courier;"&gt;Cds&lt;/span&gt; class. The test failure occurs because CdsData now inherits from &lt;span style="font-family: courier;"&gt;FixedWidthData&lt;/span&gt; which itself inherits &lt;span style="font-family: courier;"&gt;basic.BasicReader&lt;/span&gt; instead of BaseReader. I should make sure that all tests pass properly.&lt;/li&gt;&lt;li&gt;Have a template for MRT tables and write them first. &lt;b&gt;Title&lt;/b&gt;, &lt;b&gt;Authors&lt;/b&gt;, &lt;b&gt;Date&lt;/b&gt;, &lt;b&gt;Caption&lt;/b&gt; and &lt;b&gt;Notes&lt;/b&gt; sections, i.e. all sections except the Byte-By-Byte and the Data itself, will be left blank in the template, with warning for the user to put them in manually afterwards.&lt;/li&gt;&lt;li&gt;Documentation for the CDS/MRT format writer.&lt;/li&gt;&lt;li&gt;At present issue a warning note for tables with two or more mix-in columns (&lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; cols primarily). If ways to correctly work out such situations is thought of, add that feature in a separate PR.&lt;/li&gt;&lt;li&gt;Work with a copy of the original table, so that  the copy is modified and not the original table, when component coordinate columns are written. The modified copy of the table is written to a file, while the user retains access to the columns of the original table.&lt;/li&gt;&lt;li&gt;Need to have features to recognise non Spherical coordinates, like the Cartesian coordinates, and either skip them or write them as Single column string values. Add test for such other coordinates. Also for cases when coordinates are in a &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; object but the frame is not Spherical.&lt;/li&gt;&lt;li&gt;Have two other templates, one for CDS in which the user fills values of optional fields manually later and another in which filling optional fields can be done from within Astropy, via a &lt;span style="font-family: courier;"&gt;cdsdict&lt;/span&gt;. In separate PRs. Here too write only the required fields in the ReadMe first, like &lt;b&gt;Abstract&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Have features for Time columns later within the original PR or much later.&lt;/li&gt;&lt;li&gt;Simplify how column format is obtained for float columns. The current manner of string formatting is too complicated. &lt;span style="font-family: courier;"&gt;col.width&lt;/span&gt; value can be directly used in some cases. The &lt;span style="font-family: courier;"&gt;Outputter&lt;/span&gt; class will also know the column format since it writes out the table.&lt;/li&gt;&lt;li&gt;Other minor/major edits and modifications as suggested by others.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;With this PR for the MRT format table writing getting eventually merged to Astropy, the main goal of my astropy@GSoC project will be completed. The support for other extra features essentially serves as appendages to the primary task been done by this PR.&lt;/div&gt;&lt;div&gt;Let's see how it goes.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Oh! On another note, a few days back I received the GSoC First Evaluations payment! 😁&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Adious!&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/07/20210721_2000_suyog7130/</guid><pubDate>Wed, 21 Jul 2021 19:00:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #4, Week 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/07/20210709_2232_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;How you doing?&lt;/p&gt;
&lt;p&gt;Yup! Lots of things done again. I have finally completed the main goal of the project. Yahoo!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/07/20210709_2232_suyog7130/</guid><pubDate>Fri, 09 Jul 2021 21:32:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #3, Week 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/06/20210623_2223_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt;So, it's the start of the 3rd week now. I will be virtually meeting Aarya and Moritz again Tom.&lt;br&gt;&lt;br&gt;For the past few weeks now, I have been pushing commits to a Draft PR &lt;a href="https://github.com/astropy/astropy/pull/11835"&gt;https://github.com/astropy/astropy/pull/11835&lt;/a&gt; on GitHub. I wanted to have something working quite early in the project, in order to be able to pinpoint accurately when something doesn't work. This is why I started with directly adding the &lt;b&gt;cdspyreadme&lt;/b&gt; code within Astropy. Afterwards, I am also writing the code from scratch. As more of the required features from &lt;b&gt;cdspyreadme&lt;/b&gt; get integrated into &lt;i&gt;cds.py&lt;/i&gt;, those files and codes added earlier will be removed.&lt;br&gt;&lt;br&gt;About the reading/writing to Machine Readable Table format, in fact I wrote about it briefly in my GSoC Proposal that I could attempt it as an extension. I don't have an opinion on whether or not it should have it's own format classes etc. However, since the title of my GSoC project is to &lt;b&gt;Add a CDS format writer to Astropy&lt;/b&gt;, I would prefer to work on the CDS format writer first and then on the MRT format. The MRT header anyway appears to be a bit simpler than the CDS header, so there shouldn't be much difficulty in the extension.&lt;br&gt;&lt;br&gt;So, in a nutshell, this is my workflow:&lt;br&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Try out directly using &lt;b&gt;cdspyreadme&lt;/b&gt; from within Astropy.&lt;/li&gt;&lt;li&gt;Add CdsData.write method.&lt;/li&gt;&lt;li&gt;Add a ByteByByte writer.&lt;/li&gt;&lt;li&gt;Write features to add complete ReadMe to the Header, starting off with having both ReadMe and Data in a single file.&lt;/li&gt;&lt;li&gt;Have features for writing separate CDS ReadMe and Data file.&lt;/li&gt;&lt;li&gt;Further work on some specific table columns, for instance, those containing Units and Coordinates.&lt;/li&gt;&lt;li&gt;Add appropriate tests along the way.&lt;/li&gt;&lt;li&gt;Resolve other issues that come up.&lt;/li&gt;&lt;li&gt;MRT format reader/writer.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;I have completed the first three tasks and will now work on the fourth. I think by the time this finishes, a separate &lt;i&gt;CDSColumn.py&lt;/i&gt; won't be required. I can open another PR which adds the Data writer, in the meantime.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's see how it goes!&lt;/div&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/06/20210623_2223_suyog7130/</guid><pubDate>Wed, 23 Jun 2021 21:23:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #3, Week 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/06/20210622_2223_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt;So, it's the start of the 3rd week now. I will be virtually meeting Aarya and Moritz again Tom.&lt;br&gt;&lt;br&gt;For the past few weeks now, I have been pushing commits to a Draft PR &lt;a href="https://github.com/astropy/astropy/pull/11835"&gt;https://github.com/astropy/astropy/pull/11835&lt;/a&gt; on GitHub. I wanted to have something working quite early in the project, in order to be able to pinpoint accurately when something doesn't work. This is why I started with directly adding the &lt;b&gt;cdspyreadme&lt;/b&gt; code within Astropy. Afterwards, I am also writing the code from scratch. As more of the required features from &lt;b&gt;cdspyreadme&lt;/b&gt; get integrated into &lt;i&gt;cds.py&lt;/i&gt;, those files and codes added earlier will be removed.&lt;br&gt;&lt;br&gt;About the reading/writing to Machine Readable Table format, in fact I wrote about it briefly in my GSoC Proposal that I could attempt it as an extension. I don't have an opinion on whether or not it should have it's own format classes etc. However, since the title of my GSoC project is to &lt;b&gt;Add a CDS format writer to Astropy&lt;/b&gt;, I would prefer to work on the CDS format writer first and then on the MRT format. The MRT header anyway appears to be a bit simpler than the CDS header, so there shouldn't be much difficulty in the extension.&lt;br&gt;&lt;br&gt;So, in a nutshell, this is my workflow:&lt;br&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Try out directly using &lt;b&gt;cdspyreadme&lt;/b&gt; from within Astropy.&lt;/li&gt;&lt;li&gt;Add CdsData.write method.&lt;/li&gt;&lt;li&gt;Add a ByteByByte writer.&lt;/li&gt;&lt;li&gt;Write features to add complete ReadMe to the Header, starting off with having both ReadMe and Data in a single file.&lt;/li&gt;&lt;li&gt;Have features for writing separate CDS ReadMe and Data file.&lt;/li&gt;&lt;li&gt;Further work on some specific table columns, for instance, those containing Units and Coordinates.&lt;/li&gt;&lt;li&gt;Add appropriate tests along the way.&lt;/li&gt;&lt;li&gt;Resolve other issues that come up.&lt;/li&gt;&lt;li&gt;MRT format reader/writer.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;I have completed the first three tasks and will now work on the fourth. I think by the time this finishes, a separate &lt;i&gt;CDSColumn.py&lt;/i&gt; won't be required. I can open another PR which adds the Data writer, in the meantime.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's see how it goes!&lt;/div&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/06/20210622_2223_suyog7130/</guid><pubDate>Tue, 22 Jun 2021 21:23:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #2, Week 1&amp;2</title><link>http://openastronomy.org/Universe_OA/posts/2021/06/20210619_2154_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;How are you?&lt;/p&gt;
&lt;p&gt;So, it's been two weeks of astropy@GSoC work already. Of course I have been damn busy! With the last commit made to the draft PR &lt;a href="https://github.com/astropy/astropy/pull/11835"&gt;https://github.com/astropy/astropy/pull/11835&lt;/a&gt;, a few hours back, I have successfully written a basic CDS writer. And voilà it works, albeit without the ReadMe at present! 😁&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note that I am quite unlikely to go into technical details here in these posts. There are two reasons for this. Hhm..., Na I guess there's just one single reason. It would be too repetitive a task to write them. I already write aplenty about those in the GitHub comments and other communications. And of course, the whole codes I am writing during the project are available publicly on GitHub, for the overly curious kind. Moreover, the final report is gonna have more than ample discussion too, because I like to explain myself a lot. 😐 What then is the need to write all that here again? So consider these posts my plain uncouth thoughts, which in any case, I suppose, aligns more with the spirit OpenAstronomy asks these for.&lt;/p&gt;
&lt;p&gt;On a second important point, honestly, these Astropy people are really intelligent. It would appear, even more as the project progresses, that they knowingly marked a normal project as &lt;i&gt;Easy&lt;/i&gt; to lure some innocent students! 😂&lt;/p&gt;
&lt;p&gt;Anyway, Bye.&lt;/p&gt;
&lt;p&gt;See ya the next time! 🙋‍♂️&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/06/20210619_2154_suyog7130/</guid><pubDate>Sat, 19 Jun 2021 20:54:00 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #1</title><link>http://openastronomy.org/Universe_OA/posts/2021/06/20210606_1659_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;div&gt;Hey there,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How are you?&lt;/div&gt;&lt;div&gt;Chances are that you are coming across me for the first time.&lt;/div&gt;&lt;div&gt;Nice meeting you too! 😄&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Since this is an introductory astropy@GSoC Blog Post, I would keep things   brief.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;  &lt;div class="separator" style="clear: both; text-align: center;"&gt;    &lt;img alt="" height="336" src="https://lh3.googleusercontent.com/-kVduvrsYzQ4/YL0ClAcy0hI/AAAAAAAA3Yk/PrbBQBkgxu8Y_f7-qpLAPlI6tr0zISXFgCLcBGAsYHQ/w336-h336/image.png" width="336"&gt;&lt;div style="margin-left: 1em; margin-right: 1em;"&gt;                      &lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://lh3.googleusercontent.com/-OkQcow92n4s/YL0DELFw56I/AAAAAAAA3Y0/43e2Ak8Bsy8VaTSw6RYB3ryocKQUCnM1ACLcBGAsYHQ/image.png" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img alt="" height="154" src="https://lh3.googleusercontent.com/-OkQcow92n4s/YL0DELFw56I/AAAAAAAA3Y0/43e2Ak8Bsy8VaTSw6RYB3ryocKQUCnM1ACLcBGAsYHQ/image.png" width="320"&gt;&lt;/a&gt;&lt;img alt="" height="169" src="https://lh3.googleusercontent.com/-qshucfTcxpY/YL0CwsGOS2I/AAAAAAAA3Yo/OGuKkhEkZtkmz3xw6qVy3YYTANGN5Zi2gCLcBGAsYHQ/w169-h169/image.png" style="text-align: center;" width="169"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As you probably already know, my name is Suyog and I am a participant for Google Summer of Code (GSoC) 2021. Over the course of the next 10 weeks or so, I will be working on the Astropy project under the umbrella organisation OpenAstronomy. During this while, I aim to add a CDS format writer to the Astropy library with the help of my affable mentors Aarya and Moritz.   &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I had actually also applied for GSoC last summer, however I had failed to pass   one of the eligibility criteria, and so wasn't selected. This astropy@GSoC   project, therefore, is quite an awesome opportunity for me. I am looking   forward to making the most of it and enjoying the time all the same. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There are two preliminary observations:&lt;/div&gt;&lt;div&gt;      1. The associated stipend, albeit somewhat lower than what used   to be the case a few years back, is freaking awesome. 😉 &lt;/div&gt;&lt;div&gt;      2. Dunno, why this project is marked as Difficultly Low!?   Nothing as easy as being just the third person to write a Table writer for the   world's largest Astronomy code library! 😂😎 &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alright. Bye.&lt;/div&gt;&lt;div&gt;See ya the next time! 🙋‍♂️&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Stay tuned for more GSoC updates, or what is far better, for the next post in   general. &lt;/div&gt;
&lt;!-- TEASER_END --&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/06/20210606_1659_suyog7130/</guid><pubDate>Sun, 06 Jun 2021 15:59:00 GMT</pubDate></item><item><title>Final GSoC Post</title><link>http://openastronomy.org/Universe_OA/posts/2019/08/20190825_1632_tcjansen/</link><dc:creator>astrojansen</dc:creator><description>&lt;p&gt;Wow, what a journey! It’s hard to believe that GSoC is coming to an end. This project has taken quite a few twists and turns, which I will attempt to lead you through here, but ultimately I think it has all come together into a product that will be useful for anyone in the astronomical … Continue re &lt;a class="reference external" href="https://astrotiff.home.blog/2019/08/25/final-gsoc-post/"&gt;...READ MORE...&lt;/a&gt;&lt;/p&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2019/08/20190825_1632_tcjansen/</guid><pubDate>Sun, 25 Aug 2019 15:32:49 GMT</pubDate></item><item><title>Week 13: Hello from Reykjavik!</title><link>http://openastronomy.org/Universe_OA/posts/2019/08/20190820_1923_tcjansen/</link><dc:creator>astrojansen</dc:creator><description>&lt;p&gt;What I completed this week: Moved basically all of the stuff I’ve been exploring with synphot over to astroplan, which in hindsight makes more sense! In brief, this is what I did: Added a new module exptime.py to astroplan, which uses synphot to calculate the exposure time needed to obtain a given s &lt;a class="reference external" href="https://astrotiff.home.blog/2019/08/20/week-13-hello-from-reykjavik/"&gt;...READ MORE...&lt;/a&gt;&lt;/p&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2019/08/20190820_1923_tcjansen/</guid><pubDate>Tue, 20 Aug 2019 18:23:53 GMT</pubDate></item></channel></rss>
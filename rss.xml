<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy</title><link>http://openastronomy.org/Universe_OA/</link><description>This is an aggregator of openastronomy people</description><atom:link href="http://openastronomy.org/Universe_OA/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 10 Jul 2025 02:06:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Moving towards the right approach</title><link>http://openastronomy.org/Universe_OA/posts/2025/07/20250703_1115_adnan-itis/</link><dc:creator>Mohammad Adnan</dc:creator><description>&lt;h4&gt;&lt;br&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt; The last few weeks have been a whirlwind of ideas, coding, and rethinking as we figured out the best way to build my dashboard project.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Our First Idea:&lt;/b&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;My initial plan seemed pretty logical. I was going to download all the raw data (the "event files"), process them into lightweight &lt;code&gt;h5 &lt;/code&gt;files full of handy PNGs, and stick them all in an S3 bucket. The dashboard would just grab these pre-made files.&lt;/p&gt;
&lt;p&gt;It was a neat and tidy plan, but the more we thought about it, a static, deployed app . We decided to make something that a user could clone and run right on their own local machine.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The Next Step: &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;So, that's what we did. The new idea was to build a dashboard that anyone could just grab from a repository and run on their own computer. No big deployment , In this version, the user would download the source data they were interested in, and my dashboard would help them create the plots and data products right there on their machine.&lt;/p&gt;
&lt;p&gt;But that created a whole new problem: asking people to download gigabytes of data and clog up their own hard drives. That didn't feel very user-friendly, and it was a major headache waiting to happen.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The "Aha!" Moment: Why Not Go Where the Data Already Lives?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;This is when we had the real breakthrough. It was a total game-changer. Instead of moving massive datasets around, we realized we could just move our little dashboard &lt;i&gt;to the data&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;By running everything on SciServer, where all the telescope data already lives, the user doesn't have to download a single thing. Suddenly, the headache of huge downloads and local storage just... vanished. All the complex processing happens on SciServer's temporary "scratch" storage. It's faster, way more efficient, and saves everyone a lot of trouble. The only time we spend now is on the actual science—the calibration and corrections.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;So, Where Are We Now?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;I'm really happy to say that I have a working version of the dashboard running with this new, much smarter approach! All the major functions are in place.&lt;/p&gt;
&lt;p&gt;To be honest, the user interface is still a bit basic—it looks like an engineer built it (which, well, I did). So my next big task is to clean it up and make it look more polished.&lt;/p&gt;
&lt;p&gt;To give you a little peek, here’s what the initial draft looks like:&lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqRuuwud2lD3OPYDA98yZsgfyxEnaEpJ-NATxEF1f1RcSVfJmDslHtcuF5wXuGK20adNNEtYe2e8pbikYPuBHEUY2auZen722r_s-ipQhFxuunj9_Eet7K21aPqAeKbblKpK0nRGcoMGwaN2eYfYvUqxTazTCCVgrn8EfkDy9lcsRMZ1YuEi1lam8pb08/s1906/Screenshot%202025-06-30%20100541.png" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img border="0" height="237" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqRuuwud2lD3OPYDA98yZsgfyxEnaEpJ-NATxEF1f1RcSVfJmDslHtcuF5wXuGK20adNNEtYe2e8pbikYPuBHEUY2auZen722r_s-ipQhFxuunj9_Eet7K21aPqAeKbblKpK0nRGcoMGwaN2eYfYvUqxTazTCCVgrn8EfkDy9lcsRMZ1YuEi1lam8pb08/w423-h237/Screenshot%202025-06-30%20100541.png" width="423"&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As we get closer to the mid-term evaluations, my goals are coming into focus. First up, I'll be syncing with my mentors, @matteobachetti &amp;amp; @Gullo, to make sure we're all on the same page with going all-in on SciServer. After that, I'm excited to start making the UI more dynamic and adding some cool new features.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2025/07/20250703_1115_adnan-itis/</guid><pubDate>Thu, 03 Jul 2025 10:15:00 GMT</pubDate></item><item><title>Seeking Fast at Any Point in a BZ2 Compressed File</title><link>http://openastronomy.org/Universe_OA/posts/2025/07/20250702_0858_prtm2110/</link><dc:creator>Pratham</dc:creator><description>&lt;p&gt;Hey everyone welcome to the second episode of my Google Summer of Code project series, where I’m working on partial decompression for large datasets.&lt;/p&gt;
&lt;p&gt;So, what’s the big catch here? Well, the CO₂ dataset I’m working with is about 6 GB in its compressed .bz2form, and when you decompress it, it explodes into 50 GB. Most systems struggle to load that much data into memory or parse it into a DataFrame, either due to storage limits, memory, or swap issues.&lt;/p&gt;
&lt;p&gt;And obviously not everyone wants the whole 50 GB anyway. Usually, people need just a 1 GB chunk from somewhere inside. So decompressing the entire thing just to fetch a small part is a massive waste of time and resources.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;That’s where I built a pretty clever mechanism to handle this, saving both storage and a whole lot of time. Here’s how it works:&lt;/p&gt;
&lt;p&gt;The Problem with Seeking in bz2 If a user wants to randomly seek to any point in a decompressed stream (without decompressing the whole thing), technically you can, but there’s a catch bz2 doesn’t support random access. Even if you run something like: &lt;strong&gt;&lt;em&gt;`f.seek(1024*1024*1024)`&lt;/em&gt;&lt;/strong&gt; to jump to the 1 GB mark, under the hood, it still has to decompress from the start up to that point. Which means a lot of wasted time.&lt;/p&gt;
&lt;p&gt;The Trick is &lt;em&gt;Memory Mapping and Indexing&lt;/em&gt;, Here’s where the first optimization comes in that is memory mapping the decompressed byte offsets to the corresponding compressed byte positions. It’s a one-time cost for us maintainers. We generate this mapping and share an index file with users. Thankfully, there’s already a package called indexed_bzip2 that can seek to a compressed offset directly practically instantly.&lt;/p&gt;
&lt;p&gt;But users aren’t going to query in bytes. They’ll request data based on something meaningful in this case, wavenumber (in cm⁻¹).&lt;/p&gt;
&lt;p&gt;So I created another mapping: from wavenumber to the corresponding decompressed byte offset. When a user queries for a wavenumber, it first maps to the decompressed offset, and from there to the memory offset using the indexed_bzip2 mapping we created earlier. This mapping is built at intervals of 500 MB essentially creating fixed virtual blocks in the decompressed stream.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-BWgwHBWz8dmDtlQQY-ntw.png"&gt;&lt;/figure&gt;&lt;p&gt;If a user requests a wavenumber lower than a known value, it finds the largest known offset smaller than the current wavenumber. For a higher wavenumber, it finds the lower bound in the mapping. I finally got to use binary search in a real project for this lookup and it makes the lookup super fast.&lt;/p&gt;
&lt;p&gt;Keeping fixed-size blocks also makes it easier to maintain a caching mechanism later. If we had arbitrary block sizes, caching would be a pain. But with fixed 500 MB chunks, we can decompress extra blocks and combine them as needed, without overcomplicating the system.&lt;/p&gt;
&lt;p&gt;In the next episode, I’ll share some real benchmarks on how much time and storage this optimization saves. It’s been a fun problem to solve and finally a chance to use a binary search outside of textbook problems, stay tuned for the next episode ;)&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=5ee78f20670f" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/07/20250702_0858_prtm2110/</guid><pubDate>Wed, 02 Jul 2025 07:58:20 GMT</pubDate></item><item><title>Things Are Starting to Come Together</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250629_1859_darshvn/</link><dc:creator>Darshan Patil</dc:creator><description>&lt;p&gt;The past couple of weeks have been really productive. After the initial planning and community bonding period, I’ve finally started working on the actual implementation. The transition from understanding the theory to getting hands-on with the code has been challenging but rewarding.&lt;/p&gt;
&lt;p&gt;After writing my last blog post and going through the codebase more thoroughly, I discovered there are several existing classes and methods that can be reused for this project. This has led to a revised approach that builds on what’s already working well in RADIS.&lt;/p&gt;
&lt;h4&gt;Revised Approach&lt;/h4&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/876/1*XSL9jIwlwb7FZpoD5oZjEg.png"&gt;&lt;/figure&gt;&lt;p&gt;The core approach is the same as originally planned, but now the rovibrational populations are calculated using the existing RovibParFuncCalculator. This lets me reuse code while adding the electronic state functionality we need.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The workflow starts with user inputs: electronic temperature (Telec), rotational temperature (Trot), and optional manual band scaling. The system processes the main electronic states OH(X) and OH(A) for now only works with hydroxyl radical calculations.&lt;/p&gt;
&lt;p&gt;The ElectronicPartitionFunction computes population fractions for each electronic state at the specified electronic temperature. Meanwhile, the RovibParFuncCalculator handles rovibrational populations for each state at the rotational temperature. These calculations run in parallel, and their results get multiplied to determine total populations for each rovibrational level within each electronic state.&lt;/p&gt;
&lt;p&gt;After applying any manual band scaling factors, all contributions from the various electronic states are summed to build the complete spectrum.&lt;/p&gt;
&lt;h4&gt;The Mathematical Foundation&lt;/h4&gt;&lt;p&gt;The calculation relies on determining the total population of a rovibrational level using:&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/991/1*95PzSSkP9W6DyHOTonDx4A.png"&gt;&lt;/figure&gt;&lt;p&gt;This separates cleanly into electronic and rovibrational components. The electronic part depends on degeneracy and energy at the electronic temperature, while the rovibrational part accounts for vibrational and rotational contributions at the rovibrational temperature.&lt;/p&gt;
&lt;p&gt;The partition functions are calculated separately: Z_elec for electronic states and Z_rovib for rovibrational states. For practical purposes, these can be treated as separable components, which simplifies the implementation considerably.&lt;/p&gt;
&lt;h4&gt;Working with ExoMol Data&lt;/h4&gt;&lt;p&gt;Working with ExoMol’s .states files has been interesting. These files contain detailed molecular energy level information, but parsing them correctly for electronic transitions requires careful attention to the quantum mechanics involved.&lt;/p&gt;
&lt;p&gt;We’ve adapted the existing read_states functionality in RADIS to handle all the columns we need for this project. The standard format includes columns for [n, E, g, J, e/f, v, F1/F2, State], where each parameter is important for determining molecular behavior. By extending the existing parsing capabilities, we can now properly extract and interpret these electronic quantum numbers for use in subsequent calculations.&lt;/p&gt;
&lt;h4&gt;Electronic State Mapping&lt;/h4&gt;&lt;p&gt;I’ve implemented functions to map electronic states and calculate proper degeneracies, which are essential for accurate partition function calculations. This mapping system ensures each quantum state is properly characterized with its corresponding statistical weight and energy.&lt;/p&gt;
&lt;p&gt;The mapping process involves parsing quantum state labels from ExoMol files and translating them into RADIS’s internal representation. This maintains the physical meaning while adapting to RADIS’s computational framework.&lt;/p&gt;
&lt;h4&gt;Architecture Design&lt;/h4&gt;&lt;p&gt;One of the more interesting technical challenges has been designing the partition function architecture for electronic states. I’ve been working with the existing RovibParFuncCalculator in radis/levels/partfunc.py, which handles rovibrational partition functions effectively.&lt;/p&gt;
&lt;p&gt;The architecture centers on separating electronic partition function calculations into dedicated components while maintaining integration with existing functionality. The ElectronicPartitionFunction class handles electronic state calculations, managing the quantum mechanical relationships and temperature dependencies for electronic population distributions.&lt;/p&gt;
&lt;p&gt;This integrates with existing rovibrational calculations and allows users to specify different electronic temperatures (Telec) independently from rovibrational temperatures. This separation makes physical sense since electronic excitation often occurs under different conditions than rovibrational excitation.&lt;/p&gt;
&lt;p&gt;The system also includes manual band intensity adjustment capabilities, giving researchers flexibility to fine-tune calculations based on experimental observations or theoretical corrections that might not be fully captured in the base calculations.&lt;/p&gt;
&lt;h4&gt;Current Implementation Status&lt;/h4&gt;&lt;p&gt;The implementation is progressing well. ExoMol parsing now properly handles electronic state information, and band scaling functionality works with dictionary-based input formats.&lt;/p&gt;
&lt;p&gt;The ElectronicPartitionFunction class computes population fractions for individual electronic states at specified temperatures. The enhanced RovibParFuncCalculator handles rovibrational populations across multiple electronic states. Integration multiplies electronic fractions by rovibrational populations to get total level populations, and final spectrum synthesis sums contributions from all electronic states.&lt;/p&gt;
&lt;h4&gt;Next Steps&lt;/h4&gt;&lt;p&gt;The next phase will focus on fixing the broken control and data flow, optimization, testing with various molecular systems, and ensuring robust performance across the range of conditions RADIS users encounter.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=388f0918afc5" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250629_1859_darshvn/</guid><pubDate>Sun, 29 Jun 2025 17:59:01 GMT</pubDate></item><item><title>✨Good Time, Bad Time: GTI/BTI :)</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250629_0626_kashish2210/</link><dc:creator>kashish shrivastav</dc:creator><description>&lt;p&gt;In my continued journey with &lt;code&gt;Stingray.jl&lt;/code&gt; During GSoC 2025, this phase focused on a core aspect of high-energy astrophysics: time filtering using &lt;strong&gt;GTIs (Good Time Intervals)&lt;/strong&gt; and &lt;strong&gt;BTIs (Bad Time Intervals)&lt;/strong&gt;. After a productive discussion with my mentor &lt;a class="" href="https://github.com/matteobachetti" rel="noopener" target="_new"&gt;@matteobachetti&lt;/a&gt; during our meet, I dove into implementing and refining functionality around GTIs—an essential tool in the timing analysis of astrophysical data.&lt;/p&gt;&lt;div class="flex basis-auto flex-col -mb-(--composer-overlap-px) [--composer-overlap-px:24px] grow overflow-hidden"&gt;&lt;div class="relative h-full"&gt;&lt;div class="flex h-full flex-col overflow-y-auto [scrollbar-gutter:stable_both-edges] @[84rem]/thread:pt-(--header-height)"&gt;&lt;div class="@thread-xl/thread:pt-header-height flex flex-col text-sm pb-25"&gt;&lt;article class="text-token-text-primary w-full" dir="auto"&gt;&lt;div class="text-base my-auto mx-auto py-5 [--thread-content-margin:--spacing(4)] @[37rem]:[--thread-content-margin:--spacing(6)] @[72rem]:[--thread-content-margin:--spacing(16)] px-(--thread-content-margin)"&gt;&lt;div class="[--thread-content-max-width:32rem] @[34rem]:[--thread-content-max-width:40rem] @[64rem]:[--thread-content-max-width:48rem] mx-auto flex max-w-(--thread-content-max-width) flex-1 text-base gap-4 md:gap-5 lg:gap-6 group/turn-messages focus-visible:outline-hidden" tabindex="-1"&gt;&lt;div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"&gt;&lt;div class="relative flex-col gap-1 md:gap-3"&gt;&lt;div class="flex max-w-full flex-col grow"&gt;&lt;div class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 text-start break-words whitespace-normal [.text-message+&amp;amp;]:mt-5" dir="auto"&gt;&lt;div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"&gt;&lt;div class="markdown prose dark:prose-invert w-full break-words dark"&gt;
&lt;h4&gt;What Are GTIs and BTIs?&lt;/h4&gt;
&lt;ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GTIs&lt;/strong&gt; define intervals during which the data is considered reliable—free of contamination, instrument artifacts, or observational interruptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BTIs&lt;/strong&gt; are the complementary regions—gaps between GTIs that typically represent unusable or noisy time segments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Correct handling of these intervals is critical, especially in &lt;strong&gt;X-ray timing&lt;/strong&gt;, where even small artifacts can skew power spectra, light curves, and periodograms.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Worked on Features this week&lt;/h4&gt;
&lt;p&gt;I extended and validated the implementation of GTI filtering in both &lt;code&gt;EventList&lt;/code&gt; and &lt;code&gt;LightCurve&lt;/code&gt; structures:&lt;/p&gt;
&lt;hr&gt;
&lt;h5&gt;&lt;code&gt;apply_gtis(el::EventList, gtis::Matrix)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This function filters photon events using a list of GTIs:&lt;/p&gt;&lt;pre class="overflow-visible!"&gt;&lt;div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary"&gt;&lt;div class="overflow-y-auto p-4" dir="ltr"&gt;&lt;code class="whitespace-pre! language-julia"&gt;filtered_el = filter_time(t -&amp;gt; gti_start ≤ t ≤ gti_stop, el)
&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;Only events within the GTI boundaries are retained, and only non-empty segments are returned. This helps preserve valid data while preparing segments for further timing analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h5&gt;&lt;code&gt;apply_gtis(lc::LightCurve, gtis::Matrix)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;For light curves, bins are included &lt;strong&gt;only if their centers fall entirely within a GTI&lt;/strong&gt;:&lt;/p&gt;&lt;pre class="overflow-visible!"&gt;&lt;div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary"&gt;&lt;div class="overflow-y-auto p-4" dir="ltr"&gt;&lt;code class="whitespace-pre! language-julia"&gt;bin_mask = (lc.time .≥ gti_start) .&amp;amp; (lc.time .≤ gti_stop)
&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;This strict criterion ensures that bin integrity is preserved—especially important for Fourier-based methods like power spectral density and periodogram calculations. Each resulting segment includes full metadata and is well-formed for downstream analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h5&gt;&lt;code&gt;fill_bad_time_intervals!(el::EventList, gtis::Matrix)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;I also implemented an &lt;strong&gt;experimental utility&lt;/strong&gt; for BTI filling. Short gaps (BTIs shorter than a configurable threshold) can be optionally filled with &lt;strong&gt;synthetic events&lt;/strong&gt; to maintain temporal continuity for methods sensitive to uneven sampling.&lt;/p&gt;
&lt;p&gt;Highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTIs are computed from GTIs and event time range.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Short gaps can be filled with randomly spaced synthetic events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synthetic events sample from the original energy distribution (if present).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata is updated to clearly tag synthetic data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This feature is useful for methods like &lt;strong&gt;Bartlett periodograms&lt;/strong&gt; or other analyses where continuity is required but small gaps might otherwise bias the results&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Stay tuned for the next dive into timing analysis tools in &lt;code&gt;Stingray.jl&lt;/code&gt;. Until then—make your time intervals &lt;em&gt;good&lt;/em&gt; :)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="isolate z-10 w-full basis-auto has-data-has-thread-error:pt-2 has-data-has-thread-error:[box-shadow:var(--sharp-edge-bottom-shadow)] md:border-transparent md:pt-0 dark:border-white/20 md:dark:border-transparent flex flex-col" id="thread-bottom-container"&gt;&lt;div class="text-token-text-secondary relative mt-auto flex min-h-8 w-full items-center justify-center p-2 text-center text-xs md:px-[60px]"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>JuliaAstro</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250629_0626_kashish2210/</guid><pubDate>Sun, 29 Jun 2025 05:26:00 GMT</pubDate></item><item><title>Moving to the Frontend</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250620_0505_mohyware/</link><dc:creator>mohyware</dc:creator><description>&lt;p&gt;As part of the ongoing development, we’ve now begun focusing on the frontend side of the project, improving the user experience and preparing for more database integrations.&lt;/p&gt;
&lt;h4&gt;Initial Cleanup&lt;/h4&gt;&lt;p&gt;To ensure a clean development workflow, I started by:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fixing linting and type-checking issues to maintain code quality.&lt;/li&gt;&lt;li&gt;Repairing frontend tests to make sure new changes are verifiable.&lt;/li&gt;&lt;li&gt;This was important to establish a solid pipeline, so any new code added to the frontend can be tested and reviewed confidently.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Full Dark Mode Support&lt;/h4&gt;&lt;p&gt;A major enhancement was implementing &lt;strong&gt;dark mode&lt;/strong&gt; across the entire frontend, not just the MUI (Material UI) components, but also the &lt;strong&gt;plotting graph area&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This took some effort as it required:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Migrating from &lt;strong&gt;Joy UI components&lt;/strong&gt; (buttons, inputs, etc.) to &lt;strong&gt;Material UI components&lt;/strong&gt; to ensure compatibility with CssVarsProvider.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Refactoring existing styles&lt;/strong&gt; to align with the new Material UI design system.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The result is a visually cohesive and fully functional dark mode experience!&lt;/p&gt;
&lt;h4&gt;Database Integrations on the Frontend&lt;/h4&gt;&lt;p&gt;I’ve also added frontend support for &lt;strong&gt;ExoMol&lt;/strong&gt; and &lt;strong&gt;NIST&lt;/strong&gt; databases:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ExoMol&lt;/strong&gt; is now functional. However, it still requires optimization. Specifically, setting the broadf variable to False can help reduce unnecessary broadening downloads overhead.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;NIST&lt;/strong&gt; and &lt;strong&gt;HITEMP&lt;/strong&gt; are not yet fully working, as they require login through the HITRAN website. To address this, I’ve added a script that automatically sets the email and password in the RADIS configuration, enabling these databases to work when the application is run.&lt;/li&gt;&lt;/ul&gt;&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=5ae8056490f5" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250620_0505_mohyware/</guid><pubDate>Fri, 20 Jun 2025 04:05:37 GMT</pubDate></item><item><title>🌟 Things Are Getting Interesting!!</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250613_0732_kashish2210/</link><dc:creator>kashish shrivastav</dc:creator><description>&lt;p&gt;Hey everyone!&lt;/p&gt;
&lt;p&gt;If you’ve read my &lt;a href="https://kashish2210.blogspot.com/2025/05/begining-of-gsoc2025.html" rel="noopener"&gt;first blog&lt;/a&gt;, you already know how this journey started — with nervous excitement, inspiring mentors, and my deep love for astronomy. Since then, &lt;strong&gt;things have only gotten more interesting&lt;/strong&gt; — and yes, more challenging, but in the best way possible!&lt;/p&gt;
&lt;h3&gt;Developing, Debugging, and Growing&lt;/h3&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;These past few weeks have felt like a whirlwind of beauty. I’ve found myself diving deeper into spectral analysis, implementing windowing techniques, exploring real research articles, and most excitingly, contributing to the actual development of functions inside Stingray.jl!&lt;/p&gt;
&lt;h3&gt;A New Adventure: EventList and GTI Handling&lt;/h3&gt;
&lt;p&gt;Now comes the exciting part — I’ve been working on &lt;strong&gt;mission support&lt;/strong&gt;, &lt;a href="https://github.com/StingraySoftware/Stingray.jl/pull/49" rel="noopener" target="_new"&gt;PR #49&lt;/a&gt;, where I got to play around with &lt;code&gt;EventList&lt;/code&gt; structures.&lt;/p&gt;
&lt;p&gt;I made a minimal version  &lt;code&gt;EventList&lt;/code&gt; that could read test files, handle metadata smartly, and even filter events using GTIs (Good Time Intervals). My mentor @fergus and I created a  &lt;code&gt;filter_time! &lt;/code&gt;function that makes it super easy to slice time windows and work with just the needed data.&lt;/p&gt;
&lt;p&gt;It felt awesome to write something like this:&lt;/p&gt;
&lt;pre class="overflow-visible!"&gt;&lt;div class="contain-inline-size rounded-2xl border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"&gt;&lt;div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none rounded-t-2xl"&gt;julia&lt;/div&gt;&lt;div class="overflow-y-auto p-4" dir="ltr"&gt;&lt;code class="whitespace-pre! language-julia"&gt;filter_energy!(&amp;lt;(10u"keV"), filter_time!(&amp;gt;(min_time * u"s"), event_list))
&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;Elegant, right?&lt;/p&gt;
&lt;p&gt;Also, a quick lesson: &lt;strong&gt;GTIs&lt;/strong&gt; are just two columns — &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;STOP&lt;/code&gt; — telling us when the telescope was actually collecting good data. Handling them properly means our analysis gets cleaner, smarter, and more accurate. I plan to extend my implementation soon to include full GTI support in &lt;code&gt;EventList&lt;/code&gt; directly. Small step, big improvement!&lt;/p&gt;
&lt;h3&gt;Tests, Tests, and More Tests&lt;/h3&gt;
&lt;p&gt;One cool thing I picked up from looking at simpler implementations was &lt;strong&gt;writing smaller, more flexible test cases&lt;/strong&gt;. I’ve started structuring my tests to be interactive and IDE-friendly — so I can quickly check and fix stuff without wrapping everything in big test blocks. It makes debugging &lt;em&gt;way&lt;/em&gt; less stressful. suggested by @fergus&lt;/p&gt;
&lt;h3&gt;What's Next?&lt;/h3&gt;
&lt;p&gt;Right now, I’m:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tweaking the &lt;code&gt;recipbase&lt;/code&gt; functions to make them more modular.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exploring how to use metadata more flexibly in different missions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working on improving event filtering and data handling inside &lt;code&gt;EventList&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thinking about ways to contribute test utilities that let us simulate dummy FITS files and test logic &lt;em&gt;without&lt;/em&gt; needing real data every time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;✨ Final Thoughts&lt;/h3&gt;
&lt;p&gt;Honestly, it still feels surreal to be working with real tools and contributing code that could one day help researchers uncover deeper insights about the universe. Every commit I make, every tiny improvement I push, and even the bugs I chase down — they’re all helping me grow. Not just as a coder, but as a thinker, a problem solver, and someone who genuinely enjoys the process of learning.&lt;/p&gt;&lt;p&gt;
&lt;/p&gt;&lt;p&gt;What started as an exciting journey has now become something even more thrilling — it feels like I’m leveling up with each challenge I face (yes, just like in my favorite anime, &lt;em&gt;Solo Leveling&lt;/em&gt; 😄). And the best part? This is only the beginning.&lt;/p&gt;</description><category>JuliaAstro</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250613_0732_kashish2210/</guid><pubDate>Fri, 13 Jun 2025 06:32:00 GMT</pubDate></item><item><title>Yeah! I have a GSoC project with Radis</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250607_0949_prtm2110/</link><dc:creator>Pratham</dc:creator><description>&lt;p&gt;Finally, I have been contributing to scientific open source for about a year now and it has taught me a lot I mean a lot, I still remember searching for a simple documentation issue so I could get it merged and call myself a “contributor” haha, and that got me started in scientific open source. Since then, I have been able to make some truly meaningful contributions to many projects, and here I am writing a blog for GSoC with Radis which is a pythonic library for fast line-by-line code for high resolution infrared molecular spectra, under the OpenAstronomy umbrella.&lt;/p&gt;
&lt;p&gt;So my project is cool ngl, and it is titled “Fast Parsing of Large Databases and Execution Bottlenecks” basically there exists a large highly compressed CO₂ spectroscopic database of size 6 GB file that decompresses to about 50 GB and takes at least 2.5 hours to parse and convert into a DataFrame. As you might expect, my project is about significantly reducing the parsing time and finding a workaround for storing only the “necessary” parts of the decompressed file.&lt;/p&gt;
&lt;p&gt;Radis is pythonic and sometimes python gets real slow if not used the way it is meant to be used, so my initial thought was to first clean up the existing code and use vectorised operations and with numba we should be able to see some real optimisation. But then I realized the current implementation already has the right vectorized operations on DataFrames, and Pandas’ vectorized methods are already implemented in optimized C/Cython loops. So there isn’t much more to do here other than replace a few overheads with other operations. After that, as discussed with my mentors I can use a C++ Single Instruction Multiple Data (SIMD) mechanism to parse the file and create a python interface on top of that with pybind11 or cython and other option but this will cost us portability as compilation will be a thing that is to considered. Other approach which is using vulkan API in python as it supports CPU as well GPU parallelism and its cross platform as it will works on all CPU architectures.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing I did was profile the hit2df function for the NO₂ molecule, which is much smaller compared to CO₂ but uses the same operations. That gave a good idea of the actual bottlenecks and where I need to work.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9OApPZeVUuVw2vAwSCqGQg.png"&gt;&lt;figcaption&gt;Profiling of `hit2df` function for NO₂ molecule&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As you can see, most of the time is spent in post_process_hitran_data and which is expected because this function calls parse_local_quanta and parse_global_quanta both applies regex across multiple string columns, which is slow at scale, so I switced to fixed‐width slicing to avoid that per-row overhead, of course this was possible as the dataset is consistent and doesn’t require regex at all (I really hope).&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*4T1gkGX-4N4_CzO3"&gt;&lt;/figure&gt;&lt;p&gt;This resulted in a clean improvement of about 38%, which will serve as the default option, along with the Vulkan-API mechanism, which I expect will yield a huge optimization compared to the default. That’s something we will see that in the next episode, stay tuned ;)&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=113900105c46" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250607_0949_prtm2110/</guid><pubDate>Sat, 07 Jun 2025 08:49:18 GMT</pubDate></item><item><title>Starting My GSoC Journey with RADIS</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250607_0422_darshvn/</link><dc:creator>Darshan Patil</dc:creator><description>&lt;h4&gt;Getting Started&lt;/h4&gt;&lt;p&gt;A month has passed since the GSoC results came out, and honestly, and the excitement still hasn’t quite settled. That announcement day was pretty intense, my mind was racing, second-guessing everything. But wow, things worked out even better than I’d hoped.&lt;/p&gt;
&lt;p&gt;The community bonding period hit right during my final exams, which was tricky timing. So I focused on what mattered most, getting to know my mentors, joining the weekly calls, and really wrapping my head around the project from a theoretical standpoint.&lt;/p&gt;
&lt;h4&gt;What I’m Working On&lt;/h4&gt;&lt;p&gt;I’m working on something called “&lt;strong&gt;Electronic Spectra for RADIS.&lt;/strong&gt;” Basically, RADIS is this awesome library for modeling rovibrational spectra, but it’s missing one key piece; electronic transitions. That’s where I come in! I want to add that missing functionality and make RADIS even more powerful.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Even though I already knew RADIS pretty well, I spent time going through everything again to make sure I really understood what needed to be done. No point in reinventing the wheel, right? My mentor Nicolas helped me put together a solid plan that actually makes sense.&lt;/p&gt;
&lt;h4&gt;Breaking It Down&lt;/h4&gt;&lt;p&gt;Here’s how I’m breaking it down into four main chunks:&lt;/p&gt;
&lt;p&gt;First up is &lt;strong&gt;OH Electronic Spectra Calculation&lt;/strong&gt; — I’m starting with OH molecules as my test case and building the ability to manually tweak electronic band intensities when things are not in equilibrium as suggested by Nicolas in the project idea, “&lt;em&gt;starting with non-equilibrium spectra of atomic species makes sense since the physics is slightly easier than for molecules&lt;/em&gt;.”&lt;/p&gt;
&lt;p&gt;Then comes &lt;strong&gt;Electronic Temperature Support&lt;/strong&gt; — this is where I’ll add calculations for electronic state populations, assuming the electronic temperature is different from the other temperatures.&lt;/p&gt;
&lt;p&gt;Third is &lt;strong&gt;Equilibrium OH Spectrum&lt;/strong&gt; — putting together everything from the earlier steps to calculate OH spectra when things are in equilibrium.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;Extension to ExoMol Molecules&lt;/strong&gt; — taking what I’ve built and making it work for all ExoMol molecules.&lt;/p&gt;
&lt;p&gt;This approach builds on what RADIS already does well while systematically adding the electronic transition stuff, all within the GSoC timeline.&lt;/p&gt;
&lt;h4&gt;The Technical Stuff&lt;/h4&gt;&lt;h4&gt;Working with Data Files&lt;/h4&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*pTN3jp3K2szObHXmSYp3gw.png"&gt;&lt;figcaption&gt;Sample of the OH .states file format showing electronic state information and quantum numbers.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;To kick off the first milestone, I’m using the .states file from ExoMol for OH molecules, which has all the electronic state info and quantum numbers. RADIS already has a read_states() function in exomolapi.py that can parse this format, but right now it only extracts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;i: State counting number&lt;/li&gt;&lt;li&gt;E: State energy&lt;/li&gt;&lt;li&gt;g: State degeneracy&lt;/li&gt;&lt;li&gt;J: Total angular momentum&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I’ll modify this to additionally extract the electronic-specific parameters:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;State: Electronic state label (e.g., X(²Π))&lt;/li&gt;&lt;li&gt;Λ: Electronic angular momentum quantum number&lt;/li&gt;&lt;li&gt;Σ: Spin angular momentum quantum number&lt;/li&gt;&lt;li&gt;Ω: Total electronic angular momentum quantum number&lt;/li&gt;&lt;li&gt;Type: State type (e.g., Ma for main)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This will be the foundation for getting electronic transitions working in RADIS.&lt;/p&gt;
&lt;h4&gt;Making the Calculations Work&lt;/h4&gt;&lt;p&gt;For the population calculations, I’ll be working with the existing partfunc.py file. I'm planning to create a new ElectronicPartitionFunction class and implement the Boltzmann distribution for electronic states. Nicolas referenced a formula from his &lt;a href="https://theses.fr/2020UPAST052"&gt;thesis (Chapter 1, Section 1.1)&lt;/a&gt; that’s relevant to what I’m implementing.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="Boltzmann distribution" src="https://cdn-images-1.medium.com/max/1024/1*bEtk5kQGqpD5kbzwgmLeCQ.png"&gt;&lt;figcaption&gt;Boltzmann distribution&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;All of this will eventually get integrated into SpectrumFactory to compute electronic spectra in SpectrumFactory.non_eq_spectrum(). I'll be adding an electronic temperature (Telec) parameter and thinking about using the overpopulation parameter for manually adjusting electronic band intensities.&lt;/p&gt;
&lt;h4&gt;What’s Next&lt;/h4&gt;&lt;p&gt;I’m planning to work on all this over the next few weeks to nail the first milestone. I’m genuinely excited to be part of this project and can’t wait to learn tons and build something really cool. This is going to be an amazing journey!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=14b98a245c55" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250607_0422_darshvn/</guid><pubDate>Sat, 07 Jun 2025 03:22:57 GMT</pubDate></item><item><title>GSoC 2025 Blog — Week 1: Starting the Project</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250605_0225_mohyware/</link><dc:creator>mohyware</dc:creator><description>&lt;h4&gt;GSoC 2025 Blog — Starting the Project&lt;/h4&gt;&lt;h4&gt;Kicking Things Off&lt;/h4&gt;&lt;p&gt;The first weeks of GSoC were all about getting familiar with the project, understanding its current state, and laying the groundwork for upcoming work. We began by &lt;strong&gt;listing the key features&lt;/strong&gt; we plan to implement and prioritizing them based on impact and feasibility.&lt;/p&gt;
&lt;h4&gt;Cleaning Up the Repo&lt;/h4&gt;&lt;p&gt;Before diving into development, we focused on improving the current state of the codebase:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Filtered through existing PRs.&lt;/li&gt;&lt;li&gt;Merged those that were ready.&lt;/li&gt;&lt;li&gt;Closed duplicates or low-quality submissions.&lt;/li&gt;&lt;li&gt;Requested changes when necessary.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This cleanup helped fix some bugs and made the repository more maintainable moving forward.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4&gt;CI Enhancements&lt;/h4&gt;&lt;p&gt;To ensure future contributions are smoother, we improved the Continuous Integration setup:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Added conditional CI jobs to run &lt;strong&gt;frontend or backend tests&lt;/strong&gt; only when their respective files are changed.&lt;/li&gt;&lt;li&gt;Introduced &lt;strong&gt;Codecov comments&lt;/strong&gt; to show coverage of newly added lines, making it easier to track test quality in PRs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These changes should streamline reviews and reduce unnecessary CI runs.&lt;/p&gt;
&lt;h4&gt;Early Contributions&lt;/h4&gt;&lt;p&gt;I also started contributing new features and improvements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Integrated ExoMol and NIST databases&lt;/strong&gt; into the backend.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While integrating the NIST database, I encountered a tricky error related to the RADIS package:&lt;/p&gt;
&lt;pre&gt;No databank named nist in `/home/mohy/radis.json`. Available databanks: […]&lt;/pre&gt;&lt;p&gt;It turned out that the version of RADIS in the was outdated and didn’t recognize the `nist` databank. This was fixed by upgrading RADIS:&lt;/p&gt;
&lt;pre&gt;pip install — upgrade radis&lt;/pre&gt;&lt;p&gt;Then, another error popped up related to pandas:&lt;/p&gt;
&lt;pre&gt;No such keys(s): 'future.no_silent_downcasting'&lt;/pre&gt;&lt;p&gt;This was caused by version incompatibility, which was resolved by upgrading pandas:&lt;/p&gt;
&lt;pre&gt;pip install — upgrade pandas&lt;/pre&gt;&lt;p&gt;After these upgrades, the databases worked correctly on the backend. The frontend integration and performance optimizations (e.g., caching) are next on my list.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Increased backend test coverage&lt;/strong&gt;, especially for newly added endpoints and database integrations.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That’s a wrap for the first weeks! It’s been a productive start, and I’m excited to keep building and learning in the coming weeks. Stay tuned for more updates!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=59a02a05ae58" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250605_0225_mohyware/</guid><pubDate>Thu, 05 Jun 2025 01:25:44 GMT</pubDate></item><item><title>Oops, I’m a GSoC Dev Now?</title><link>http://openastronomy.org/Universe_OA/posts/2025/06/20250604_1803_adnan-itis/</link><dc:creator>Mohammad Adnan</dc:creator><description>&lt;p&gt;Wow! I still can't believe I'm actually in Google Summer of Code! This was a dream, and now here I am, officially past the Community Bonding Period and diving headfirst into the Coding Phase.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What’s Happening Right Now?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Right now, I’m sketching out the basic structure of the application interface. The first big task? Fetching event files from specific sources. Sounds simple, right? Well… not quite&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Turns out, HEASARC (the database I need) is having a little meltdown (don’t we all sometimes?). So while I wait for it to get its act together, I’ve been tweaking the pipeline that’ll handle the data retrieval.&lt;/p&gt;
&lt;p&gt;Oh, and my mentor dropped a fun suggestion: "Hey, why not try running this on SciServer?" So guess what I’ll be wrestling with next? &lt;/p&gt;
&lt;p&gt;The last two weeks were chaos. My end-semester exams decided to crash the party right in the middle of the Community Bonding Period. Juggling study sessions, meeting my mentors, and trying not to panic about code I hadn’t even written yet? Yeah, that was… an experience.&lt;/p&gt;
&lt;p&gt;But I survived! And soon, I’ll spill all the tea in a proper "How I Got Into GSoC" post—complete with:&lt;/p&gt;
&lt;p&gt;Why I chose Stingray &lt;b&gt;(spoiler: space data is cool)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The emotional rollercoaster of the application process&lt;/p&gt;
&lt;p&gt;Why I may or may not have happy-cried when I got accepted&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What’s Next? Big Dreams &amp;amp; Messy Code&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;I’ve got so many ideas for this project, and the best part? We’re still figuring things out as we go. It’s like exploring uncharted territory—sometimes you hit a wall, sometimes you find a hidden shortcut, but it’s always an adventure.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This is my very first GSoC blog, and honestly? I’m just excited to share the journey—bugs, breakthroughs, and all. Thanks for reading! More updates coming soon. 🚀 :})&lt;/p&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2025/06/20250604_1803_adnan-itis/</guid><pubDate>Wed, 04 Jun 2025 17:03:00 GMT</pubDate></item></channel></rss>